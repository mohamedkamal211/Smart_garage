
Smart_Garage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ea2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00003ea2  00003f36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800184  00800184  0000405a  2**0
                  ALLOC
  3 .stab         00003dd4  00000000  00000000  0000405c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019ed  00000000  00000000  00007e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000981d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000099bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00009bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000bfb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000d330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e508  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000e9bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f389  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__vector_4>
      14:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__vector_5>
      18:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__vector_6>
      1c:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__vector_7>
      20:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__vector_8>
      24:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__vector_9>
      28:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__vector_10>
      2c:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 19 	call	0x327c	; 0x327c <main>
      8a:	0c 94 4f 1f 	jmp	0x3e9e	; 0x3e9e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e7       	ldi	r26, 0x79	; 121
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e7       	ldi	r24, 0x79	; 121
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e7       	ldi	r22, 0x79	; 121
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 21 1f 	jmp	0x3e42	; 0x3e42 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	ef 57       	subi	r30, 0x7F	; 127
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <TIMER0_VoidInit>:
#include "../Header/Timer_Interface.h"

static void (*pvCallBackFuncs[NumberOfINTs])(void)= {NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL} ;

void TIMER0_VoidInit(u8 TIMER0_MODE)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01
/********************************Normal MODE*************************************************/
	if(TIMER0_MODE == TIMER0_NormalMode)
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	8e 36       	cpi	r24, 0x6E	; 110
     e08:	21 f5       	brne	.+72     	; 0xe52 <TIMER0_VoidInit+0x5a>
	{

	/*SET WGM */
	Clear_Bit(TIMER0_TCCR0,TCCR0_WGM00);
     e0a:	a3 e5       	ldi	r26, 0x53	; 83
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e3 e5       	ldi	r30, 0x53	; 83
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8f 7b       	andi	r24, 0xBF	; 191
     e16:	8c 93       	st	X, r24
	Clear_Bit(TIMER0_TCCR0,TCCR0_WGM01);
     e18:	a3 e5       	ldi	r26, 0x53	; 83
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e3 e5       	ldi	r30, 0x53	; 83
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	87 7f       	andi	r24, 0xF7	; 247
     e24:	8c 93       	st	X, r24

		TIMER0_TCCR0	&=	PRESCALER_MASK	;
		TIMER0_TCCR0	|=	TIMER0_PRESCALER_NoPS	;
	#elif	TIMER0_PRESCALER_MODE	== TIMER0_PRESCALER_8

			TIMER0_TCCR0	&=	PRESCALER_MASK	;
     e26:	a3 e5       	ldi	r26, 0x53	; 83
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e3 e5       	ldi	r30, 0x53	; 83
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	88 7f       	andi	r24, 0xF8	; 248
     e32:	8c 93       	st	X, r24
			TIMER0_TCCR0	|=	TIMER0_PRESCALER_8	;
     e34:	a3 e5       	ldi	r26, 0x53	; 83
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e3 e5       	ldi	r30, 0x53	; 83
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	82 60       	ori	r24, 0x02	; 2
     e40:	8c 93       	st	X, r24

			TIMER0_TCCR0	&=	PRESCALER_MASK	;
			TIMER0_TCCR0	|=	TIMER0_PRESCALER_Rising	;
	#endif
	/*Enable Interrupt*/
		Set_Bit(TIMER0_TIMSK,TIMSK_TOIE0);
     e42:	a9 e5       	ldi	r26, 0x59	; 89
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e9 e5       	ldi	r30, 0x59	; 89
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	81 60       	ori	r24, 0x01	; 1
     e4e:	8c 93       	st	X, r24
     e50:	74 c0       	rjmp	.+232    	; 0xf3a <TIMER0_VoidInit+0x142>
	}
/********************************FAST PWM*************************************************/
	else if (TIMER0_MODE == TIMER0_FastPWMMode)	//TO use this mode PIN OC0 Must be defined as OUTPUT in APP
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	81 37       	cpi	r24, 0x71	; 113
     e56:	59 f5       	brne	.+86     	; 0xeae <TIMER0_VoidInit+0xb6>
	{
		/*SET WGM*/
		Set_Bit(TIMER0_TCCR0,TCCR0_WGM00);
     e58:	a3 e5       	ldi	r26, 0x53	; 83
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e3 e5       	ldi	r30, 0x53	; 83
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	80 64       	ori	r24, 0x40	; 64
     e64:	8c 93       	st	X, r24
		Set_Bit(TIMER0_TCCR0,TCCR0_WGM01);
     e66:	a3 e5       	ldi	r26, 0x53	; 83
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e3 e5       	ldi	r30, 0x53	; 83
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	88 60       	ori	r24, 0x08	; 8
     e72:	8c 93       	st	X, r24
			Clear_Bit(TIMER0_TCCR0,TCCR0_COM01);
		#elif 	TIMER0_CompareOutputMode == TIMER0_CompareModeFastPWMInverted
			Set_Bit(TIMER0_TCCR0,TCCR0_COM00);
			Set_Bit(TIMER0_TCCR0,TCCR0_COM01);
		#elif 	TIMER0_CompareOutputMode == TIMER0_CompareModeFastPWMNonInverted
			Clear_Bit(TIMER0_TCCR0,TCCR0_COM00);
     e74:	a3 e5       	ldi	r26, 0x53	; 83
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e3 e5       	ldi	r30, 0x53	; 83
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 7e       	andi	r24, 0xEF	; 239
     e80:	8c 93       	st	X, r24
			Set_Bit(TIMER0_TCCR0,TCCR0_COM01);
     e82:	a3 e5       	ldi	r26, 0x53	; 83
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e3 e5       	ldi	r30, 0x53	; 83
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	80 62       	ori	r24, 0x20	; 32
     e8e:	8c 93       	st	X, r24

	    	TIMER0_TCCR0	&=	PRESCALER_MASK	;
	    	TIMER0_TCCR0	|=	TIMER0_PRESCALER_NoPS	;
	    #elif	TIMER0_PRESCALER_MODE	== TIMER0_PRESCALER_8

	    		TIMER0_TCCR0	&=	PRESCALER_MASK	;
     e90:	a3 e5       	ldi	r26, 0x53	; 83
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e3 e5       	ldi	r30, 0x53	; 83
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	88 7f       	andi	r24, 0xF8	; 248
     e9c:	8c 93       	st	X, r24
	    		TIMER0_TCCR0	|=	TIMER0_PRESCALER_8	;
     e9e:	a3 e5       	ldi	r26, 0x53	; 83
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e3 e5       	ldi	r30, 0x53	; 83
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	82 60       	ori	r24, 0x02	; 2
     eaa:	8c 93       	st	X, r24
     eac:	46 c0       	rjmp	.+140    	; 0xf3a <TIMER0_VoidInit+0x142>
	    #endif


	}
/*********************************PWM Phase Correct****************************************/
	else if (TIMER0_MODE	==	TIMER0_PWMPhaseCorrectMode)
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	80 37       	cpi	r24, 0x70	; 112
     eb2:	e9 f4       	brne	.+58     	; 0xeee <TIMER0_VoidInit+0xf6>
	{
		/*SET WGM*/
		Set_Bit(TIMER0_TCCR0,TCCR0_WGM00);
     eb4:	a3 e5       	ldi	r26, 0x53	; 83
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e3 e5       	ldi	r30, 0x53	; 83
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	80 64       	ori	r24, 0x40	; 64
     ec0:	8c 93       	st	X, r24
		Clear_Bit(TIMER0_TCCR0,TCCR0_WGM01);
     ec2:	a3 e5       	ldi	r26, 0x53	; 83
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e3 e5       	ldi	r30, 0x53	; 83
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	87 7f       	andi	r24, 0xF7	; 247
     ece:	8c 93       	st	X, r24

	    	TIMER0_TCCR0	&=	PRESCALER_MASK	;
	    	TIMER0_TCCR0	|=	TIMER0_PRESCALER_NoPS	;
	    #elif	TIMER0_PRESCALER_MODE	== TIMER0_PRESCALER_8

	    		TIMER0_TCCR0	&=	PRESCALER_MASK	;
     ed0:	a3 e5       	ldi	r26, 0x53	; 83
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e3 e5       	ldi	r30, 0x53	; 83
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	88 7f       	andi	r24, 0xF8	; 248
     edc:	8c 93       	st	X, r24
	    		TIMER0_TCCR0	|=	TIMER0_PRESCALER_8	;
     ede:	a3 e5       	ldi	r26, 0x53	; 83
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e3 e5       	ldi	r30, 0x53	; 83
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	82 60       	ori	r24, 0x02	; 2
     eea:	8c 93       	st	X, r24
     eec:	26 c0       	rjmp	.+76     	; 0xf3a <TIMER0_VoidInit+0x142>
	    		TIMER0_TCCR0	|=	TIMER0_PRESCALER_Rising	;
	    #endif

	}
/***********************************CTC MODE***********************************************/
	else if (TIMER0_MODE	==	TIMER0_CTCMode)
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	8f 36       	cpi	r24, 0x6F	; 111
     ef2:	19 f5       	brne	.+70     	; 0xf3a <TIMER0_VoidInit+0x142>
	{
		/*SET WGM*/
		Clear_Bit(TIMER0_TCCR0,TCCR0_WGM00);
     ef4:	a3 e5       	ldi	r26, 0x53	; 83
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e3 e5       	ldi	r30, 0x53	; 83
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	8f 7b       	andi	r24, 0xBF	; 191
     f00:	8c 93       	st	X, r24
		Set_Bit(TIMER0_TCCR0,TCCR0_WGM01);
     f02:	a3 e5       	ldi	r26, 0x53	; 83
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e3 e5       	ldi	r30, 0x53	; 83
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	88 60       	ori	r24, 0x08	; 8
     f0e:	8c 93       	st	X, r24

			TIMER0_TCCR0	&=	PRESCALER_MASK	;
			TIMER0_TCCR0	|=	TIMER0_PRESCALER_NoPS	;
		#elif	TIMER0_PRESCALER_MODE	== TIMER0_PRESCALER_8

				TIMER0_TCCR0	&=	PRESCALER_MASK	;
     f10:	a3 e5       	ldi	r26, 0x53	; 83
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e3 e5       	ldi	r30, 0x53	; 83
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	88 7f       	andi	r24, 0xF8	; 248
     f1c:	8c 93       	st	X, r24
				TIMER0_TCCR0	|=	TIMER0_PRESCALER_8	;
     f1e:	a3 e5       	ldi	r26, 0x53	; 83
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e3 e5       	ldi	r30, 0x53	; 83
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	82 60       	ori	r24, 0x02	; 2
     f2a:	8c 93       	st	X, r24

				TIMER0_TCCR0	&=	PRESCALER_MASK	;
				TIMER0_TCCR0	|=	TIMER0_PRESCALER_Rising	;
		#endif
	/*Enable Interrupt*/
	Set_Bit(TIMER0_TIMSK,TIMSK_OCIE0);
     f2c:	a9 e5       	ldi	r26, 0x59	; 89
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e9 e5       	ldi	r30, 0x59	; 89
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	82 60       	ori	r24, 0x02	; 2
     f38:	8c 93       	st	X, r24
	}
}
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <TIMER1_VoidInit>:

void TIMER1_VoidInit(u8 TIMER1_MODE)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	0f 92       	push	r0
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	89 83       	std	Y+1, r24	; 0x01
	if (TIMER1_MODE 	==	TIMER1_NormalMode)
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	91 f5       	brne	.+100    	; 0xfb8 <TIMER1_VoidInit+0x76>
	{
		/*SET WGM*/
		Clear_Bit(TIMER1_TCCR1A,TCCR1A_WGM10);
     f54:	af e4       	ldi	r26, 0x4F	; 79
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ef e4       	ldi	r30, 0x4F	; 79
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8e 7f       	andi	r24, 0xFE	; 254
     f60:	8c 93       	st	X, r24
		Clear_Bit(TIMER1_TCCR1A,TCCR1A_WGM11);
     f62:	af e4       	ldi	r26, 0x4F	; 79
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ef e4       	ldi	r30, 0x4F	; 79
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8d 7f       	andi	r24, 0xFD	; 253
     f6e:	8c 93       	st	X, r24
		Clear_Bit(TIMER1_TCCR1B,TCCR1B_WGM12);
     f70:	ae e4       	ldi	r26, 0x4E	; 78
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ee e4       	ldi	r30, 0x4E	; 78
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	87 7f       	andi	r24, 0xF7	; 247
     f7c:	8c 93       	st	X, r24
		Clear_Bit(TIMER1_TCCR1B,TCCR1B_WGM13);
     f7e:	ae e4       	ldi	r26, 0x4E	; 78
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ee e4       	ldi	r30, 0x4E	; 78
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8f 7e       	andi	r24, 0xEF	; 239
     f8a:	8c 93       	st	X, r24

			TIMER1_TCCR1B	&=	PRESCALER_MASK	;
			TIMER1_TCCR1B	|=	TIMER1_PRESCALER_NoPS	;
	#elif	TIMER1_PRESCALER_MODE	== TIMER1_PRESCALER_8

			TIMER1_TCCR1B	&=	PRESCALER_MASK	;
     f8c:	ae e4       	ldi	r26, 0x4E	; 78
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	ee e4       	ldi	r30, 0x4E	; 78
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	88 7f       	andi	r24, 0xF8	; 248
     f98:	8c 93       	st	X, r24
			TIMER1_TCCR1B	|=	TIMER1_PRESCALER_8	;
     f9a:	ae e4       	ldi	r26, 0x4E	; 78
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	ee e4       	ldi	r30, 0x4E	; 78
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	82 60       	ori	r24, 0x02	; 2
     fa6:	8c 93       	st	X, r24

			TIMER1_TCCR1B	&=	PRESCALER_MASK	;
			TIMER1_TCCR1B	|=	TIMER1_PRESCALER_Rising	;
	#endif
		/*Enable Interrupt*/
		Set_Bit(TIMER1_TIMSK,TIMSK_TOIE1);
     fa8:	a9 e5       	ldi	r26, 0x59	; 89
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e9 e5       	ldi	r30, 0x59	; 89
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	84 60       	ori	r24, 0x04	; 4
     fb4:	8c 93       	st	X, r24
     fb6:	a5 c0       	rjmp	.+330    	; 0x1102 <TIMER1_VoidInit+0x1c0>
	}
	else if (TIMER1_MODE == TIMER1_FastPWMOnICR1Mode)
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	8d 30       	cpi	r24, 0x0D	; 13
     fbc:	c9 f5       	brne	.+114    	; 0x1030 <TIMER1_VoidInit+0xee>
	{
		/*To Use this function PIN OC1A/OC1B MUST be connected as output
		 AND ICR1 Value must be set to a value using function	TIMER1_VoidSetICRValue(u16 Value)	 */

		/*SET WGM*/
		Clear_Bit(TIMER1_TCCR1A,TCCR1A_WGM10);
     fbe:	af e4       	ldi	r26, 0x4F	; 79
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	ef e4       	ldi	r30, 0x4F	; 79
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8e 7f       	andi	r24, 0xFE	; 254
     fca:	8c 93       	st	X, r24
		Set_Bit(TIMER1_TCCR1A,TCCR1A_WGM11);
     fcc:	af e4       	ldi	r26, 0x4F	; 79
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	ef e4       	ldi	r30, 0x4F	; 79
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	82 60       	ori	r24, 0x02	; 2
     fd8:	8c 93       	st	X, r24
		Set_Bit(TIMER1_TCCR1B,TCCR1B_WGM12);
     fda:	ae e4       	ldi	r26, 0x4E	; 78
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	ee e4       	ldi	r30, 0x4E	; 78
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	88 60       	ori	r24, 0x08	; 8
     fe6:	8c 93       	st	X, r24
		Set_Bit(TIMER1_TCCR1B,TCCR1B_WGM13);
     fe8:	ae e4       	ldi	r26, 0x4E	; 78
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ee e4       	ldi	r30, 0x4E	; 78
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	80 61       	ori	r24, 0x10	; 16
     ff4:	8c 93       	st	X, r24
			Clear_Bit(TIMER1_TCCR1A,TCCR1A_COM1B1);
		#elif 	TIMER1_CompareOutputMode == TIMER1_CompareModeFastPWMInvertedChannelB
			Set_Bit(TIMER1_TCCR1A,TCCR1A_COM1B0);
			Set_Bit(TIMER1_TCCR1A,TCCR1A_COM1B1);
		#elif 	TIMER1_CompareOutputMode == TIMER1_CompareModeFastPWMNonInvertedChannelB
			Clear_Bit(TIMER1_TCCR1A,TCCR1A_COM1B0);
     ff6:	af e4       	ldi	r26, 0x4F	; 79
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ef e4       	ldi	r30, 0x4F	; 79
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	8f 7e       	andi	r24, 0xEF	; 239
    1002:	8c 93       	st	X, r24
			Set_Bit(TIMER1_TCCR1A,TCCR1A_COM1B1);
    1004:	af e4       	ldi	r26, 0x4F	; 79
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ef e4       	ldi	r30, 0x4F	; 79
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 62       	ori	r24, 0x20	; 32
    1010:	8c 93       	st	X, r24

			TIMER1_TCCR1B	&=	PRESCALER_MASK	;
			TIMER1_TCCR1B	|=	TIMER1_PRESCALER_NoPS	;
	#elif	TIMER1_PRESCALER_MODE	== TIMER1_PRESCALER_8

			TIMER1_TCCR1B	&=	PRESCALER_MASK	;
    1012:	ae e4       	ldi	r26, 0x4E	; 78
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ee e4       	ldi	r30, 0x4E	; 78
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	88 7f       	andi	r24, 0xF8	; 248
    101e:	8c 93       	st	X, r24
			TIMER1_TCCR1B	|=	TIMER1_PRESCALER_8	;
    1020:	ae e4       	ldi	r26, 0x4E	; 78
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ee e4       	ldi	r30, 0x4E	; 78
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	82 60       	ori	r24, 0x02	; 2
    102c:	8c 93       	st	X, r24
    102e:	69 c0       	rjmp	.+210    	; 0x1102 <TIMER1_VoidInit+0x1c0>

			TIMER1_TCCR1B	&=	PRESCALER_MASK	;
			TIMER1_TCCR1B	|=	TIMER1_PRESCALER_Rising	;
	#endif
	}
	else if (TIMER1_MODE == TIMER1_CTCOnOCR1AMode)
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	85 30       	cpi	r24, 0x05	; 5
    1034:	91 f5       	brne	.+100    	; 0x109a <TIMER1_VoidInit+0x158>
	{
		/*OCR1A Value must be set with function TIMER_VoidSetCompareMatchValue	to generate interrupt
		 * when TCNT1 value = OCR1A Value*/

		/*SET WGM*/
		Clear_Bit(TIMER1_TCCR1A,TCCR1A_WGM10);
    1036:	af e4       	ldi	r26, 0x4F	; 79
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	ef e4       	ldi	r30, 0x4F	; 79
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8e 7f       	andi	r24, 0xFE	; 254
    1042:	8c 93       	st	X, r24
		Clear_Bit(TIMER1_TCCR1A,TCCR1A_WGM11);
    1044:	af e4       	ldi	r26, 0x4F	; 79
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	ef e4       	ldi	r30, 0x4F	; 79
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8d 7f       	andi	r24, 0xFD	; 253
    1050:	8c 93       	st	X, r24
		Set_Bit(TIMER1_TCCR1B,TCCR1B_WGM12);
    1052:	ae e4       	ldi	r26, 0x4E	; 78
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	ee e4       	ldi	r30, 0x4E	; 78
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	88 60       	ori	r24, 0x08	; 8
    105e:	8c 93       	st	X, r24
		Clear_Bit(TIMER1_TCCR1B,TCCR1B_WGM13);
    1060:	ae e4       	ldi	r26, 0x4E	; 78
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	ee e4       	ldi	r30, 0x4E	; 78
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8f 7e       	andi	r24, 0xEF	; 239
    106c:	8c 93       	st	X, r24

					TIMER1_TCCR1B	&=	PRESCALER_MASK	;
					TIMER1_TCCR1B	|=	TIMER1_PRESCALER_NoPS	;
			#elif	TIMER1_PRESCALER_MODE	== TIMER1_PRESCALER_8

					TIMER1_TCCR1B	&=	PRESCALER_MASK	;
    106e:	ae e4       	ldi	r26, 0x4E	; 78
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	ee e4       	ldi	r30, 0x4E	; 78
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	88 7f       	andi	r24, 0xF8	; 248
    107a:	8c 93       	st	X, r24
					TIMER1_TCCR1B	|=	TIMER1_PRESCALER_8	;
    107c:	ae e4       	ldi	r26, 0x4E	; 78
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	ee e4       	ldi	r30, 0x4E	; 78
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	82 60       	ori	r24, 0x02	; 2
    1088:	8c 93       	st	X, r24

					TIMER1_TCCR1B	&=	PRESCALER_MASK	;
					TIMER1_TCCR1B	|=	TIMER1_PRESCALER_Rising	;
			#endif
		/*Enable Interrupt */
			Set_Bit(TIMER1_TIMSK,TIMSK_OCIE1A);
    108a:	a9 e5       	ldi	r26, 0x59	; 89
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e9 e5       	ldi	r30, 0x59	; 89
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	80 61       	ori	r24, 0x10	; 16
    1096:	8c 93       	st	X, r24
    1098:	34 c0       	rjmp	.+104    	; 0x1102 <TIMER1_VoidInit+0x1c0>
	}
	else if (TIMER1_MODE == TIMER1_CTCOnOCR1BMode)
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	8e 30       	cpi	r24, 0x0E	; 14
    109e:	89 f5       	brne	.+98     	; 0x1102 <TIMER1_VoidInit+0x1c0>
		{
		/*OCR1A Value must be set with function TIMER_VoidSetCompareMatchValue	to generate interrupt
		* when TCNT1 value = OCR1A Value*/

			/*SET WGM*/
			Clear_Bit(TIMER1_TCCR1A,TCCR1A_WGM10);
    10a0:	af e4       	ldi	r26, 0x4F	; 79
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	ef e4       	ldi	r30, 0x4F	; 79
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8e 7f       	andi	r24, 0xFE	; 254
    10ac:	8c 93       	st	X, r24
			Clear_Bit(TIMER1_TCCR1A,TCCR1A_WGM11);
    10ae:	af e4       	ldi	r26, 0x4F	; 79
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ef e4       	ldi	r30, 0x4F	; 79
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8d 7f       	andi	r24, 0xFD	; 253
    10ba:	8c 93       	st	X, r24
			Set_Bit(TIMER1_TCCR1B,TCCR1B_WGM12);
    10bc:	ae e4       	ldi	r26, 0x4E	; 78
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	ee e4       	ldi	r30, 0x4E	; 78
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	88 60       	ori	r24, 0x08	; 8
    10c8:	8c 93       	st	X, r24
			Clear_Bit(TIMER1_TCCR1B,TCCR1B_WGM13);
    10ca:	ae e4       	ldi	r26, 0x4E	; 78
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ee e4       	ldi	r30, 0x4E	; 78
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8f 7e       	andi	r24, 0xEF	; 239
    10d6:	8c 93       	st	X, r24

						TIMER1_TCCR1B	&=	PRESCALER_MASK	;
						TIMER1_TCCR1B	|=	TIMER1_PRESCALER_NoPS	;
				#elif	TIMER1_PRESCALER_MODE	== TIMER1_PRESCALER_8

						TIMER1_TCCR1B	&=	PRESCALER_MASK	;
    10d8:	ae e4       	ldi	r26, 0x4E	; 78
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	ee e4       	ldi	r30, 0x4E	; 78
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	88 7f       	andi	r24, 0xF8	; 248
    10e4:	8c 93       	st	X, r24
						TIMER1_TCCR1B	|=	TIMER1_PRESCALER_8	;
    10e6:	ae e4       	ldi	r26, 0x4E	; 78
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	ee e4       	ldi	r30, 0x4E	; 78
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	82 60       	ori	r24, 0x02	; 2
    10f2:	8c 93       	st	X, r24

						TIMER1_TCCR1B	&=	PRESCALER_MASK	;
						TIMER1_TCCR1B	|=	TIMER1_PRESCALER_Rising	;
				#endif
			/*Enable Interrupt */
				Set_Bit(TIMER1_TIMSK,TIMSK_OCIE1B);
    10f4:	a9 e5       	ldi	r26, 0x59	; 89
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e9 e5       	ldi	r30, 0x59	; 89
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	88 60       	ori	r24, 0x08	; 8
    1100:	8c 93       	st	X, r24
		}

}
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <TIMER_SetCallBackFunc>:


void TIMER_SetCallBackFunc	(u8 INT_ID  , void (*Copy_pvFunc)(void)	)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <TIMER_SetCallBackFunc+0x6>
    1110:	0f 92       	push	r0
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	7b 83       	std	Y+3, r23	; 0x03
    111a:	6a 83       	std	Y+2, r22	; 0x02
	if  (	(INT_ID 	== TIMER0_OVFINT)	&&	(Copy_pvFunc	!= 	NULL))
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	88 23       	and	r24, r24
    1120:	59 f4       	brne	.+22     	; 0x1138 <TIMER_SetCallBackFunc+0x2e>
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	9b 81       	ldd	r25, Y+3	; 0x03
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	39 f0       	breq	.+14     	; 0x1138 <TIMER_SetCallBackFunc+0x2e>
	{
		pvCallBackFuncs[TIMER0_OVFINT]	=	Copy_pvFunc;
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	9b 81       	ldd	r25, Y+3	; 0x03
    112e:	90 93 85 01 	sts	0x0185, r25
    1132:	80 93 84 01 	sts	0x0184, r24
    1136:	61 c0       	rjmp	.+194    	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	}
	else if (	(INT_ID 	== TIMER0_COMPINT)	&& (Copy_pvFunc	!= 	NULL))
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	59 f4       	brne	.+22     	; 0x1154 <TIMER_SetCallBackFunc+0x4a>
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	9b 81       	ldd	r25, Y+3	; 0x03
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	39 f0       	breq	.+14     	; 0x1154 <TIMER_SetCallBackFunc+0x4a>
	{
		pvCallBackFuncs[TIMER0_COMPINT]	=	Copy_pvFunc;
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	9b 81       	ldd	r25, Y+3	; 0x03
    114a:	90 93 87 01 	sts	0x0187, r25
    114e:	80 93 86 01 	sts	0x0186, r24
    1152:	53 c0       	rjmp	.+166    	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	}
	else if (	(INT_ID 	== TIMER1_OVFINT)	&& (Copy_pvFunc	!= 	NULL))
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	59 f4       	brne	.+22     	; 0x1170 <TIMER_SetCallBackFunc+0x66>
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	9b 81       	ldd	r25, Y+3	; 0x03
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	39 f0       	breq	.+14     	; 0x1170 <TIMER_SetCallBackFunc+0x66>
	{
		pvCallBackFuncs[TIMER1_OVFINT]	=	Copy_pvFunc;
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	9b 81       	ldd	r25, Y+3	; 0x03
    1166:	90 93 89 01 	sts	0x0189, r25
    116a:	80 93 88 01 	sts	0x0188, r24
    116e:	45 c0       	rjmp	.+138    	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	}
	else if (	(INT_ID 	== TIMER1_COMPBINT)	&& (Copy_pvFunc	!= 	NULL))
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	83 30       	cpi	r24, 0x03	; 3
    1174:	59 f4       	brne	.+22     	; 0x118c <TIMER_SetCallBackFunc+0x82>
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	9b 81       	ldd	r25, Y+3	; 0x03
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	39 f0       	breq	.+14     	; 0x118c <TIMER_SetCallBackFunc+0x82>
	{
		pvCallBackFuncs[TIMER1_COMPBINT]	=	Copy_pvFunc;
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	9b 81       	ldd	r25, Y+3	; 0x03
    1182:	90 93 8b 01 	sts	0x018B, r25
    1186:	80 93 8a 01 	sts	0x018A, r24
    118a:	37 c0       	rjmp	.+110    	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	}
	else if (	(INT_ID 	== TIMER1_COMPAINT)	&& (Copy_pvFunc	!= 	NULL))
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	84 30       	cpi	r24, 0x04	; 4
    1190:	59 f4       	brne	.+22     	; 0x11a8 <TIMER_SetCallBackFunc+0x9e>
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	9b 81       	ldd	r25, Y+3	; 0x03
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	39 f0       	breq	.+14     	; 0x11a8 <TIMER_SetCallBackFunc+0x9e>
	{
		pvCallBackFuncs[TIMER1_COMPAINT]	=	Copy_pvFunc;
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	9b 81       	ldd	r25, Y+3	; 0x03
    119e:	90 93 8d 01 	sts	0x018D, r25
    11a2:	80 93 8c 01 	sts	0x018C, r24
    11a6:	29 c0       	rjmp	.+82     	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	}
	else if (	(INT_ID 	== TIMER1_CAPTINT)	&& (Copy_pvFunc	!= 	NULL))
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	85 30       	cpi	r24, 0x05	; 5
    11ac:	59 f4       	brne	.+22     	; 0x11c4 <TIMER_SetCallBackFunc+0xba>
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	9b 81       	ldd	r25, Y+3	; 0x03
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	39 f0       	breq	.+14     	; 0x11c4 <TIMER_SetCallBackFunc+0xba>
	{
		pvCallBackFuncs[TIMER1_CAPTINT]	=	Copy_pvFunc;
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ba:	90 93 8f 01 	sts	0x018F, r25
    11be:	80 93 8e 01 	sts	0x018E, r24
    11c2:	1b c0       	rjmp	.+54     	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	}
	else if (	(INT_ID 	== TIMER2_OVFINT)	&& (Copy_pvFunc	!= 	NULL))
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	86 30       	cpi	r24, 0x06	; 6
    11c8:	59 f4       	brne	.+22     	; 0x11e0 <TIMER_SetCallBackFunc+0xd6>
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	9b 81       	ldd	r25, Y+3	; 0x03
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <TIMER_SetCallBackFunc+0xd6>
	{
		pvCallBackFuncs[TIMER2_OVFINT]	=	Copy_pvFunc;
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	9b 81       	ldd	r25, Y+3	; 0x03
    11d6:	90 93 91 01 	sts	0x0191, r25
    11da:	80 93 90 01 	sts	0x0190, r24
    11de:	0d c0       	rjmp	.+26     	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	}
	else if (	(INT_ID 	== TIMER2_COMPINT)	&& (Copy_pvFunc	!= 	NULL))
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	87 30       	cpi	r24, 0x07	; 7
    11e4:	51 f4       	brne	.+20     	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	31 f0       	breq	.+12     	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	{
		pvCallBackFuncs[TIMER2_COMPINT]	=	Copy_pvFunc;
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	9b 81       	ldd	r25, Y+3	; 0x03
    11f2:	90 93 93 01 	sts	0x0193, r25
    11f6:	80 93 92 01 	sts	0x0192, r24
	}
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <TIMER_voidSetPreLoadValue>:




void TIMER_voidSetPreLoadValue	(u8 TIMER_ID , u16 Local_Value)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <TIMER_voidSetPreLoadValue+0x6>
    120c:	00 d0       	rcall	.+0      	; 0x120e <TIMER_voidSetPreLoadValue+0x8>
    120e:	0f 92       	push	r0
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	7b 83       	std	Y+3, r23	; 0x03
    1218:	6a 83       	std	Y+2, r22	; 0x02
	switch (TIMER_ID)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3d 83       	std	Y+5, r19	; 0x05
    1222:	2c 83       	std	Y+4, r18	; 0x04
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	91 05       	cpc	r25, r1
    122c:	71 f0       	breq	.+28     	; 0x124a <TIMER_voidSetPreLoadValue+0x44>
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	22 30       	cpi	r18, 0x02	; 2
    1234:	31 05       	cpc	r19, r1
    1236:	81 f0       	breq	.+32     	; 0x1258 <TIMER_voidSetPreLoadValue+0x52>
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	81 f4       	brne	.+32     	; 0x1260 <TIMER_voidSetPreLoadValue+0x5a>
	{
	case TIMER0:	TIMER0_TCNT0	= (u8)Local_Value ;				break;
    1240:	e2 e5       	ldi	r30, 0x52	; 82
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	80 83       	st	Z, r24
    1248:	0b c0       	rjmp	.+22     	; 0x1260 <TIMER_voidSetPreLoadValue+0x5a>
	case TIMER1:	TIMER1_TCNT1	=	  Local_Value ;				break;
    124a:	ec e4       	ldi	r30, 0x4C	; 76
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	9b 81       	ldd	r25, Y+3	; 0x03
    1252:	91 83       	std	Z+1, r25	; 0x01
    1254:	80 83       	st	Z, r24
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <TIMER_voidSetPreLoadValue+0x5a>
	case TIMER2:	TIMER2_TCNT2	= Local_Value ;					break;
    1258:	e4 e4       	ldi	r30, 0x44	; 68
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	80 83       	st	Z, r24

	}
}
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <TIMER_VoidSetCompareMatchValue>:

void TIMER_VoidSetCompareMatchValue	(u8 TIMER_ID , u16 Local_Value)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	00 d0       	rcall	.+0      	; 0x1276 <TIMER_VoidSetCompareMatchValue+0x6>
    1276:	00 d0       	rcall	.+0      	; 0x1278 <TIMER_VoidSetCompareMatchValue+0x8>
    1278:	0f 92       	push	r0
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	7b 83       	std	Y+3, r23	; 0x03
    1282:	6a 83       	std	Y+2, r22	; 0x02
	switch (TIMER_ID)
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	3d 83       	std	Y+5, r19	; 0x05
    128c:	2c 83       	std	Y+4, r18	; 0x04
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	82 30       	cpi	r24, 0x02	; 2
    1294:	91 05       	cpc	r25, r1
    1296:	71 f1       	breq	.+92     	; 0x12f4 <TIMER_VoidSetCompareMatchValue+0x84>
    1298:	2c 81       	ldd	r18, Y+4	; 0x04
    129a:	3d 81       	ldd	r19, Y+5	; 0x05
    129c:	23 30       	cpi	r18, 0x03	; 3
    129e:	31 05       	cpc	r19, r1
    12a0:	2c f4       	brge	.+10     	; 0x12ac <TIMER_VoidSetCompareMatchValue+0x3c>
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	9d 81       	ldd	r25, Y+5	; 0x05
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	61 f0       	breq	.+24     	; 0x12c2 <TIMER_VoidSetCompareMatchValue+0x52>
    12aa:	2e c0       	rjmp	.+92     	; 0x1308 <TIMER_VoidSetCompareMatchValue+0x98>
    12ac:	2c 81       	ldd	r18, Y+4	; 0x04
    12ae:	3d 81       	ldd	r19, Y+5	; 0x05
    12b0:	23 30       	cpi	r18, 0x03	; 3
    12b2:	31 05       	cpc	r19, r1
    12b4:	89 f0       	breq	.+34     	; 0x12d8 <TIMER_VoidSetCompareMatchValue+0x68>
    12b6:	8c 81       	ldd	r24, Y+4	; 0x04
    12b8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ba:	84 30       	cpi	r24, 0x04	; 4
    12bc:	91 05       	cpc	r25, r1
    12be:	99 f0       	breq	.+38     	; 0x12e6 <TIMER_VoidSetCompareMatchValue+0x76>
    12c0:	23 c0       	rjmp	.+70     	; 0x1308 <TIMER_VoidSetCompareMatchValue+0x98>
		{
		case TIMER0:	if (Local_Value<256 ){TIMER0_OCR0	= Local_Value ;}	break;
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	9b 81       	ldd	r25, Y+3	; 0x03
    12c6:	8f 3f       	cpi	r24, 0xFF	; 255
    12c8:	91 05       	cpc	r25, r1
    12ca:	09 f0       	breq	.+2      	; 0x12ce <TIMER_VoidSetCompareMatchValue+0x5e>
    12cc:	e8 f4       	brcc	.+58     	; 0x1308 <TIMER_VoidSetCompareMatchValue+0x98>
    12ce:	ec e5       	ldi	r30, 0x5C	; 92
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	80 83       	st	Z, r24
    12d6:	18 c0       	rjmp	.+48     	; 0x1308 <TIMER_VoidSetCompareMatchValue+0x98>
		case TIMER1A:	TIMER1_OCR1A=	  Local_Value ;							break;
    12d8:	ea e4       	ldi	r30, 0x4A	; 74
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	9b 81       	ldd	r25, Y+3	; 0x03
    12e0:	91 83       	std	Z+1, r25	; 0x01
    12e2:	80 83       	st	Z, r24
    12e4:	11 c0       	rjmp	.+34     	; 0x1308 <TIMER_VoidSetCompareMatchValue+0x98>
		case TIMER1B:	TIMER1_OCR1B=	  Local_Value ;							break;
    12e6:	e8 e4       	ldi	r30, 0x48	; 72
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	9b 81       	ldd	r25, Y+3	; 0x03
    12ee:	91 83       	std	Z+1, r25	; 0x01
    12f0:	80 83       	st	Z, r24
    12f2:	0a c0       	rjmp	.+20     	; 0x1308 <TIMER_VoidSetCompareMatchValue+0x98>
		case TIMER2:	if (Local_Value<256 ){TIMER2_OCR2	= Local_Value ;}	break;
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	9b 81       	ldd	r25, Y+3	; 0x03
    12f8:	8f 3f       	cpi	r24, 0xFF	; 255
    12fa:	91 05       	cpc	r25, r1
    12fc:	09 f0       	breq	.+2      	; 0x1300 <TIMER_VoidSetCompareMatchValue+0x90>
    12fe:	20 f4       	brcc	.+8      	; 0x1308 <TIMER_VoidSetCompareMatchValue+0x98>
    1300:	e3 e4       	ldi	r30, 0x43	; 67
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	80 83       	st	Z, r24

		}
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <TIMER_VoidSetPWMDuty>:
void TIMER_VoidSetPWMDuty	(u8 TIMER_ID , u16 Local_Value)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <TIMER_VoidSetPWMDuty+0x6>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <TIMER_VoidSetPWMDuty+0x8>
    1320:	0f 92       	push	r0
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	7b 83       	std	Y+3, r23	; 0x03
    132a:	6a 83       	std	Y+2, r22	; 0x02
	switch (TIMER_ID)
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	3d 83       	std	Y+5, r19	; 0x05
    1334:	2c 83       	std	Y+4, r18	; 0x04
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	9d 81       	ldd	r25, Y+5	; 0x05
    133a:	82 30       	cpi	r24, 0x02	; 2
    133c:	91 05       	cpc	r25, r1
    133e:	71 f1       	breq	.+92     	; 0x139c <TIMER_VoidSetPWMDuty+0x84>
    1340:	2c 81       	ldd	r18, Y+4	; 0x04
    1342:	3d 81       	ldd	r19, Y+5	; 0x05
    1344:	23 30       	cpi	r18, 0x03	; 3
    1346:	31 05       	cpc	r19, r1
    1348:	2c f4       	brge	.+10     	; 0x1354 <TIMER_VoidSetPWMDuty+0x3c>
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	61 f0       	breq	.+24     	; 0x136a <TIMER_VoidSetPWMDuty+0x52>
    1352:	2e c0       	rjmp	.+92     	; 0x13b0 <TIMER_VoidSetPWMDuty+0x98>
    1354:	2c 81       	ldd	r18, Y+4	; 0x04
    1356:	3d 81       	ldd	r19, Y+5	; 0x05
    1358:	23 30       	cpi	r18, 0x03	; 3
    135a:	31 05       	cpc	r19, r1
    135c:	89 f0       	breq	.+34     	; 0x1380 <TIMER_VoidSetPWMDuty+0x68>
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	84 30       	cpi	r24, 0x04	; 4
    1364:	91 05       	cpc	r25, r1
    1366:	99 f0       	breq	.+38     	; 0x138e <TIMER_VoidSetPWMDuty+0x76>
    1368:	23 c0       	rjmp	.+70     	; 0x13b0 <TIMER_VoidSetPWMDuty+0x98>
			{
			case TIMER0:	if (Local_Value<256 ){TIMER0_OCR0	= 	  (u8)Local_Value ;}	break;
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	9b 81       	ldd	r25, Y+3	; 0x03
    136e:	8f 3f       	cpi	r24, 0xFF	; 255
    1370:	91 05       	cpc	r25, r1
    1372:	09 f0       	breq	.+2      	; 0x1376 <TIMER_VoidSetPWMDuty+0x5e>
    1374:	e8 f4       	brcc	.+58     	; 0x13b0 <TIMER_VoidSetPWMDuty+0x98>
    1376:	ec e5       	ldi	r30, 0x5C	; 92
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	80 83       	st	Z, r24
    137e:	18 c0       	rjmp	.+48     	; 0x13b0 <TIMER_VoidSetPWMDuty+0x98>
			case TIMER1A:	TIMER1_OCR1A=	  Local_Value ;									break;
    1380:	ea e4       	ldi	r30, 0x4A	; 74
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	9b 81       	ldd	r25, Y+3	; 0x03
    1388:	91 83       	std	Z+1, r25	; 0x01
    138a:	80 83       	st	Z, r24
    138c:	11 c0       	rjmp	.+34     	; 0x13b0 <TIMER_VoidSetPWMDuty+0x98>
			case TIMER1B:	TIMER1_OCR1B=	  Local_Value ;									break;
    138e:	e8 e4       	ldi	r30, 0x48	; 72
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	9b 81       	ldd	r25, Y+3	; 0x03
    1396:	91 83       	std	Z+1, r25	; 0x01
    1398:	80 83       	st	Z, r24
    139a:	0a c0       	rjmp	.+20     	; 0x13b0 <TIMER_VoidSetPWMDuty+0x98>
			case TIMER2:	if (Local_Value<256 ){TIMER2_OCR2	= 	  Local_Value ;}		break;
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	9b 81       	ldd	r25, Y+3	; 0x03
    13a0:	8f 3f       	cpi	r24, 0xFF	; 255
    13a2:	91 05       	cpc	r25, r1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <TIMER_VoidSetPWMDuty+0x90>
    13a6:	20 f4       	brcc	.+8      	; 0x13b0 <TIMER_VoidSetPWMDuty+0x98>
    13a8:	e3 e4       	ldi	r30, 0x43	; 67
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	80 83       	st	Z, r24

			}
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <TIMER1_VoidSetICRValue>:
void TIMER1_VoidSetICRValue( u16 Local_u16ICRValue)
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <TIMER1_VoidSetICRValue+0x6>
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	9a 83       	std	Y+2, r25	; 0x02
    13cc:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICR1	=	Local_u16ICRValue	;
    13ce:	e6 e4       	ldi	r30, 0x46	; 70
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	9a 81       	ldd	r25, Y+2	; 0x02
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <ICU_VoidInit>:
void ICU_VoidInit(void)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
	/*Set triggered edge initially to Rising edge*/
	Set_Bit(TIMER1_TCCR1B,TCCR1B_ICES1);
    13ec:	ae e4       	ldi	r26, 0x4E	; 78
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ee e4       	ldi	r30, 0x4E	; 78
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	80 64       	ori	r24, 0x40	; 64
    13f8:	8c 93       	st	X, r24
	/*Enable input capture interrupt*/
	Set_Bit(TIMER1_TIMSK,TIMSK_TICIE1);
    13fa:	a9 e5       	ldi	r26, 0x59	; 89
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e9 e5       	ldi	r30, 0x59	; 89
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 62       	ori	r24, 0x20	; 32
    1406:	8c 93       	st	X, r24
}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <ICU_voidSetInterruptState>:
void ICU_voidSetInterruptState(u8 state)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	0f 92       	push	r0
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	89 83       	std	Y+1, r24	; 0x01
	if(state == Enabled)
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	41 f4       	brne	.+16     	; 0x1430 <ICU_voidSetInterruptState+0x22>
	{
		Set_Bit(TIMER1_TIMSK,TIMSK_TICIE1);
    1420:	a9 e5       	ldi	r26, 0x59	; 89
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e9 e5       	ldi	r30, 0x59	; 89
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 62       	ori	r24, 0x20	; 32
    142c:	8c 93       	st	X, r24
    142e:	0a c0       	rjmp	.+20     	; 0x1444 <ICU_voidSetInterruptState+0x36>
	}
	else if (state == Disabled)
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	82 30       	cpi	r24, 0x02	; 2
    1434:	39 f4       	brne	.+14     	; 0x1444 <ICU_voidSetInterruptState+0x36>
	{
		Clear_Bit(TIMER1_TIMSK,TIMSK_TICIE1);
    1436:	a9 e5       	ldi	r26, 0x59	; 89
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e9 e5       	ldi	r30, 0x59	; 89
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8f 7d       	andi	r24, 0xDF	; 223
    1442:	8c 93       	st	X, r24
	}
}
    1444:	0f 90       	pop	r0
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <ICU_u16ReadInputCapture>:
u16 ICU_u16ReadInputCapture(void)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
	return TIMER1_ICR1;
    1454:	e6 e4       	ldi	r30, 0x46	; 70
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
}
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <ICU_SetEdgeAsTrigger>:
void ICU_SetEdgeAsTrigger(u8 Local_u8Edge)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	0f 92       	push	r0
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	89 83       	std	Y+1, r24	; 0x01
	if (Local_u8Edge == ICU_Rising_Edge	)
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	41 f4       	brne	.+16     	; 0x1484 <ICU_SetEdgeAsTrigger+0x22>
	{
		Set_Bit(TIMER1_TCCR1B,TCCR1B_ICES1);
    1474:	ae e4       	ldi	r26, 0x4E	; 78
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	ee e4       	ldi	r30, 0x4E	; 78
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	80 64       	ori	r24, 0x40	; 64
    1480:	8c 93       	st	X, r24
    1482:	0a c0       	rjmp	.+20     	; 0x1498 <ICU_SetEdgeAsTrigger+0x36>
	}
	else if (Local_u8Edge 	== ICU_Falling_Edge )
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	82 30       	cpi	r24, 0x02	; 2
    1488:	39 f4       	brne	.+14     	; 0x1498 <ICU_SetEdgeAsTrigger+0x36>
	{
		Clear_Bit(TIMER1_TCCR1B,TCCR1B_ICES1);
    148a:	ae e4       	ldi	r26, 0x4E	; 78
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	ee e4       	ldi	r30, 0x4E	; 78
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	8f 7b       	andi	r24, 0xBF	; 191
    1496:	8c 93       	st	X, r24
	}
}
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <__vector_11>:
/******************************ISR Functions*****************************************/
void __vector_11 (void)			__attribute__((signal));
void __vector_11 (void)
 {
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	11 24       	eor	r1, r1
    14aa:	2f 93       	push	r18
    14ac:	3f 93       	push	r19
    14ae:	4f 93       	push	r20
    14b0:	5f 93       	push	r21
    14b2:	6f 93       	push	r22
    14b4:	7f 93       	push	r23
    14b6:	8f 93       	push	r24
    14b8:	9f 93       	push	r25
    14ba:	af 93       	push	r26
    14bc:	bf 93       	push	r27
    14be:	ef 93       	push	r30
    14c0:	ff 93       	push	r31
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62

	 if (	(pvCallBackFuncs[TIMER0_OVFINT]	!= NULL) )
    14ca:	80 91 84 01 	lds	r24, 0x0184
    14ce:	90 91 85 01 	lds	r25, 0x0185
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	29 f0       	breq	.+10     	; 0x14e0 <__vector_11+0x40>
	 {
		 pvCallBackFuncs[TIMER0_OVFINT]();
    14d6:	e0 91 84 01 	lds	r30, 0x0184
    14da:	f0 91 85 01 	lds	r31, 0x0185
    14de:	09 95       	icall
	 }

 }
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	ff 91       	pop	r31
    14e6:	ef 91       	pop	r30
    14e8:	bf 91       	pop	r27
    14ea:	af 91       	pop	r26
    14ec:	9f 91       	pop	r25
    14ee:	8f 91       	pop	r24
    14f0:	7f 91       	pop	r23
    14f2:	6f 91       	pop	r22
    14f4:	5f 91       	pop	r21
    14f6:	4f 91       	pop	r20
    14f8:	3f 91       	pop	r19
    14fa:	2f 91       	pop	r18
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	0f 90       	pop	r0
    1502:	1f 90       	pop	r1
    1504:	18 95       	reti

00001506 <__vector_10>:
void __vector_10 (void)			__attribute__((signal));
void __vector_10 (void)
{
    1506:	1f 92       	push	r1
    1508:	0f 92       	push	r0
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	0f 92       	push	r0
    150e:	11 24       	eor	r1, r1
    1510:	2f 93       	push	r18
    1512:	3f 93       	push	r19
    1514:	4f 93       	push	r20
    1516:	5f 93       	push	r21
    1518:	6f 93       	push	r22
    151a:	7f 93       	push	r23
    151c:	8f 93       	push	r24
    151e:	9f 93       	push	r25
    1520:	af 93       	push	r26
    1522:	bf 93       	push	r27
    1524:	ef 93       	push	r30
    1526:	ff 93       	push	r31
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
	 if (	(pvCallBackFuncs[TIMER0_COMPINT]	!= NULL) )
    1530:	80 91 86 01 	lds	r24, 0x0186
    1534:	90 91 87 01 	lds	r25, 0x0187
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	29 f0       	breq	.+10     	; 0x1546 <__vector_10+0x40>
		 {
		 pvCallBackFuncs[TIMER0_COMPINT]();
    153c:	e0 91 86 01 	lds	r30, 0x0186
    1540:	f0 91 87 01 	lds	r31, 0x0187
    1544:	09 95       	icall
		 }
}
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	ff 91       	pop	r31
    154c:	ef 91       	pop	r30
    154e:	bf 91       	pop	r27
    1550:	af 91       	pop	r26
    1552:	9f 91       	pop	r25
    1554:	8f 91       	pop	r24
    1556:	7f 91       	pop	r23
    1558:	6f 91       	pop	r22
    155a:	5f 91       	pop	r21
    155c:	4f 91       	pop	r20
    155e:	3f 91       	pop	r19
    1560:	2f 91       	pop	r18
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	0f 90       	pop	r0
    1568:	1f 90       	pop	r1
    156a:	18 95       	reti

0000156c <__vector_9>:
void __vector_9 (void)	__attribute__((signal));
void __vector_9 (void)
{
    156c:	1f 92       	push	r1
    156e:	0f 92       	push	r0
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	0f 92       	push	r0
    1574:	11 24       	eor	r1, r1
    1576:	2f 93       	push	r18
    1578:	3f 93       	push	r19
    157a:	4f 93       	push	r20
    157c:	5f 93       	push	r21
    157e:	6f 93       	push	r22
    1580:	7f 93       	push	r23
    1582:	8f 93       	push	r24
    1584:	9f 93       	push	r25
    1586:	af 93       	push	r26
    1588:	bf 93       	push	r27
    158a:	ef 93       	push	r30
    158c:	ff 93       	push	r31
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
	 if (	(pvCallBackFuncs[TIMER1_OVFINT]	!= NULL)  )
    1596:	80 91 88 01 	lds	r24, 0x0188
    159a:	90 91 89 01 	lds	r25, 0x0189
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	29 f0       	breq	.+10     	; 0x15ac <__vector_9+0x40>
		 {
		 pvCallBackFuncs[TIMER1_OVFINT]();
    15a2:	e0 91 88 01 	lds	r30, 0x0188
    15a6:	f0 91 89 01 	lds	r31, 0x0189
    15aa:	09 95       	icall
		 }

}
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	ff 91       	pop	r31
    15b2:	ef 91       	pop	r30
    15b4:	bf 91       	pop	r27
    15b6:	af 91       	pop	r26
    15b8:	9f 91       	pop	r25
    15ba:	8f 91       	pop	r24
    15bc:	7f 91       	pop	r23
    15be:	6f 91       	pop	r22
    15c0:	5f 91       	pop	r21
    15c2:	4f 91       	pop	r20
    15c4:	3f 91       	pop	r19
    15c6:	2f 91       	pop	r18
    15c8:	0f 90       	pop	r0
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	0f 90       	pop	r0
    15ce:	1f 90       	pop	r1
    15d0:	18 95       	reti

000015d2 <__vector_8>:
void __vector_8 (void)	__attribute__((signal));
void __vector_8 (void)
{
    15d2:	1f 92       	push	r1
    15d4:	0f 92       	push	r0
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	0f 92       	push	r0
    15da:	11 24       	eor	r1, r1
    15dc:	2f 93       	push	r18
    15de:	3f 93       	push	r19
    15e0:	4f 93       	push	r20
    15e2:	5f 93       	push	r21
    15e4:	6f 93       	push	r22
    15e6:	7f 93       	push	r23
    15e8:	8f 93       	push	r24
    15ea:	9f 93       	push	r25
    15ec:	af 93       	push	r26
    15ee:	bf 93       	push	r27
    15f0:	ef 93       	push	r30
    15f2:	ff 93       	push	r31
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
	 if (	(pvCallBackFuncs[TIMER1_COMPBINT]	!= NULL)  )
    15fc:	80 91 8a 01 	lds	r24, 0x018A
    1600:	90 91 8b 01 	lds	r25, 0x018B
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	29 f0       	breq	.+10     	; 0x1612 <__vector_8+0x40>
		 {
		 pvCallBackFuncs[TIMER1_COMPBINT]();
    1608:	e0 91 8a 01 	lds	r30, 0x018A
    160c:	f0 91 8b 01 	lds	r31, 0x018B
    1610:	09 95       	icall
		 }

}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	ff 91       	pop	r31
    1618:	ef 91       	pop	r30
    161a:	bf 91       	pop	r27
    161c:	af 91       	pop	r26
    161e:	9f 91       	pop	r25
    1620:	8f 91       	pop	r24
    1622:	7f 91       	pop	r23
    1624:	6f 91       	pop	r22
    1626:	5f 91       	pop	r21
    1628:	4f 91       	pop	r20
    162a:	3f 91       	pop	r19
    162c:	2f 91       	pop	r18
    162e:	0f 90       	pop	r0
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	0f 90       	pop	r0
    1634:	1f 90       	pop	r1
    1636:	18 95       	reti

00001638 <__vector_7>:
void __vector_7 (void)	__attribute__((signal));
void __vector_7 (void)
{
    1638:	1f 92       	push	r1
    163a:	0f 92       	push	r0
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	0f 92       	push	r0
    1640:	11 24       	eor	r1, r1
    1642:	2f 93       	push	r18
    1644:	3f 93       	push	r19
    1646:	4f 93       	push	r20
    1648:	5f 93       	push	r21
    164a:	6f 93       	push	r22
    164c:	7f 93       	push	r23
    164e:	8f 93       	push	r24
    1650:	9f 93       	push	r25
    1652:	af 93       	push	r26
    1654:	bf 93       	push	r27
    1656:	ef 93       	push	r30
    1658:	ff 93       	push	r31
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
	 if (	(pvCallBackFuncs[TIMER1_COMPAINT]	!= NULL)  )
    1662:	80 91 8c 01 	lds	r24, 0x018C
    1666:	90 91 8d 01 	lds	r25, 0x018D
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	29 f0       	breq	.+10     	; 0x1678 <__vector_7+0x40>
		 {
		 pvCallBackFuncs[TIMER1_COMPAINT]();
    166e:	e0 91 8c 01 	lds	r30, 0x018C
    1672:	f0 91 8d 01 	lds	r31, 0x018D
    1676:	09 95       	icall
		 }

}
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	ff 91       	pop	r31
    167e:	ef 91       	pop	r30
    1680:	bf 91       	pop	r27
    1682:	af 91       	pop	r26
    1684:	9f 91       	pop	r25
    1686:	8f 91       	pop	r24
    1688:	7f 91       	pop	r23
    168a:	6f 91       	pop	r22
    168c:	5f 91       	pop	r21
    168e:	4f 91       	pop	r20
    1690:	3f 91       	pop	r19
    1692:	2f 91       	pop	r18
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <__vector_6>:
void __vector_6 (void)	__attribute__((signal));
void __vector_6 (void)
{
    169e:	1f 92       	push	r1
    16a0:	0f 92       	push	r0
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	0f 92       	push	r0
    16a6:	11 24       	eor	r1, r1
    16a8:	2f 93       	push	r18
    16aa:	3f 93       	push	r19
    16ac:	4f 93       	push	r20
    16ae:	5f 93       	push	r21
    16b0:	6f 93       	push	r22
    16b2:	7f 93       	push	r23
    16b4:	8f 93       	push	r24
    16b6:	9f 93       	push	r25
    16b8:	af 93       	push	r26
    16ba:	bf 93       	push	r27
    16bc:	ef 93       	push	r30
    16be:	ff 93       	push	r31
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
	 if (	(pvCallBackFuncs[TIMER1_CAPTINT]	!= NULL)  )
    16c8:	80 91 8e 01 	lds	r24, 0x018E
    16cc:	90 91 8f 01 	lds	r25, 0x018F
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	29 f0       	breq	.+10     	; 0x16de <__vector_6+0x40>
		 {
		 pvCallBackFuncs[TIMER1_CAPTINT]();
    16d4:	e0 91 8e 01 	lds	r30, 0x018E
    16d8:	f0 91 8f 01 	lds	r31, 0x018F
    16dc:	09 95       	icall
		 }

}
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	ff 91       	pop	r31
    16e4:	ef 91       	pop	r30
    16e6:	bf 91       	pop	r27
    16e8:	af 91       	pop	r26
    16ea:	9f 91       	pop	r25
    16ec:	8f 91       	pop	r24
    16ee:	7f 91       	pop	r23
    16f0:	6f 91       	pop	r22
    16f2:	5f 91       	pop	r21
    16f4:	4f 91       	pop	r20
    16f6:	3f 91       	pop	r19
    16f8:	2f 91       	pop	r18
    16fa:	0f 90       	pop	r0
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	0f 90       	pop	r0
    1700:	1f 90       	pop	r1
    1702:	18 95       	reti

00001704 <__vector_5>:
void __vector_5 (void)	__attribute__((signal));
void __vector_5 (void)
{
    1704:	1f 92       	push	r1
    1706:	0f 92       	push	r0
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	0f 92       	push	r0
    170c:	11 24       	eor	r1, r1
    170e:	2f 93       	push	r18
    1710:	3f 93       	push	r19
    1712:	4f 93       	push	r20
    1714:	5f 93       	push	r21
    1716:	6f 93       	push	r22
    1718:	7f 93       	push	r23
    171a:	8f 93       	push	r24
    171c:	9f 93       	push	r25
    171e:	af 93       	push	r26
    1720:	bf 93       	push	r27
    1722:	ef 93       	push	r30
    1724:	ff 93       	push	r31
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
	 if (	(pvCallBackFuncs[TIMER2_OVFINT]	!= NULL)  )
    172e:	80 91 90 01 	lds	r24, 0x0190
    1732:	90 91 91 01 	lds	r25, 0x0191
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	29 f0       	breq	.+10     	; 0x1744 <__vector_5+0x40>
		 {
		 pvCallBackFuncs[TIMER2_OVFINT]();
    173a:	e0 91 90 01 	lds	r30, 0x0190
    173e:	f0 91 91 01 	lds	r31, 0x0191
    1742:	09 95       	icall
		 }

}
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	ff 91       	pop	r31
    174a:	ef 91       	pop	r30
    174c:	bf 91       	pop	r27
    174e:	af 91       	pop	r26
    1750:	9f 91       	pop	r25
    1752:	8f 91       	pop	r24
    1754:	7f 91       	pop	r23
    1756:	6f 91       	pop	r22
    1758:	5f 91       	pop	r21
    175a:	4f 91       	pop	r20
    175c:	3f 91       	pop	r19
    175e:	2f 91       	pop	r18
    1760:	0f 90       	pop	r0
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	0f 90       	pop	r0
    1766:	1f 90       	pop	r1
    1768:	18 95       	reti

0000176a <__vector_4>:
void __vector_4 (void)	__attribute__((signal));
void __vector_4 (void)
{
    176a:	1f 92       	push	r1
    176c:	0f 92       	push	r0
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	0f 92       	push	r0
    1772:	11 24       	eor	r1, r1
    1774:	2f 93       	push	r18
    1776:	3f 93       	push	r19
    1778:	4f 93       	push	r20
    177a:	5f 93       	push	r21
    177c:	6f 93       	push	r22
    177e:	7f 93       	push	r23
    1780:	8f 93       	push	r24
    1782:	9f 93       	push	r25
    1784:	af 93       	push	r26
    1786:	bf 93       	push	r27
    1788:	ef 93       	push	r30
    178a:	ff 93       	push	r31
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
	 if (	(pvCallBackFuncs[TIMER2_COMPINT]	!= NULL)  )
    1794:	80 91 92 01 	lds	r24, 0x0192
    1798:	90 91 93 01 	lds	r25, 0x0193
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	29 f0       	breq	.+10     	; 0x17aa <__vector_4+0x40>
		 {
		 pvCallBackFuncs[TIMER2_COMPINT]();
    17a0:	e0 91 92 01 	lds	r30, 0x0192
    17a4:	f0 91 93 01 	lds	r31, 0x0193
    17a8:	09 95       	icall
		 }

}
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	ff 91       	pop	r31
    17b0:	ef 91       	pop	r30
    17b2:	bf 91       	pop	r27
    17b4:	af 91       	pop	r26
    17b6:	9f 91       	pop	r25
    17b8:	8f 91       	pop	r24
    17ba:	7f 91       	pop	r23
    17bc:	6f 91       	pop	r22
    17be:	5f 91       	pop	r21
    17c0:	4f 91       	pop	r20
    17c2:	3f 91       	pop	r19
    17c4:	2f 91       	pop	r18
    17c6:	0f 90       	pop	r0
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	0f 90       	pop	r0
    17cc:	1f 90       	pop	r1
    17ce:	18 95       	reti

000017d0 <PORT_VoidInit>:
#include "../Header/PORT_Private.h"
#include "../Header/PORT_Register.h"


void PORT_VoidInit()
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    17d8:	ea e3       	ldi	r30, 0x3A	; 58
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
    17de:	e7 e3       	ldi	r30, 0x37	; 55
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
    17e4:	e4 e3       	ldi	r30, 0x34	; 52
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	8f ef       	ldi	r24, 0xFF	; 255
    17ea:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    17ec:	e1 e3       	ldi	r30, 0x31	; 49
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	10 82       	st	Z, r1

	PORTA = PORTA_InitValue ;
    17f2:	eb e3       	ldi	r30, 0x3B	; 59
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	10 82       	st	Z, r1
	PORTB = PORTB_InitValue ;
    17f8:	e8 e3       	ldi	r30, 0x38	; 56
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	10 82       	st	Z, r1
	PORTC = PORTC_InitValue ;
    17fe:	e5 e3       	ldi	r30, 0x35	; 53
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	10 82       	st	Z, r1
	PORTD = PORTD_InitValue ;
    1804:	e2 e3       	ldi	r30, 0x32	; 50
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	10 82       	st	Z, r1
}
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <GIE_VoidEnable>:
#include "../../../Common/Bit_Math.h"
#include "../../../Common/STD_Types.h"
#include "../../../Common/Macros.h"

void GIE_VoidEnable(void)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,SREG_I);
    1818:	af e5       	ldi	r26, 0x5F	; 95
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	ef e5       	ldi	r30, 0x5F	; 95
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	80 68       	ori	r24, 0x80	; 128
    1824:	8c 93       	st	X, r24
}
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <GIE_VoidDisable>:
void GIE_VoidDisable(void)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(SREG,SREG_I);
    1834:	af e5       	ldi	r26, 0x5F	; 95
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	ef e5       	ldi	r30, 0x5F	; 95
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	8f 77       	andi	r24, 0x7F	; 127
    1840:	8c 93       	st	X, r24
}
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <EXTI_voidInt0Init>:
void(*INT0_ADDRESS)(void) = NULL;
void(*INT1_ADDRESS)(void) = NULL;
void(*INT2_ADDRESS)(void) = NULL;

void EXTI_voidInt0Init(void)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
#elif		INT0_SENSE == ON_CHANGE
			Clear_Bit(MCUCR,MCUCR_ISC01);
			Set_Bit(MCUCR,MCUCR_ISC00);

#elif		INT0_SENSE == FALLING_EDGE
			Set_Bit(MCUCR,MCUCR_ISC01);
    1850:	a5 e5       	ldi	r26, 0x55	; 85
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e5 e5       	ldi	r30, 0x55	; 85
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	82 60       	ori	r24, 0x02	; 2
    185c:	8c 93       	st	X, r24
			Clear_Bit(MCUCR,MCUCR_ISC00);
    185e:	a5 e5       	ldi	r26, 0x55	; 85
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e5 e5       	ldi	r30, 0x55	; 85
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	8e 7f       	andi	r24, 0xFE	; 254
    186a:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE configuration option"

#endif

#if			INT0_INIT_STATE == ENABLE
			Set_Bit(GICR,GICR_INT0);
    186c:	ab e5       	ldi	r26, 0x5B	; 91
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	eb e5       	ldi	r30, 0x5B	; 91
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	80 64       	ori	r24, 0x40	; 64
    1878:	8c 93       	st	X, r24
			Clear_Bit(GICR,GICR_INT0);
#else
#error "Wrong INT0_INIT_STATE configuration option"

#endif
}
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
#elif		INT1_SENSE == ON_CHANGE
			Clear_Bit(MCUCR,MCUCR_ISC11);
			Set_Bit(MCUCR,MCUCR_ISC10);

#elif		INT1_SENSE == FALLING_EDGE
			Set_Bit(MCUCR,MCUCR_ISC11);
    1888:	a5 e5       	ldi	r26, 0x55	; 85
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e5 e5       	ldi	r30, 0x55	; 85
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	88 60       	ori	r24, 0x08	; 8
    1894:	8c 93       	st	X, r24
			Clear_Bit(MCUCR,MCUCR_ISC10);
    1896:	a5 e5       	ldi	r26, 0x55	; 85
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e5 e5       	ldi	r30, 0x55	; 85
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	8b 7f       	andi	r24, 0xFB	; 251
    18a2:	8c 93       	st	X, r24
#error "Wrong INT1_SENSE configuration option"

#endif

#if			INT1_INIT_STATE == ENABLE
			Set_Bit(GICR,GICR_INT1);
    18a4:	ab e5       	ldi	r26, 0x5B	; 91
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	eb e5       	ldi	r30, 0x5B	; 91
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	80 68       	ori	r24, 0x80	; 128
    18b0:	8c 93       	st	X, r24
			Clear_Bit(GICR,GICR_INT1);
#else
#error "Wrong INT1_INIT_STATE configuration option"

#endif
}
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	08 95       	ret

000018b8 <EXTI_voidInt2Init>:

void EXTI_voidInt2Init(void)
{
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
	/*set sens control for INT2 */
#if			INT2_SENSE == FALLING_EDGE
			Clear_Bit(MCUCSR,MCUCSR_ISC2);
    18c0:	a4 e5       	ldi	r26, 0x54	; 84
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e4 e5       	ldi	r30, 0x54	; 84
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	8f 7b       	andi	r24, 0xBF	; 191
    18cc:	8c 93       	st	X, r24
#error "Wrong INT2_SENSE configuration option"

#endif

#if			INT2_INIT_STATE == ENABLE
			Set_Bit(GICR,GICR_INT2);
    18ce:	ab e5       	ldi	r26, 0x5B	; 91
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	eb e5       	ldi	r30, 0x5B	; 91
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	80 62       	ori	r24, 0x20	; 32
    18da:	8c 93       	st	X, r24
			Clear_Bit(GICR,GICR_INT2);
#else
#error "Wrong INT1_INIT_STATE configuration option"

#endif
}
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <EXTI_u8Int0SetSenseControl>:
/*Post build Configuration*/

		u8 EXTI_u8Int0SetSenseControl(u8 Copy_u8Sense){
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <EXTI_u8Int0SetSenseControl+0x6>
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <EXTI_u8Int0SetSenseControl+0x8>
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	8a 83       	std	Y+2, r24	; 0x02
			u8 Local_u8ErrorState = OK;
    18f0:	19 82       	std	Y+1, r1	; 0x01

			switch(Copy_u8Sense){
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	3c 83       	std	Y+4, r19	; 0x04
    18fa:	2b 83       	std	Y+3, r18	; 0x03
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	82 30       	cpi	r24, 0x02	; 2
    1902:	91 05       	cpc	r25, r1
    1904:	29 f1       	breq	.+74     	; 0x1950 <EXTI_u8Int0SetSenseControl+0x6e>
    1906:	2b 81       	ldd	r18, Y+3	; 0x03
    1908:	3c 81       	ldd	r19, Y+4	; 0x04
    190a:	23 30       	cpi	r18, 0x03	; 3
    190c:	31 05       	cpc	r19, r1
    190e:	34 f4       	brge	.+12     	; 0x191c <EXTI_u8Int0SetSenseControl+0x3a>
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	61 f0       	breq	.+24     	; 0x1932 <EXTI_u8Int0SetSenseControl+0x50>
    191a:	47 c0       	rjmp	.+142    	; 0x19aa <EXTI_u8Int0SetSenseControl+0xc8>
    191c:	2b 81       	ldd	r18, Y+3	; 0x03
    191e:	3c 81       	ldd	r19, Y+4	; 0x04
    1920:	23 30       	cpi	r18, 0x03	; 3
    1922:	31 05       	cpc	r19, r1
    1924:	21 f1       	breq	.+72     	; 0x196e <EXTI_u8Int0SetSenseControl+0x8c>
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	84 30       	cpi	r24, 0x04	; 4
    192c:	91 05       	cpc	r25, r1
    192e:	71 f1       	breq	.+92     	; 0x198c <EXTI_u8Int0SetSenseControl+0xaa>
    1930:	3c c0       	rjmp	.+120    	; 0x19aa <EXTI_u8Int0SetSenseControl+0xc8>
			case LOW_LEVEL:Clear_Bit(MCUCR,MCUCR_ISC00);Clear_Bit(MCUCR,MCUCR_ISC01);break;
    1932:	a5 e5       	ldi	r26, 0x55	; 85
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e5 e5       	ldi	r30, 0x55	; 85
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	8e 7f       	andi	r24, 0xFE	; 254
    193e:	8c 93       	st	X, r24
    1940:	a5 e5       	ldi	r26, 0x55	; 85
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e5 e5       	ldi	r30, 0x55	; 85
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	8d 7f       	andi	r24, 0xFD	; 253
    194c:	8c 93       	st	X, r24
    194e:	2f c0       	rjmp	.+94     	; 0x19ae <EXTI_u8Int0SetSenseControl+0xcc>
			case ON_CHANGE:Set_Bit(MCUCR,MCUCR_ISC00);Clear_Bit(MCUCR,MCUCR_ISC01);break;
    1950:	a5 e5       	ldi	r26, 0x55	; 85
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e5 e5       	ldi	r30, 0x55	; 85
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	81 60       	ori	r24, 0x01	; 1
    195c:	8c 93       	st	X, r24
    195e:	a5 e5       	ldi	r26, 0x55	; 85
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e5 e5       	ldi	r30, 0x55	; 85
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8d 7f       	andi	r24, 0xFD	; 253
    196a:	8c 93       	st	X, r24
    196c:	20 c0       	rjmp	.+64     	; 0x19ae <EXTI_u8Int0SetSenseControl+0xcc>
			case FALLING_EDGE:Clear_Bit(MCUCR,MCUCR_ISC00);Set_Bit(MCUCR,MCUCR_ISC01);break;
    196e:	a5 e5       	ldi	r26, 0x55	; 85
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e5 e5       	ldi	r30, 0x55	; 85
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8e 7f       	andi	r24, 0xFE	; 254
    197a:	8c 93       	st	X, r24
    197c:	a5 e5       	ldi	r26, 0x55	; 85
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e5 e5       	ldi	r30, 0x55	; 85
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	82 60       	ori	r24, 0x02	; 2
    1988:	8c 93       	st	X, r24
    198a:	11 c0       	rjmp	.+34     	; 0x19ae <EXTI_u8Int0SetSenseControl+0xcc>
			case RISING_EDGE:Set_Bit(MCUCR,MCUCR_ISC00);Set_Bit(MCUCR,MCUCR_ISC01);break;
    198c:	a5 e5       	ldi	r26, 0x55	; 85
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e5 e5       	ldi	r30, 0x55	; 85
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	81 60       	ori	r24, 0x01	; 1
    1998:	8c 93       	st	X, r24
    199a:	a5 e5       	ldi	r26, 0x55	; 85
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e5 e5       	ldi	r30, 0x55	; 85
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	82 60       	ori	r24, 0x02	; 2
    19a6:	8c 93       	st	X, r24
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <EXTI_u8Int0SetSenseControl+0xcc>
			default:Local_u8ErrorState = NOK;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	89 83       	std	Y+1, r24	; 0x01

			}
			return Local_u8ErrorState;
    19ae:	89 81       	ldd	r24, Y+1	; 0x01

		}
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <EXTI_u8Int1SetSenseControl>:

		u8 EXTI_u8Int1SetSenseControl(u8 Copy_u8Sense){
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <EXTI_u8Int1SetSenseControl+0x6>
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <EXTI_u8Int1SetSenseControl+0x8>
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	8a 83       	std	Y+2, r24	; 0x02
			u8 Local_u8ErrorState = OK;
    19cc:	19 82       	std	Y+1, r1	; 0x01
			switch(Copy_u8Sense){
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	3c 83       	std	Y+4, r19	; 0x04
    19d6:	2b 83       	std	Y+3, r18	; 0x03
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	82 30       	cpi	r24, 0x02	; 2
    19de:	91 05       	cpc	r25, r1
    19e0:	29 f1       	breq	.+74     	; 0x1a2c <EXTI_u8Int1SetSenseControl+0x6e>
    19e2:	2b 81       	ldd	r18, Y+3	; 0x03
    19e4:	3c 81       	ldd	r19, Y+4	; 0x04
    19e6:	23 30       	cpi	r18, 0x03	; 3
    19e8:	31 05       	cpc	r19, r1
    19ea:	34 f4       	brge	.+12     	; 0x19f8 <EXTI_u8Int1SetSenseControl+0x3a>
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	91 05       	cpc	r25, r1
    19f4:	61 f0       	breq	.+24     	; 0x1a0e <EXTI_u8Int1SetSenseControl+0x50>
    19f6:	47 c0       	rjmp	.+142    	; 0x1a86 <EXTI_u8Int1SetSenseControl+0xc8>
    19f8:	2b 81       	ldd	r18, Y+3	; 0x03
    19fa:	3c 81       	ldd	r19, Y+4	; 0x04
    19fc:	23 30       	cpi	r18, 0x03	; 3
    19fe:	31 05       	cpc	r19, r1
    1a00:	21 f1       	breq	.+72     	; 0x1a4a <EXTI_u8Int1SetSenseControl+0x8c>
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	84 30       	cpi	r24, 0x04	; 4
    1a08:	91 05       	cpc	r25, r1
    1a0a:	71 f1       	breq	.+92     	; 0x1a68 <EXTI_u8Int1SetSenseControl+0xaa>
    1a0c:	3c c0       	rjmp	.+120    	; 0x1a86 <EXTI_u8Int1SetSenseControl+0xc8>
			case LOW_LEVEL :Clear_Bit(MCUCR,MCUCR_ISC11);Clear_Bit(MCUCR,MCUCR_ISC10);break;
    1a0e:	a5 e5       	ldi	r26, 0x55	; 85
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e5 e5       	ldi	r30, 0x55	; 85
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	87 7f       	andi	r24, 0xF7	; 247
    1a1a:	8c 93       	st	X, r24
    1a1c:	a5 e5       	ldi	r26, 0x55	; 85
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e5 e5       	ldi	r30, 0x55	; 85
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8b 7f       	andi	r24, 0xFB	; 251
    1a28:	8c 93       	st	X, r24
    1a2a:	2f c0       	rjmp	.+94     	; 0x1a8a <EXTI_u8Int1SetSenseControl+0xcc>
			case ON_CHANGE :Clear_Bit(MCUCR,MCUCR_ISC11);Set_Bit(MCUCR,MCUCR_ISC10);break;
    1a2c:	a5 e5       	ldi	r26, 0x55	; 85
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e5 e5       	ldi	r30, 0x55	; 85
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	87 7f       	andi	r24, 0xF7	; 247
    1a38:	8c 93       	st	X, r24
    1a3a:	a5 e5       	ldi	r26, 0x55	; 85
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e5 e5       	ldi	r30, 0x55	; 85
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	84 60       	ori	r24, 0x04	; 4
    1a46:	8c 93       	st	X, r24
    1a48:	20 c0       	rjmp	.+64     	; 0x1a8a <EXTI_u8Int1SetSenseControl+0xcc>
			case FALLING_EDGE :Set_Bit(MCUCR,MCUCR_ISC11);Clear_Bit(MCUCR,MCUCR_ISC10);break;
    1a4a:	a5 e5       	ldi	r26, 0x55	; 85
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e5 e5       	ldi	r30, 0x55	; 85
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	88 60       	ori	r24, 0x08	; 8
    1a56:	8c 93       	st	X, r24
    1a58:	a5 e5       	ldi	r26, 0x55	; 85
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e5 e5       	ldi	r30, 0x55	; 85
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	8b 7f       	andi	r24, 0xFB	; 251
    1a64:	8c 93       	st	X, r24
    1a66:	11 c0       	rjmp	.+34     	; 0x1a8a <EXTI_u8Int1SetSenseControl+0xcc>
			case RISING_EDGE :Set_Bit(MCUCR,MCUCR_ISC11);Set_Bit(MCUCR,MCUCR_ISC10);break;
    1a68:	a5 e5       	ldi	r26, 0x55	; 85
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e5 e5       	ldi	r30, 0x55	; 85
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	88 60       	ori	r24, 0x08	; 8
    1a74:	8c 93       	st	X, r24
    1a76:	a5 e5       	ldi	r26, 0x55	; 85
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e5 e5       	ldi	r30, 0x55	; 85
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	84 60       	ori	r24, 0x04	; 4
    1a82:	8c 93       	st	X, r24
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <EXTI_u8Int1SetSenseControl+0xcc>
			default :Local_u8ErrorState = 1;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	89 83       	std	Y+1, r24	; 0x01


			}

			return Local_u8ErrorState;
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01

		}
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <EXTI_u8Int2SetSenseControl>:
		u8 EXTI_u8Int2SetSenseControl(u8 Copy_u8Sense){
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <EXTI_u8Int2SetSenseControl+0x6>
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <EXTI_u8Int2SetSenseControl+0x8>
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	8a 83       	std	Y+2, r24	; 0x02
			u8 Local_u8ErrorState = OK;
    1aa8:	19 82       	std	Y+1, r1	; 0x01
			switch(Copy_u8Sense){
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	3c 83       	std	Y+4, r19	; 0x04
    1ab2:	2b 83       	std	Y+3, r18	; 0x03
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	83 30       	cpi	r24, 0x03	; 3
    1aba:	91 05       	cpc	r25, r1
    1abc:	31 f0       	breq	.+12     	; 0x1aca <EXTI_u8Int2SetSenseControl+0x30>
    1abe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac2:	24 30       	cpi	r18, 0x04	; 4
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	49 f0       	breq	.+18     	; 0x1ada <EXTI_u8Int2SetSenseControl+0x40>
    1ac8:	10 c0       	rjmp	.+32     	; 0x1aea <EXTI_u8Int2SetSenseControl+0x50>
			case FALLING_EDGE :Clear_Bit(MCUCSR,MCUCSR_ISC2);break;
    1aca:	a4 e5       	ldi	r26, 0x54	; 84
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e4 e5       	ldi	r30, 0x54	; 84
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8f 7b       	andi	r24, 0xBF	; 191
    1ad6:	8c 93       	st	X, r24
    1ad8:	0a c0       	rjmp	.+20     	; 0x1aee <EXTI_u8Int2SetSenseControl+0x54>
			case RISING_EDGE :Set_Bit(MCUCSR,MCUCSR_ISC2);break;
    1ada:	a4 e5       	ldi	r26, 0x54	; 84
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e4 e5       	ldi	r30, 0x54	; 84
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	80 64       	ori	r24, 0x40	; 64
    1ae6:	8c 93       	st	X, r24
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <EXTI_u8Int2SetSenseControl+0x54>
			default :Local_u8ErrorState = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_u8ErrorState;
    1aee:	89 81       	ldd	r24, Y+1	; 0x01

		}
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <EXTI_u8Enable>:
		u8 EXTI_u8Enable(u8 Copy_u8Int){
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <EXTI_u8Enable+0x6>
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	8a 83       	std	Y+2, r24	; 0x02
			u8 Local_u8ErrorState = OK;
    1b0a:	19 82       	std	Y+1, r1	; 0x01
			if(Copy_u8Int == INT0_INIT_STATE){
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	41 f4       	brne	.+16     	; 0x1b22 <EXTI_u8Enable+0x24>
				Set_Bit(GICR,GICR_INT0);
    1b12:	ab e5       	ldi	r26, 0x5B	; 91
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	eb e5       	ldi	r30, 0x5B	; 91
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	80 64       	ori	r24, 0x40	; 64
    1b1e:	8c 93       	st	X, r24
    1b20:	18 c0       	rjmp	.+48     	; 0x1b52 <EXTI_u8Enable+0x54>
			}
			else if(Copy_u8Int == INT0_INIT_STATE){
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	41 f4       	brne	.+16     	; 0x1b38 <EXTI_u8Enable+0x3a>
				Set_Bit(GICR,GICR_INT1);
    1b28:	ab e5       	ldi	r26, 0x5B	; 91
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	eb e5       	ldi	r30, 0x5B	; 91
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	80 68       	ori	r24, 0x80	; 128
    1b34:	8c 93       	st	X, r24
    1b36:	0d c0       	rjmp	.+26     	; 0x1b52 <EXTI_u8Enable+0x54>
			}
			else if(Copy_u8Int == INT2_INIT_STATE){
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	41 f4       	brne	.+16     	; 0x1b4e <EXTI_u8Enable+0x50>
				Set_Bit(GICR,GICR_INT2);
    1b3e:	ab e5       	ldi	r26, 0x5B	; 91
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	eb e5       	ldi	r30, 0x5B	; 91
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	80 62       	ori	r24, 0x20	; 32
    1b4a:	8c 93       	st	X, r24
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <EXTI_u8Enable+0x54>
			}
			else{
				Local_u8ErrorState = NOK;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8ErrorState;
    1b52:	89 81       	ldd	r24, Y+1	; 0x01

		}
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <EXTI_u8Disable>:
		u8 EXTI_u8Disable(u8 Copy_u8Int){
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <EXTI_u8Disable+0x6>
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	8a 83       	std	Y+2, r24	; 0x02

			u8 Local_u8ErrorState = OK;
    1b6a:	19 82       	std	Y+1, r1	; 0x01
			if(Copy_u8Int == INT0_INIT_STATE){
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	41 f4       	brne	.+16     	; 0x1b82 <EXTI_u8Disable+0x24>
				Clear_Bit(GICR,GICR_INT0);
    1b72:	ab e5       	ldi	r26, 0x5B	; 91
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	eb e5       	ldi	r30, 0x5B	; 91
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	8f 7b       	andi	r24, 0xBF	; 191
    1b7e:	8c 93       	st	X, r24
    1b80:	18 c0       	rjmp	.+48     	; 0x1bb2 <EXTI_u8Disable+0x54>
			}
			else if(Copy_u8Int == INT0_INIT_STATE){
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	41 f4       	brne	.+16     	; 0x1b98 <EXTI_u8Disable+0x3a>
				Clear_Bit(GICR,GICR_INT1);
    1b88:	ab e5       	ldi	r26, 0x5B	; 91
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	eb e5       	ldi	r30, 0x5B	; 91
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	8f 77       	andi	r24, 0x7F	; 127
    1b94:	8c 93       	st	X, r24
    1b96:	0d c0       	rjmp	.+26     	; 0x1bb2 <EXTI_u8Disable+0x54>
			}
			else if(Copy_u8Int == INT2_INIT_STATE){
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	41 f4       	brne	.+16     	; 0x1bae <EXTI_u8Disable+0x50>
				Clear_Bit(GICR,GICR_INT2);
    1b9e:	ab e5       	ldi	r26, 0x5B	; 91
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	eb e5       	ldi	r30, 0x5B	; 91
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	8f 7d       	andi	r24, 0xDF	; 223
    1baa:	8c 93       	st	X, r24
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <EXTI_u8Disable+0x54>
			}
			else{
				Local_u8ErrorState = NOK;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8ErrorState;
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01

		}
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <EXTI_u8Int0Callback>:


u8 EXTI_u8Int0Callback(void (*Copy_pvFunc)(void)){
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <EXTI_u8Int0Callback+0x6>
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	9b 83       	std	Y+3, r25	; 0x03
    1bcc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    1bce:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvFunc != NULL){
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	39 f0       	breq	.+14     	; 0x1be6 <EXTI_u8Int0Callback+0x28>

		INT0_ADDRESS = Copy_pvFunc;
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	9b 81       	ldd	r25, Y+3	; 0x03
    1bdc:	90 93 95 01 	sts	0x0195, r25
    1be0:	80 93 94 01 	sts	0x0194, r24
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <EXTI_u8Int0Callback+0x2c>
	}

	else{
		Local_u8ErrorState = NULL_POINTER;
    1be6:	82 e0       	ldi	r24, 0x02	; 2
    1be8:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1bea:	89 81       	ldd	r24, Y+1	; 0x01

}
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <EXTI_u8Int1Callback>:
u8 EXTI_u8Int1Callback(void (*Copy_pvFunc)(void)){
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <EXTI_u8Int1Callback+0x6>
    1bfe:	0f 92       	push	r0
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	9b 83       	std	Y+3, r25	; 0x03
    1c06:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    1c08:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvFunc != NULL){
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	39 f0       	breq	.+14     	; 0x1c20 <EXTI_u8Int1Callback+0x28>

		INT1_ADDRESS = Copy_pvFunc;
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	9b 81       	ldd	r25, Y+3	; 0x03
    1c16:	90 93 97 01 	sts	0x0197, r25
    1c1a:	80 93 96 01 	sts	0x0196, r24
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <EXTI_u8Int1Callback+0x2c>

	}
	else{
		Local_u8ErrorState = NULL_POINTER;
    1c20:	82 e0       	ldi	r24, 0x02	; 2
    1c22:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <EXTI_u8Int2Callback>:
u8 EXTI_u8Int2Callback(void (*Copy_pvFunc)(void)){
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <EXTI_u8Int2Callback+0x6>
    1c38:	0f 92       	push	r0
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	9b 83       	std	Y+3, r25	; 0x03
    1c40:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorState = OK;
    1c42:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvFunc != NULL){
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	9b 81       	ldd	r25, Y+3	; 0x03
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	39 f0       	breq	.+14     	; 0x1c5a <EXTI_u8Int2Callback+0x28>
		INT2_ADDRESS = Copy_pvFunc;
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c50:	90 93 99 01 	sts	0x0199, r25
    1c54:	80 93 98 01 	sts	0x0198, r24
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <EXTI_u8Int2Callback+0x2c>


	}
	else{
		Local_u8ErrorState = NULL_POINTER;
    1c5a:	82 e0       	ldi	r24, 0x02	; 2
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <__vector_1>:

void __vector_1(void)   __attribute__((signal));
void __vector_1(void){
    1c6c:	1f 92       	push	r1
    1c6e:	0f 92       	push	r0
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	0f 92       	push	r0
    1c74:	11 24       	eor	r1, r1
    1c76:	2f 93       	push	r18
    1c78:	3f 93       	push	r19
    1c7a:	4f 93       	push	r20
    1c7c:	5f 93       	push	r21
    1c7e:	6f 93       	push	r22
    1c80:	7f 93       	push	r23
    1c82:	8f 93       	push	r24
    1c84:	9f 93       	push	r25
    1c86:	af 93       	push	r26
    1c88:	bf 93       	push	r27
    1c8a:	ef 93       	push	r30
    1c8c:	ff 93       	push	r31
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62

	INT0_ADDRESS();
    1c96:	e0 91 94 01 	lds	r30, 0x0194
    1c9a:	f0 91 95 01 	lds	r31, 0x0195
    1c9e:	09 95       	icall
	INT1_ADDRESS();
    1ca0:	e0 91 96 01 	lds	r30, 0x0196
    1ca4:	f0 91 97 01 	lds	r31, 0x0197
    1ca8:	09 95       	icall
	INT2_ADDRESS();
    1caa:	e0 91 98 01 	lds	r30, 0x0198
    1cae:	f0 91 99 01 	lds	r31, 0x0199
    1cb2:	09 95       	icall
}
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	ff 91       	pop	r31
    1cba:	ef 91       	pop	r30
    1cbc:	bf 91       	pop	r27
    1cbe:	af 91       	pop	r26
    1cc0:	9f 91       	pop	r25
    1cc2:	8f 91       	pop	r24
    1cc4:	7f 91       	pop	r23
    1cc6:	6f 91       	pop	r22
    1cc8:	5f 91       	pop	r21
    1cca:	4f 91       	pop	r20
    1ccc:	3f 91       	pop	r19
    1cce:	2f 91       	pop	r18
    1cd0:	0f 90       	pop	r0
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	0f 90       	pop	r0
    1cd6:	1f 90       	pop	r1
    1cd8:	18 95       	reti

00001cda <DIO_VoidSetPinNumDir>:
#include "../../../Common/Bit_Math.h"
#include "../../../Common/Macros.h"
#include "../../../Common/STD_Types.h"


void DIO_VoidSetPinNumDir(u8 GroupNum,u8 PinNum ,u8 Dir){
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	27 97       	sbiw	r28, 0x07	; 7
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	6a 83       	std	Y+2, r22	; 0x02
    1cf2:	4b 83       	std	Y+3, r20	; 0x03
	if ( GroupNum <= DIO_GroupD && GroupNum >= DIO_GroupA && PinNum <= DIO_Pin7&& PinNum >= DIO_Pin0 )
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	85 30       	cpi	r24, 0x05	; 5
    1cf8:	08 f0       	brcs	.+2      	; 0x1cfc <DIO_VoidSetPinNumDir+0x22>
    1cfa:	f4 c0       	rjmp	.+488    	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	88 23       	and	r24, r24
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <DIO_VoidSetPinNumDir+0x2a>
    1d02:	f0 c0       	rjmp	.+480    	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	88 30       	cpi	r24, 0x08	; 8
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <DIO_VoidSetPinNumDir+0x32>
    1d0a:	ec c0       	rjmp	.+472    	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
	{
		if(Dir == Output_Pin){
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <DIO_VoidSetPinNumDir+0x3a>
    1d12:	70 c0       	rjmp	.+224    	; 0x1df4 <DIO_VoidSetPinNumDir+0x11a>
			switch (GroupNum){
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	3f 83       	std	Y+7, r19	; 0x07
    1d1c:	2e 83       	std	Y+6, r18	; 0x06
    1d1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d20:	9f 81       	ldd	r25, Y+7	; 0x07
    1d22:	82 30       	cpi	r24, 0x02	; 2
    1d24:	91 05       	cpc	r25, r1
    1d26:	51 f1       	breq	.+84     	; 0x1d7c <DIO_VoidSetPinNumDir+0xa2>
    1d28:	2e 81       	ldd	r18, Y+6	; 0x06
    1d2a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d2c:	23 30       	cpi	r18, 0x03	; 3
    1d2e:	31 05       	cpc	r19, r1
    1d30:	34 f4       	brge	.+12     	; 0x1d3e <DIO_VoidSetPinNumDir+0x64>
    1d32:	8e 81       	ldd	r24, Y+6	; 0x06
    1d34:	9f 81       	ldd	r25, Y+7	; 0x07
    1d36:	81 30       	cpi	r24, 0x01	; 1
    1d38:	91 05       	cpc	r25, r1
    1d3a:	61 f0       	breq	.+24     	; 0x1d54 <DIO_VoidSetPinNumDir+0x7a>
    1d3c:	d3 c0       	rjmp	.+422    	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
    1d3e:	2e 81       	ldd	r18, Y+6	; 0x06
    1d40:	3f 81       	ldd	r19, Y+7	; 0x07
    1d42:	23 30       	cpi	r18, 0x03	; 3
    1d44:	31 05       	cpc	r19, r1
    1d46:	71 f1       	breq	.+92     	; 0x1da4 <DIO_VoidSetPinNumDir+0xca>
    1d48:	8e 81       	ldd	r24, Y+6	; 0x06
    1d4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d4c:	84 30       	cpi	r24, 0x04	; 4
    1d4e:	91 05       	cpc	r25, r1
    1d50:	e9 f1       	breq	.+122    	; 0x1dcc <DIO_VoidSetPinNumDir+0xf2>
    1d52:	c8 c0       	rjmp	.+400    	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupA : Set_Bit(DIO_DDRA,PinNum); break ;
    1d54:	aa e3       	ldi	r26, 0x3A	; 58
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	ea e3       	ldi	r30, 0x3A	; 58
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <DIO_VoidSetPinNumDir+0x98>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <DIO_VoidSetPinNumDir+0x94>
    1d76:	84 2b       	or	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	b4 c0       	rjmp	.+360    	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupB : Set_Bit(DIO_DDRB,PinNum); break ;
    1d7c:	a7 e3       	ldi	r26, 0x37	; 55
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e7 e3       	ldi	r30, 0x37	; 55
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	48 2f       	mov	r20, r24
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	02 2e       	mov	r0, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <DIO_VoidSetPinNumDir+0xc0>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	0a 94       	dec	r0
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <DIO_VoidSetPinNumDir+0xbc>
    1d9e:	84 2b       	or	r24, r20
    1da0:	8c 93       	st	X, r24
    1da2:	a0 c0       	rjmp	.+320    	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupC : Set_Bit(DIO_DDRC,PinNum); break ;
    1da4:	a4 e3       	ldi	r26, 0x34	; 52
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e4 e3       	ldi	r30, 0x34	; 52
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	48 2f       	mov	r20, r24
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 2e       	mov	r0, r18
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <DIO_VoidSetPinNumDir+0xe8>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	0a 94       	dec	r0
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <DIO_VoidSetPinNumDir+0xe4>
    1dc6:	84 2b       	or	r24, r20
    1dc8:	8c 93       	st	X, r24
    1dca:	8c c0       	rjmp	.+280    	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupD : Set_Bit(DIO_DDRD,PinNum); break ;
    1dcc:	a1 e3       	ldi	r26, 0x31	; 49
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e1 e3       	ldi	r30, 0x31	; 49
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	48 2f       	mov	r20, r24
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	02 2e       	mov	r0, r18
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <DIO_VoidSetPinNumDir+0x110>
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	0a 94       	dec	r0
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <DIO_VoidSetPinNumDir+0x10c>
    1dee:	84 2b       	or	r24, r20
    1df0:	8c 93       	st	X, r24
    1df2:	78 c0       	rjmp	.+240    	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
			}
		}
		else if(Dir == Input_Pin){
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	88 23       	and	r24, r24
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <DIO_VoidSetPinNumDir+0x122>
    1dfa:	74 c0       	rjmp	.+232    	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
			switch (GroupNum){
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	3d 83       	std	Y+5, r19	; 0x05
    1e04:	2c 83       	std	Y+4, r18	; 0x04
    1e06:	8c 81       	ldd	r24, Y+4	; 0x04
    1e08:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0a:	82 30       	cpi	r24, 0x02	; 2
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	61 f1       	breq	.+88     	; 0x1e68 <DIO_VoidSetPinNumDir+0x18e>
    1e10:	2c 81       	ldd	r18, Y+4	; 0x04
    1e12:	3d 81       	ldd	r19, Y+5	; 0x05
    1e14:	23 30       	cpi	r18, 0x03	; 3
    1e16:	31 05       	cpc	r19, r1
    1e18:	34 f4       	brge	.+12     	; 0x1e26 <DIO_VoidSetPinNumDir+0x14c>
    1e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	91 05       	cpc	r25, r1
    1e22:	69 f0       	breq	.+26     	; 0x1e3e <DIO_VoidSetPinNumDir+0x164>
    1e24:	5f c0       	rjmp	.+190    	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
    1e26:	2c 81       	ldd	r18, Y+4	; 0x04
    1e28:	3d 81       	ldd	r19, Y+5	; 0x05
    1e2a:	23 30       	cpi	r18, 0x03	; 3
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	89 f1       	breq	.+98     	; 0x1e92 <DIO_VoidSetPinNumDir+0x1b8>
    1e30:	8c 81       	ldd	r24, Y+4	; 0x04
    1e32:	9d 81       	ldd	r25, Y+5	; 0x05
    1e34:	84 30       	cpi	r24, 0x04	; 4
    1e36:	91 05       	cpc	r25, r1
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <DIO_VoidSetPinNumDir+0x162>
    1e3a:	40 c0       	rjmp	.+128    	; 0x1ebc <DIO_VoidSetPinNumDir+0x1e2>
    1e3c:	53 c0       	rjmp	.+166    	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupA : Clear_Bit(DIO_DDRA,PinNum); break ;
    1e3e:	aa e3       	ldi	r26, 0x3A	; 58
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	ea e3       	ldi	r30, 0x3A	; 58
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	48 2f       	mov	r20, r24
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	02 2e       	mov	r0, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <DIO_VoidSetPinNumDir+0x182>
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	0a 94       	dec	r0
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <DIO_VoidSetPinNumDir+0x17e>
    1e60:	80 95       	com	r24
    1e62:	84 23       	and	r24, r20
    1e64:	8c 93       	st	X, r24
    1e66:	3e c0       	rjmp	.+124    	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupB : Clear_Bit(DIO_DDRB,PinNum); break ;
    1e68:	a7 e3       	ldi	r26, 0x37	; 55
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e7 e3       	ldi	r30, 0x37	; 55
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	48 2f       	mov	r20, r24
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	02 2e       	mov	r0, r18
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <DIO_VoidSetPinNumDir+0x1ac>
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	0a 94       	dec	r0
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <DIO_VoidSetPinNumDir+0x1a8>
    1e8a:	80 95       	com	r24
    1e8c:	84 23       	and	r24, r20
    1e8e:	8c 93       	st	X, r24
    1e90:	29 c0       	rjmp	.+82     	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupC : Clear_Bit(DIO_DDRC,PinNum); break ;
    1e92:	a4 e3       	ldi	r26, 0x34	; 52
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e4 e3       	ldi	r30, 0x34	; 52
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	48 2f       	mov	r20, r24
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	02 2e       	mov	r0, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <DIO_VoidSetPinNumDir+0x1d6>
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	0a 94       	dec	r0
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <DIO_VoidSetPinNumDir+0x1d2>
    1eb4:	80 95       	com	r24
    1eb6:	84 23       	and	r24, r20
    1eb8:	8c 93       	st	X, r24
    1eba:	14 c0       	rjmp	.+40     	; 0x1ee4 <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupD : Clear_Bit(DIO_DDRD,PinNum); break ;
    1ebc:	a1 e3       	ldi	r26, 0x31	; 49
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e1 e3       	ldi	r30, 0x31	; 49
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	48 2f       	mov	r20, r24
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 2e       	mov	r0, r18
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <DIO_VoidSetPinNumDir+0x200>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	0a 94       	dec	r0
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <DIO_VoidSetPinNumDir+0x1fc>
    1ede:	80 95       	com	r24
    1ee0:	84 23       	and	r24, r20
    1ee2:	8c 93       	st	X, r24
			}
		}
	}
}
    1ee4:	27 96       	adiw	r28, 0x07	; 7
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <DIO_VoidSetPinNumValue>:
void DIO_VoidSetPinNumValue(u8 GroupNum,u8 PinNum ,u8 value){
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	27 97       	sbiw	r28, 0x07	; 7
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	6a 83       	std	Y+2, r22	; 0x02
    1f0e:	4b 83       	std	Y+3, r20	; 0x03
	if ( GroupNum <= DIO_GroupD && GroupNum >= DIO_GroupA && PinNum <= DIO_Pin7&& PinNum >= DIO_Pin0 ){
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	85 30       	cpi	r24, 0x05	; 5
    1f14:	08 f0       	brcs	.+2      	; 0x1f18 <DIO_VoidSetPinNumValue+0x22>
    1f16:	f3 c0       	rjmp	.+486    	; 0x20fe <DIO_VoidSetPinNumValue+0x208>
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	88 23       	and	r24, r24
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <DIO_VoidSetPinNumValue+0x2a>
    1f1e:	ef c0       	rjmp	.+478    	; 0x20fe <DIO_VoidSetPinNumValue+0x208>
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	88 30       	cpi	r24, 0x08	; 8
    1f24:	08 f0       	brcs	.+2      	; 0x1f28 <DIO_VoidSetPinNumValue+0x32>
    1f26:	eb c0       	rjmp	.+470    	; 0x20fe <DIO_VoidSetPinNumValue+0x208>
		if(value == High_Pin){
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	09 f0       	breq	.+2      	; 0x1f30 <DIO_VoidSetPinNumValue+0x3a>
    1f2e:	6f c0       	rjmp	.+222    	; 0x200e <DIO_VoidSetPinNumValue+0x118>
			switch (GroupNum){
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	3f 83       	std	Y+7, r19	; 0x07
    1f38:	2e 83       	std	Y+6, r18	; 0x06
    1f3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f3e:	82 30       	cpi	r24, 0x02	; 2
    1f40:	91 05       	cpc	r25, r1
    1f42:	51 f1       	breq	.+84     	; 0x1f98 <DIO_VoidSetPinNumValue+0xa2>
    1f44:	2e 81       	ldd	r18, Y+6	; 0x06
    1f46:	3f 81       	ldd	r19, Y+7	; 0x07
    1f48:	23 30       	cpi	r18, 0x03	; 3
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	34 f4       	brge	.+12     	; 0x1f5a <DIO_VoidSetPinNumValue+0x64>
    1f4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f50:	9f 81       	ldd	r25, Y+7	; 0x07
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	91 05       	cpc	r25, r1
    1f56:	61 f0       	breq	.+24     	; 0x1f70 <DIO_VoidSetPinNumValue+0x7a>
    1f58:	5a c0       	rjmp	.+180    	; 0x200e <DIO_VoidSetPinNumValue+0x118>
    1f5a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f5c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f5e:	23 30       	cpi	r18, 0x03	; 3
    1f60:	31 05       	cpc	r19, r1
    1f62:	71 f1       	breq	.+92     	; 0x1fc0 <DIO_VoidSetPinNumValue+0xca>
    1f64:	8e 81       	ldd	r24, Y+6	; 0x06
    1f66:	9f 81       	ldd	r25, Y+7	; 0x07
    1f68:	84 30       	cpi	r24, 0x04	; 4
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	e9 f1       	breq	.+122    	; 0x1fe8 <DIO_VoidSetPinNumValue+0xf2>
    1f6e:	4f c0       	rjmp	.+158    	; 0x200e <DIO_VoidSetPinNumValue+0x118>
			case DIO_GroupA : Set_Bit(DIO_PORTA,PinNum); break ;
    1f70:	ab e3       	ldi	r26, 0x3B	; 59
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	eb e3       	ldi	r30, 0x3B	; 59
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	48 2f       	mov	r20, r24
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	02 2e       	mov	r0, r18
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <DIO_VoidSetPinNumValue+0x98>
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	0a 94       	dec	r0
    1f90:	e2 f7       	brpl	.-8      	; 0x1f8a <DIO_VoidSetPinNumValue+0x94>
    1f92:	84 2b       	or	r24, r20
    1f94:	8c 93       	st	X, r24
    1f96:	3b c0       	rjmp	.+118    	; 0x200e <DIO_VoidSetPinNumValue+0x118>
			case DIO_GroupB : Set_Bit(DIO_PORTB,PinNum); break ;
    1f98:	a8 e3       	ldi	r26, 0x38	; 56
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	e8 e3       	ldi	r30, 0x38	; 56
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	48 2f       	mov	r20, r24
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	02 2e       	mov	r0, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <DIO_VoidSetPinNumValue+0xc0>
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	0a 94       	dec	r0
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <DIO_VoidSetPinNumValue+0xbc>
    1fba:	84 2b       	or	r24, r20
    1fbc:	8c 93       	st	X, r24
    1fbe:	27 c0       	rjmp	.+78     	; 0x200e <DIO_VoidSetPinNumValue+0x118>
			case DIO_GroupC : Set_Bit(DIO_PORTC,PinNum); break ;
    1fc0:	a5 e3       	ldi	r26, 0x35	; 53
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e5 e3       	ldi	r30, 0x35	; 53
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	48 2f       	mov	r20, r24
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	02 2e       	mov	r0, r18
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <DIO_VoidSetPinNumValue+0xe8>
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	0a 94       	dec	r0
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <DIO_VoidSetPinNumValue+0xe4>
    1fe2:	84 2b       	or	r24, r20
    1fe4:	8c 93       	st	X, r24
    1fe6:	13 c0       	rjmp	.+38     	; 0x200e <DIO_VoidSetPinNumValue+0x118>
			case DIO_GroupD : Set_Bit(DIO_PORTD,PinNum); break ;
    1fe8:	a2 e3       	ldi	r26, 0x32	; 50
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e2 e3       	ldi	r30, 0x32	; 50
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	48 2f       	mov	r20, r24
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	02 2e       	mov	r0, r18
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <DIO_VoidSetPinNumValue+0x110>
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	0a 94       	dec	r0
    2008:	e2 f7       	brpl	.-8      	; 0x2002 <DIO_VoidSetPinNumValue+0x10c>
    200a:	84 2b       	or	r24, r20
    200c:	8c 93       	st	X, r24
			}
		}
		if(value == Low_Pin){
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	88 23       	and	r24, r24
    2012:	09 f0       	breq	.+2      	; 0x2016 <DIO_VoidSetPinNumValue+0x120>
    2014:	74 c0       	rjmp	.+232    	; 0x20fe <DIO_VoidSetPinNumValue+0x208>
			switch (GroupNum){
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	3d 83       	std	Y+5, r19	; 0x05
    201e:	2c 83       	std	Y+4, r18	; 0x04
    2020:	8c 81       	ldd	r24, Y+4	; 0x04
    2022:	9d 81       	ldd	r25, Y+5	; 0x05
    2024:	82 30       	cpi	r24, 0x02	; 2
    2026:	91 05       	cpc	r25, r1
    2028:	61 f1       	breq	.+88     	; 0x2082 <DIO_VoidSetPinNumValue+0x18c>
    202a:	2c 81       	ldd	r18, Y+4	; 0x04
    202c:	3d 81       	ldd	r19, Y+5	; 0x05
    202e:	23 30       	cpi	r18, 0x03	; 3
    2030:	31 05       	cpc	r19, r1
    2032:	34 f4       	brge	.+12     	; 0x2040 <DIO_VoidSetPinNumValue+0x14a>
    2034:	8c 81       	ldd	r24, Y+4	; 0x04
    2036:	9d 81       	ldd	r25, Y+5	; 0x05
    2038:	81 30       	cpi	r24, 0x01	; 1
    203a:	91 05       	cpc	r25, r1
    203c:	69 f0       	breq	.+26     	; 0x2058 <DIO_VoidSetPinNumValue+0x162>
    203e:	5f c0       	rjmp	.+190    	; 0x20fe <DIO_VoidSetPinNumValue+0x208>
    2040:	2c 81       	ldd	r18, Y+4	; 0x04
    2042:	3d 81       	ldd	r19, Y+5	; 0x05
    2044:	23 30       	cpi	r18, 0x03	; 3
    2046:	31 05       	cpc	r19, r1
    2048:	89 f1       	breq	.+98     	; 0x20ac <DIO_VoidSetPinNumValue+0x1b6>
    204a:	8c 81       	ldd	r24, Y+4	; 0x04
    204c:	9d 81       	ldd	r25, Y+5	; 0x05
    204e:	84 30       	cpi	r24, 0x04	; 4
    2050:	91 05       	cpc	r25, r1
    2052:	09 f4       	brne	.+2      	; 0x2056 <DIO_VoidSetPinNumValue+0x160>
    2054:	40 c0       	rjmp	.+128    	; 0x20d6 <DIO_VoidSetPinNumValue+0x1e0>
    2056:	53 c0       	rjmp	.+166    	; 0x20fe <DIO_VoidSetPinNumValue+0x208>
			case DIO_GroupA : Clear_Bit(DIO_PORTA,PinNum); break ;
    2058:	ab e3       	ldi	r26, 0x3B	; 59
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	eb e3       	ldi	r30, 0x3B	; 59
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	48 2f       	mov	r20, r24
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	02 2e       	mov	r0, r18
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <DIO_VoidSetPinNumValue+0x180>
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	0a 94       	dec	r0
    2078:	e2 f7       	brpl	.-8      	; 0x2072 <DIO_VoidSetPinNumValue+0x17c>
    207a:	80 95       	com	r24
    207c:	84 23       	and	r24, r20
    207e:	8c 93       	st	X, r24
    2080:	3e c0       	rjmp	.+124    	; 0x20fe <DIO_VoidSetPinNumValue+0x208>
			case DIO_GroupB : Clear_Bit(DIO_PORTB,PinNum); break ;
    2082:	a8 e3       	ldi	r26, 0x38	; 56
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e8 e3       	ldi	r30, 0x38	; 56
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	48 2f       	mov	r20, r24
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	02 2e       	mov	r0, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <DIO_VoidSetPinNumValue+0x1aa>
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	0a 94       	dec	r0
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <DIO_VoidSetPinNumValue+0x1a6>
    20a4:	80 95       	com	r24
    20a6:	84 23       	and	r24, r20
    20a8:	8c 93       	st	X, r24
    20aa:	29 c0       	rjmp	.+82     	; 0x20fe <DIO_VoidSetPinNumValue+0x208>
			case DIO_GroupC : Clear_Bit(DIO_PORTC,PinNum); break ;
    20ac:	a5 e3       	ldi	r26, 0x35	; 53
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e5 e3       	ldi	r30, 0x35	; 53
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	48 2f       	mov	r20, r24
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	02 2e       	mov	r0, r18
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <DIO_VoidSetPinNumValue+0x1d4>
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	0a 94       	dec	r0
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <DIO_VoidSetPinNumValue+0x1d0>
    20ce:	80 95       	com	r24
    20d0:	84 23       	and	r24, r20
    20d2:	8c 93       	st	X, r24
    20d4:	14 c0       	rjmp	.+40     	; 0x20fe <DIO_VoidSetPinNumValue+0x208>
			case DIO_GroupD : Clear_Bit(DIO_PORTD,PinNum); break ;
    20d6:	a2 e3       	ldi	r26, 0x32	; 50
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e2 e3       	ldi	r30, 0x32	; 50
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	48 2f       	mov	r20, r24
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	02 2e       	mov	r0, r18
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <DIO_VoidSetPinNumValue+0x1fe>
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	0a 94       	dec	r0
    20f6:	e2 f7       	brpl	.-8      	; 0x20f0 <DIO_VoidSetPinNumValue+0x1fa>
    20f8:	80 95       	com	r24
    20fa:	84 23       	and	r24, r20
    20fc:	8c 93       	st	X, r24

			}
		}
	}
}
    20fe:	27 96       	adiw	r28, 0x07	; 7
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <DIO_U8GetPinNumValue>:
u8   DIO_U8GetPinNumValue(u8 GroupNum,u8 PinNum ){
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	00 d0       	rcall	.+0      	; 0x2116 <DIO_U8GetPinNumValue+0x6>
    2116:	00 d0       	rcall	.+0      	; 0x2118 <DIO_U8GetPinNumValue+0x8>
    2118:	0f 92       	push	r0
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	6a 83       	std	Y+2, r22	; 0x02
	if ( GroupNum <= DIO_GroupD && GroupNum >= DIO_GroupA && PinNum <= DIO_Pin7 && PinNum >= DIO_Pin0 ){
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	85 30       	cpi	r24, 0x05	; 5
    2126:	08 f0       	brcs	.+2      	; 0x212a <DIO_U8GetPinNumValue+0x1a>
    2128:	74 c0       	rjmp	.+232    	; 0x2212 <DIO_U8GetPinNumValue+0x102>
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	88 23       	and	r24, r24
    212e:	09 f4       	brne	.+2      	; 0x2132 <DIO_U8GetPinNumValue+0x22>
    2130:	70 c0       	rjmp	.+224    	; 0x2212 <DIO_U8GetPinNumValue+0x102>
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	88 30       	cpi	r24, 0x08	; 8
    2136:	08 f0       	brcs	.+2      	; 0x213a <DIO_U8GetPinNumValue+0x2a>
    2138:	6c c0       	rjmp	.+216    	; 0x2212 <DIO_U8GetPinNumValue+0x102>
		switch(GroupNum){
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	3d 83       	std	Y+5, r19	; 0x05
    2142:	2c 83       	std	Y+4, r18	; 0x04
    2144:	4c 81       	ldd	r20, Y+4	; 0x04
    2146:	5d 81       	ldd	r21, Y+5	; 0x05
    2148:	42 30       	cpi	r20, 0x02	; 2
    214a:	51 05       	cpc	r21, r1
    214c:	49 f1       	breq	.+82     	; 0x21a0 <DIO_U8GetPinNumValue+0x90>
    214e:	8c 81       	ldd	r24, Y+4	; 0x04
    2150:	9d 81       	ldd	r25, Y+5	; 0x05
    2152:	83 30       	cpi	r24, 0x03	; 3
    2154:	91 05       	cpc	r25, r1
    2156:	34 f4       	brge	.+12     	; 0x2164 <DIO_U8GetPinNumValue+0x54>
    2158:	2c 81       	ldd	r18, Y+4	; 0x04
    215a:	3d 81       	ldd	r19, Y+5	; 0x05
    215c:	21 30       	cpi	r18, 0x01	; 1
    215e:	31 05       	cpc	r19, r1
    2160:	61 f0       	breq	.+24     	; 0x217a <DIO_U8GetPinNumValue+0x6a>
    2162:	57 c0       	rjmp	.+174    	; 0x2212 <DIO_U8GetPinNumValue+0x102>
    2164:	4c 81       	ldd	r20, Y+4	; 0x04
    2166:	5d 81       	ldd	r21, Y+5	; 0x05
    2168:	43 30       	cpi	r20, 0x03	; 3
    216a:	51 05       	cpc	r21, r1
    216c:	61 f1       	breq	.+88     	; 0x21c6 <DIO_U8GetPinNumValue+0xb6>
    216e:	8c 81       	ldd	r24, Y+4	; 0x04
    2170:	9d 81       	ldd	r25, Y+5	; 0x05
    2172:	84 30       	cpi	r24, 0x04	; 4
    2174:	91 05       	cpc	r25, r1
    2176:	d1 f1       	breq	.+116    	; 0x21ec <DIO_U8GetPinNumValue+0xdc>
    2178:	4c c0       	rjmp	.+152    	; 0x2212 <DIO_U8GetPinNumValue+0x102>
		case DIO_GroupA : return Get_Bit(DIO_PINA,PinNum);
    217a:	e9 e3       	ldi	r30, 0x39	; 57
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	88 2f       	mov	r24, r24
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	a9 01       	movw	r20, r18
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <DIO_U8GetPinNumValue+0x82>
    218e:	55 95       	asr	r21
    2190:	47 95       	ror	r20
    2192:	8a 95       	dec	r24
    2194:	e2 f7       	brpl	.-8      	; 0x218e <DIO_U8GetPinNumValue+0x7e>
    2196:	ca 01       	movw	r24, r20
    2198:	58 2f       	mov	r21, r24
    219a:	51 70       	andi	r21, 0x01	; 1
    219c:	5b 83       	std	Y+3, r21	; 0x03
    219e:	3b c0       	rjmp	.+118    	; 0x2216 <DIO_U8GetPinNumValue+0x106>
		case DIO_GroupB : return Get_Bit(DIO_PINB,PinNum);
    21a0:	e6 e3       	ldi	r30, 0x36	; 54
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	8a 81       	ldd	r24, Y+2	; 0x02
    21ac:	88 2f       	mov	r24, r24
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	a9 01       	movw	r20, r18
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <DIO_U8GetPinNumValue+0xa8>
    21b4:	55 95       	asr	r21
    21b6:	47 95       	ror	r20
    21b8:	8a 95       	dec	r24
    21ba:	e2 f7       	brpl	.-8      	; 0x21b4 <DIO_U8GetPinNumValue+0xa4>
    21bc:	ca 01       	movw	r24, r20
    21be:	58 2f       	mov	r21, r24
    21c0:	51 70       	andi	r21, 0x01	; 1
    21c2:	5b 83       	std	Y+3, r21	; 0x03
    21c4:	28 c0       	rjmp	.+80     	; 0x2216 <DIO_U8GetPinNumValue+0x106>
		case DIO_GroupC : return Get_Bit(DIO_PINC,PinNum);
    21c6:	e3 e3       	ldi	r30, 0x33	; 51
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	88 2f       	mov	r24, r24
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	a9 01       	movw	r20, r18
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <DIO_U8GetPinNumValue+0xce>
    21da:	55 95       	asr	r21
    21dc:	47 95       	ror	r20
    21de:	8a 95       	dec	r24
    21e0:	e2 f7       	brpl	.-8      	; 0x21da <DIO_U8GetPinNumValue+0xca>
    21e2:	ca 01       	movw	r24, r20
    21e4:	58 2f       	mov	r21, r24
    21e6:	51 70       	andi	r21, 0x01	; 1
    21e8:	5b 83       	std	Y+3, r21	; 0x03
    21ea:	15 c0       	rjmp	.+42     	; 0x2216 <DIO_U8GetPinNumValue+0x106>
		case DIO_GroupD : return Get_Bit(DIO_PIND,PinNum);
    21ec:	e0 e3       	ldi	r30, 0x30	; 48
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	a9 01       	movw	r20, r18
    21fe:	02 c0       	rjmp	.+4      	; 0x2204 <DIO_U8GetPinNumValue+0xf4>
    2200:	55 95       	asr	r21
    2202:	47 95       	ror	r20
    2204:	8a 95       	dec	r24
    2206:	e2 f7       	brpl	.-8      	; 0x2200 <DIO_U8GetPinNumValue+0xf0>
    2208:	ca 01       	movw	r24, r20
    220a:	58 2f       	mov	r21, r24
    220c:	51 70       	andi	r21, 0x01	; 1
    220e:	5b 83       	std	Y+3, r21	; 0x03
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <DIO_U8GetPinNumValue+0x106>

		}
	}
	return -1 ;
    2212:	8f ef       	ldi	r24, 0xFF	; 255
    2214:	8b 83       	std	Y+3, r24	; 0x03
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <DIO_VoidSetPortDir>:

void DIO_VoidSetPortDir(u8 GroupNum,u8 Dir){
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	00 d0       	rcall	.+0      	; 0x222e <DIO_VoidSetPortDir+0x6>
    222e:	00 d0       	rcall	.+0      	; 0x2230 <DIO_VoidSetPortDir+0x8>
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	6a 83       	std	Y+2, r22	; 0x02
	if (GroupNum <= DIO_GroupD && GroupNum >= DIO_GroupA ){
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	85 30       	cpi	r24, 0x05	; 5
    223c:	b0 f5       	brcc	.+108    	; 0x22aa <DIO_VoidSetPortDir+0x82>
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	88 23       	and	r24, r24
    2242:	99 f1       	breq	.+102    	; 0x22aa <DIO_VoidSetPortDir+0x82>
		switch (GroupNum){
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	3c 83       	std	Y+4, r19	; 0x04
    224c:	2b 83       	std	Y+3, r18	; 0x03
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	82 30       	cpi	r24, 0x02	; 2
    2254:	91 05       	cpc	r25, r1
    2256:	d9 f0       	breq	.+54     	; 0x228e <DIO_VoidSetPortDir+0x66>
    2258:	2b 81       	ldd	r18, Y+3	; 0x03
    225a:	3c 81       	ldd	r19, Y+4	; 0x04
    225c:	23 30       	cpi	r18, 0x03	; 3
    225e:	31 05       	cpc	r19, r1
    2260:	34 f4       	brge	.+12     	; 0x226e <DIO_VoidSetPortDir+0x46>
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	81 30       	cpi	r24, 0x01	; 1
    2268:	91 05       	cpc	r25, r1
    226a:	61 f0       	breq	.+24     	; 0x2284 <DIO_VoidSetPortDir+0x5c>
    226c:	1e c0       	rjmp	.+60     	; 0x22aa <DIO_VoidSetPortDir+0x82>
    226e:	2b 81       	ldd	r18, Y+3	; 0x03
    2270:	3c 81       	ldd	r19, Y+4	; 0x04
    2272:	23 30       	cpi	r18, 0x03	; 3
    2274:	31 05       	cpc	r19, r1
    2276:	81 f0       	breq	.+32     	; 0x2298 <DIO_VoidSetPortDir+0x70>
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	84 30       	cpi	r24, 0x04	; 4
    227e:	91 05       	cpc	r25, r1
    2280:	81 f0       	breq	.+32     	; 0x22a2 <DIO_VoidSetPortDir+0x7a>
    2282:	13 c0       	rjmp	.+38     	; 0x22aa <DIO_VoidSetPortDir+0x82>
		case DIO_GroupA : DIO_DDRA = Dir ; break ;
    2284:	ea e3       	ldi	r30, 0x3A	; 58
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	80 83       	st	Z, r24
    228c:	0e c0       	rjmp	.+28     	; 0x22aa <DIO_VoidSetPortDir+0x82>
		case DIO_GroupB : DIO_DDRB = Dir ; break ;
    228e:	e7 e3       	ldi	r30, 0x37	; 55
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	80 83       	st	Z, r24
    2296:	09 c0       	rjmp	.+18     	; 0x22aa <DIO_VoidSetPortDir+0x82>
		case DIO_GroupC : DIO_DDRC = Dir ; break ;
    2298:	e4 e3       	ldi	r30, 0x34	; 52
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	80 83       	st	Z, r24
    22a0:	04 c0       	rjmp	.+8      	; 0x22aa <DIO_VoidSetPortDir+0x82>
		case DIO_GroupD : DIO_DDRD = Dir ; break ;
    22a2:	e1 e3       	ldi	r30, 0x31	; 49
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	80 83       	st	Z, r24
		}
	}
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 GroupNum,u8 value){
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	00 d0       	rcall	.+0      	; 0x22be <DIO_VoidSetPortValue+0x6>
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <DIO_VoidSetPortValue+0x8>
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	6a 83       	std	Y+2, r22	; 0x02
	if (GroupNum <= DIO_GroupD && GroupNum >= DIO_GroupA ){
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	85 30       	cpi	r24, 0x05	; 5
    22cc:	b0 f5       	brcc	.+108    	; 0x233a <DIO_VoidSetPortValue+0x82>
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	88 23       	and	r24, r24
    22d2:	99 f1       	breq	.+102    	; 0x233a <DIO_VoidSetPortValue+0x82>
		switch (GroupNum){
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	3c 83       	std	Y+4, r19	; 0x04
    22dc:	2b 83       	std	Y+3, r18	; 0x03
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	9c 81       	ldd	r25, Y+4	; 0x04
    22e2:	82 30       	cpi	r24, 0x02	; 2
    22e4:	91 05       	cpc	r25, r1
    22e6:	d9 f0       	breq	.+54     	; 0x231e <DIO_VoidSetPortValue+0x66>
    22e8:	2b 81       	ldd	r18, Y+3	; 0x03
    22ea:	3c 81       	ldd	r19, Y+4	; 0x04
    22ec:	23 30       	cpi	r18, 0x03	; 3
    22ee:	31 05       	cpc	r19, r1
    22f0:	34 f4       	brge	.+12     	; 0x22fe <DIO_VoidSetPortValue+0x46>
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	81 30       	cpi	r24, 0x01	; 1
    22f8:	91 05       	cpc	r25, r1
    22fa:	61 f0       	breq	.+24     	; 0x2314 <DIO_VoidSetPortValue+0x5c>
    22fc:	1e c0       	rjmp	.+60     	; 0x233a <DIO_VoidSetPortValue+0x82>
    22fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2300:	3c 81       	ldd	r19, Y+4	; 0x04
    2302:	23 30       	cpi	r18, 0x03	; 3
    2304:	31 05       	cpc	r19, r1
    2306:	81 f0       	breq	.+32     	; 0x2328 <DIO_VoidSetPortValue+0x70>
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	84 30       	cpi	r24, 0x04	; 4
    230e:	91 05       	cpc	r25, r1
    2310:	81 f0       	breq	.+32     	; 0x2332 <DIO_VoidSetPortValue+0x7a>
    2312:	13 c0       	rjmp	.+38     	; 0x233a <DIO_VoidSetPortValue+0x82>
		case DIO_GroupA : DIO_PORTA = value ; break ;
    2314:	eb e3       	ldi	r30, 0x3B	; 59
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	80 83       	st	Z, r24
    231c:	0e c0       	rjmp	.+28     	; 0x233a <DIO_VoidSetPortValue+0x82>
		case DIO_GroupB : DIO_PORTB = value ; break ;
    231e:	e8 e3       	ldi	r30, 0x38	; 56
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	80 83       	st	Z, r24
    2326:	09 c0       	rjmp	.+18     	; 0x233a <DIO_VoidSetPortValue+0x82>
		case DIO_GroupC : DIO_PORTC = value ; break ;
    2328:	e5 e3       	ldi	r30, 0x35	; 53
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	80 83       	st	Z, r24
    2330:	04 c0       	rjmp	.+8      	; 0x233a <DIO_VoidSetPortValue+0x82>
		case DIO_GroupD : DIO_PORTD = value ; break ;
    2332:	e2 e3       	ldi	r30, 0x32	; 50
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	80 83       	st	Z, r24
		}
	}
}
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <DIO_U8GetPortValue>:
u8   DIO_U8GetPortValue(u8 GroupNum){
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	00 d0       	rcall	.+0      	; 0x234e <DIO_U8GetPortValue+0x6>
    234e:	00 d0       	rcall	.+0      	; 0x2350 <DIO_U8GetPortValue+0x8>
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	89 83       	std	Y+1, r24	; 0x01
	if (GroupNum <= DIO_GroupD && GroupNum >= DIO_GroupA ){
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	85 30       	cpi	r24, 0x05	; 5
    235a:	b8 f5       	brcc	.+110    	; 0x23ca <DIO_U8GetPortValue+0x82>
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	88 23       	and	r24, r24
    2360:	a1 f1       	breq	.+104    	; 0x23ca <DIO_U8GetPortValue+0x82>
		switch (GroupNum){
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	3c 83       	std	Y+4, r19	; 0x04
    236a:	2b 83       	std	Y+3, r18	; 0x03
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	9c 81       	ldd	r25, Y+4	; 0x04
    2370:	82 30       	cpi	r24, 0x02	; 2
    2372:	91 05       	cpc	r25, r1
    2374:	d9 f0       	breq	.+54     	; 0x23ac <DIO_U8GetPortValue+0x64>
    2376:	2b 81       	ldd	r18, Y+3	; 0x03
    2378:	3c 81       	ldd	r19, Y+4	; 0x04
    237a:	23 30       	cpi	r18, 0x03	; 3
    237c:	31 05       	cpc	r19, r1
    237e:	34 f4       	brge	.+12     	; 0x238c <DIO_U8GetPortValue+0x44>
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	91 05       	cpc	r25, r1
    2388:	61 f0       	breq	.+24     	; 0x23a2 <DIO_U8GetPortValue+0x5a>
    238a:	1f c0       	rjmp	.+62     	; 0x23ca <DIO_U8GetPortValue+0x82>
    238c:	2b 81       	ldd	r18, Y+3	; 0x03
    238e:	3c 81       	ldd	r19, Y+4	; 0x04
    2390:	23 30       	cpi	r18, 0x03	; 3
    2392:	31 05       	cpc	r19, r1
    2394:	81 f0       	breq	.+32     	; 0x23b6 <DIO_U8GetPortValue+0x6e>
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	84 30       	cpi	r24, 0x04	; 4
    239c:	91 05       	cpc	r25, r1
    239e:	81 f0       	breq	.+32     	; 0x23c0 <DIO_U8GetPortValue+0x78>
    23a0:	14 c0       	rjmp	.+40     	; 0x23ca <DIO_U8GetPortValue+0x82>
		case DIO_GroupA : return DIO_PINA ;
    23a2:	e9 e3       	ldi	r30, 0x39	; 57
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	90 81       	ld	r25, Z
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	11 c0       	rjmp	.+34     	; 0x23ce <DIO_U8GetPortValue+0x86>
		case DIO_GroupB : return DIO_PINB ;
    23ac:	e6 e3       	ldi	r30, 0x36	; 54
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	20 81       	ld	r18, Z
    23b2:	2a 83       	std	Y+2, r18	; 0x02
    23b4:	0c c0       	rjmp	.+24     	; 0x23ce <DIO_U8GetPortValue+0x86>
		case DIO_GroupC : return DIO_PINC ;
    23b6:	e3 e3       	ldi	r30, 0x33	; 51
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	30 81       	ld	r19, Z
    23bc:	3a 83       	std	Y+2, r19	; 0x02
    23be:	07 c0       	rjmp	.+14     	; 0x23ce <DIO_U8GetPortValue+0x86>
		case DIO_GroupD : return DIO_PIND ;
    23c0:	e0 e3       	ldi	r30, 0x30	; 48
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	8a 83       	std	Y+2, r24	; 0x02
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <DIO_U8GetPortValue+0x86>
		}
	}
	return -1 ;
    23ca:	9f ef       	ldi	r25, 0xFF	; 255
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
}
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <ADC_VoidInit>:
#include "../../../Common/STD_Types.h"
#include "../Header/ADC_Interface.h"
#include "../Header/ADC_Register.h"

void ADC_VoidInit(void)
{
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
	//AVCC as reference voltage
	Set_Bit(ADMUX,ADMUX_REFS0);
    23e6:	a7 e2       	ldi	r26, 0x27	; 39
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e7 e2       	ldi	r30, 0x27	; 39
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	80 64       	ori	r24, 0x40	; 64
    23f2:	8c 93       	st	X, r24
	Clear_Bit(ADMUX,ADMUX_REFS1);
    23f4:	a7 e2       	ldi	r26, 0x27	; 39
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e7 e2       	ldi	r30, 0x27	; 39
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	8f 77       	andi	r24, 0x7F	; 127
    2400:	8c 93       	st	X, r24

	//Activate Left adjust result
	Set_Bit(ADMUX,ADMUX_ADLAR);
    2402:	a7 e2       	ldi	r26, 0x27	; 39
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e7 e2       	ldi	r30, 0x27	; 39
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	80 62       	ori	r24, 0x20	; 32
    240e:	8c 93       	st	X, r24

	//ADC Prescaler Selections
	ADCSRA &= ADC_PRESC_MASK ;
    2410:	a6 e2       	ldi	r26, 0x26	; 38
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e6 e2       	ldi	r30, 0x26	; 38
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	88 7f       	andi	r24, 0xF8	; 248
    241c:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESC      ;
    241e:	a6 e2       	ldi	r26, 0x26	; 38
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e6 e2       	ldi	r30, 0x26	; 38
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	87 60       	ori	r24, 0x07	; 7
    242a:	8c 93       	st	X, r24

	//Enable peripheral
	Set_Bit(ADCSRA,ADCSRA_ADEN);
    242c:	a6 e2       	ldi	r26, 0x26	; 38
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e6 e2       	ldi	r30, 0x26	; 38
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	80 68       	ori	r24, 0x80	; 128
    2438:	8c 93       	st	X, r24
}
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <ADC_U8GetChannelReading>:

u8 ADC_U8GetChannelReading(u8 ADC_Channel)
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	0f 92       	push	r0
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	89 83       	std	Y+1, r24	; 0x01
	//Clear the MUX bits in ADMUX register
	ADMUX &= 0b11100000  ;
    244c:	a7 e2       	ldi	r26, 0x27	; 39
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	e7 e2       	ldi	r30, 0x27	; 39
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	80 7e       	andi	r24, 0xE0	; 224
    2458:	8c 93       	st	X, r24
	//Set the required Channel into the MUX bits
	ADMUX |= ADC_Channel ;
    245a:	a7 e2       	ldi	r26, 0x27	; 39
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e7 e2       	ldi	r30, 0x27	; 39
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	90 81       	ld	r25, Z
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	89 2b       	or	r24, r25
    2468:	8c 93       	st	X, r24

	//Start conversion
	Set_Bit(ADCSRA,ADCSRA_ADSC);
    246a:	a6 e2       	ldi	r26, 0x26	; 38
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e6 e2       	ldi	r30, 0x26	; 38
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	80 64       	ori	r24, 0x40	; 64
    2476:	8c 93       	st	X, r24

	//Polling (busy waiting) until the conversion complete flage is set
	while((Get_Bit(ADCSRA,ADCSRA_ADIF))==0);
    2478:	e6 e2       	ldi	r30, 0x26	; 38
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	82 95       	swap	r24
    2480:	8f 70       	andi	r24, 0x0F	; 15
    2482:	88 2f       	mov	r24, r24
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	81 70       	andi	r24, 0x01	; 1
    2488:	90 70       	andi	r25, 0x00	; 0
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	a9 f3       	breq	.-22     	; 0x2478 <ADC_U8GetChannelReading+0x38>
	//clear the conversion complete flag
	Set_Bit(ADCSRA,ADCSRA_ADIF);
    248e:	a6 e2       	ldi	r26, 0x26	; 38
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e6 e2       	ldi	r30, 0x26	; 38
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	80 61       	ori	r24, 0x10	; 16
    249a:	8c 93       	st	X, r24

	//Return the reading
	return ADCH;
    249c:	e5 e2       	ldi	r30, 0x25	; 37
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
}
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <LM35_U8GetChannelReading>:
u8 LM35_U8GetChannelReading(u8 LM35_Channel)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <LM35_U8GetChannelReading+0x6>
    24b0:	0f 92       	push	r0
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	8b 83       	std	Y+3, r24	; 0x03
	//Clear the MUX bits in ADMUX register
	ADMUX &= 0b11100000  ;
    24b8:	a7 e2       	ldi	r26, 0x27	; 39
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e7 e2       	ldi	r30, 0x27	; 39
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	80 7e       	andi	r24, 0xE0	; 224
    24c4:	8c 93       	st	X, r24
	//Set the required Channel into the MUX bits
	ADMUX |= LM35_Channel ;
    24c6:	a7 e2       	ldi	r26, 0x27	; 39
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e7 e2       	ldi	r30, 0x27	; 39
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	90 81       	ld	r25, Z
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	89 2b       	or	r24, r25
    24d4:	8c 93       	st	X, r24

	//Start conversion
	Set_Bit(ADCSRA,ADCSRA_ADSC);
    24d6:	a6 e2       	ldi	r26, 0x26	; 38
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e6 e2       	ldi	r30, 0x26	; 38
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	80 64       	ori	r24, 0x40	; 64
    24e2:	8c 93       	st	X, r24
	//Polling (busy waiting) until the conversion complete flage is set
	while((Get_Bit(ADCSRA,ADCSRA_ADIF))==0);
    24e4:	e6 e2       	ldi	r30, 0x26	; 38
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 81       	ld	r24, Z
    24ea:	82 95       	swap	r24
    24ec:	8f 70       	andi	r24, 0x0F	; 15
    24ee:	88 2f       	mov	r24, r24
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	81 70       	andi	r24, 0x01	; 1
    24f4:	90 70       	andi	r25, 0x00	; 0
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	a9 f3       	breq	.-22     	; 0x24e4 <LM35_U8GetChannelReading+0x3a>
	//clear the conversion complete flag
	Set_Bit(ADCSRA,ADCSRA_ADIF);
    24fa:	a6 e2       	ldi	r26, 0x26	; 38
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e6 e2       	ldi	r30, 0x26	; 38
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	80 61       	ori	r24, 0x10	; 16
    2506:	8c 93       	st	X, r24

	//Transformation digital to degree
   u16 TEMP_Degree = (u32)((u32)ADCH*500UL)/256UL;
    2508:	e5 e2       	ldi	r30, 0x25	; 37
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	88 2f       	mov	r24, r24
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a0 e0       	ldi	r26, 0x00	; 0
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	24 ef       	ldi	r18, 0xF4	; 244
    2518:	31 e0       	ldi	r19, 0x01	; 1
    251a:	40 e0       	ldi	r20, 0x00	; 0
    251c:	50 e0       	ldi	r21, 0x00	; 0
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__mulsi3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	89 2f       	mov	r24, r25
    252c:	9a 2f       	mov	r25, r26
    252e:	ab 2f       	mov	r26, r27
    2530:	bb 27       	eor	r27, r27
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	89 83       	std	Y+1, r24	; 0x01

   return TEMP_Degree ;
    2536:	89 81       	ldd	r24, Y+1	; 0x01
}
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <Servo_VoidInitD4>:
#include "../../../MCAL/TIMER/Header/Timer_Interface.h"
#include "../HEADER/SERVO_Interface.h"


void Servo_VoidInitD4(void)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
	/*Notes To use this function :
	 * 1- Timer1 Compare output mode must be set in non inverted pwm channel A or B According to Servo pin
	 * 2- Timer1 Prescaler Must be Divided by 8
	 **********************************************/
	DIO_VoidSetPinNumDir(Servo_Port,Servo_PinD4,Output_Pin);
    254c:	84 e0       	ldi	r24, 0x04	; 4
    254e:	64 e0       	ldi	r22, 0x04	; 4
    2550:	41 e0       	ldi	r20, 0x01	; 1
    2552:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <DIO_VoidSetPinNumDir>
	TIMER1_VoidInit(TIMER1_FastPWMOnICR1Mode);
    2556:	8d e0       	ldi	r24, 0x0D	; 13
    2558:	0e 94 a1 07 	call	0xf42	; 0xf42 <TIMER1_VoidInit>
	TIMER1_VoidSetICRValue(Servo_PeriodTime);
    255c:	80 e2       	ldi	r24, 0x20	; 32
    255e:	9e e4       	ldi	r25, 0x4E	; 78
    2560:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <TIMER1_VoidSetICRValue>

}
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <Servo_VoidRotateAngleD4>:

void Servo_VoidRotateAngleD4(u8 Local_u8Angle)
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	00 d0       	rcall	.+0      	; 0x2570 <Servo_VoidRotateAngleD4+0x6>
    2570:	0f 92       	push	r0
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16OCRValue=0;
    2578:	1a 82       	std	Y+2, r1	; 0x02
    257a:	19 82       	std	Y+1, r1	; 0x01
	Local_u16OCRValue	=	((5.55555*Local_u8Angle)+1000)	;
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	88 2f       	mov	r24, r24
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	aa 27       	eor	r26, r26
    2584:	97 fd       	sbrc	r25, 7
    2586:	a0 95       	com	r26
    2588:	ba 2f       	mov	r27, r26
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	21 e1       	ldi	r18, 0x11	; 17
    259c:	37 ec       	ldi	r19, 0xC7	; 199
    259e:	41 eb       	ldi	r20, 0xB1	; 177
    25a0:	50 e4       	ldi	r21, 0x40	; 64
    25a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	4a e7       	ldi	r20, 0x7A	; 122
    25b4:	54 e4       	ldi	r21, 0x44	; 68
    25b6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01
#if Servo_PinD4	==	DIO_Pin5
	TIMER_VoidSetCompareMatchValue(TIMER1A,Local_u16OCRValue);
#elif	Servo_PinD4	==	DIO_Pin4
	TIMER_VoidSetCompareMatchValue(TIMER1B,Local_u16OCRValue);
    25ce:	29 81       	ldd	r18, Y+1	; 0x01
    25d0:	3a 81       	ldd	r19, Y+2	; 0x02
    25d2:	84 e0       	ldi	r24, 0x04	; 4
    25d4:	b9 01       	movw	r22, r18
    25d6:	0e 94 38 09 	call	0x1270	; 0x1270 <TIMER_VoidSetCompareMatchValue>
#endif
}
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <servo_init>:
#elif	Servo_PinD5	==	DIO_Pin4
	TIMER_VoidSetCompareMatchValue(TIMER1B,Local_u16OCRValue);
#endif
}
*/
void servo_init() {
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    SERVO_DDR |= (1 << SERVO_PIN);
    25ee:	a1 e3       	ldi	r26, 0x31	; 49
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e1 e3       	ldi	r30, 0x31	; 49
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	80 62       	ori	r24, 0x20	; 32
    25fa:	8c 93       	st	X, r24
}
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <servo_set_angle>:

void servo_set_angle(int angle) {
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	e4 97       	sbiw	r28, 0x34	; 52
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	9c ab       	std	Y+52, r25	; 0x34
    2618:	8b ab       	std	Y+51, r24	; 0x33
    int pulse_width = 500 + angle * 11;
    261a:	4b a9       	ldd	r20, Y+51	; 0x33
    261c:	5c a9       	ldd	r21, Y+52	; 0x34
    261e:	ca 01       	movw	r24, r20
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	9c 01       	movw	r18, r24
    2626:	22 0f       	add	r18, r18
    2628:	33 1f       	adc	r19, r19
    262a:	22 0f       	add	r18, r18
    262c:	33 1f       	adc	r19, r19
    262e:	82 0f       	add	r24, r18
    2630:	93 1f       	adc	r25, r19
    2632:	84 0f       	add	r24, r20
    2634:	95 1f       	adc	r25, r21
    2636:	8c 50       	subi	r24, 0x0C	; 12
    2638:	9e 4f       	sbci	r25, 0xFE	; 254
    263a:	9a ab       	std	Y+50, r25	; 0x32
    263c:	89 ab       	std	Y+49, r24	; 0x31
    SERVO_PORT |= (1 << SERVO_PIN);
    263e:	a2 e3       	ldi	r26, 0x32	; 50
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	e2 e3       	ldi	r30, 0x32	; 50
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	80 62       	ori	r24, 0x20	; 32
    264a:	8c 93       	st	X, r24
    _delay_us(pulse_width);
    264c:	89 a9       	ldd	r24, Y+49	; 0x31
    264e:	9a a9       	ldd	r25, Y+50	; 0x32
    2650:	aa 27       	eor	r26, r26
    2652:	97 fd       	sbrc	r25, 7
    2654:	a0 95       	com	r26
    2656:	ba 2f       	mov	r27, r26
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	8d a7       	std	Y+45, r24	; 0x2d
    2666:	9e a7       	std	Y+46, r25	; 0x2e
    2668:	af a7       	std	Y+47, r26	; 0x2f
    266a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    266c:	6d a5       	ldd	r22, Y+45	; 0x2d
    266e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2670:	8f a5       	ldd	r24, Y+47	; 0x2f
    2672:	98 a9       	ldd	r25, Y+48	; 0x30
    2674:	2b ea       	ldi	r18, 0xAB	; 171
    2676:	3a ea       	ldi	r19, 0xAA	; 170
    2678:	4a e2       	ldi	r20, 0x2A	; 42
    267a:	50 e4       	ldi	r21, 0x40	; 64
    267c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	89 a7       	std	Y+41, r24	; 0x29
    2686:	9a a7       	std	Y+42, r25	; 0x2a
    2688:	ab a7       	std	Y+43, r26	; 0x2b
    268a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    268c:	69 a5       	ldd	r22, Y+41	; 0x29
    268e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2690:	8b a5       	ldd	r24, Y+43	; 0x2b
    2692:	9c a5       	ldd	r25, Y+44	; 0x2c
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e8       	ldi	r20, 0x80	; 128
    269a:	5f e3       	ldi	r21, 0x3F	; 63
    269c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26a0:	88 23       	and	r24, r24
    26a2:	1c f4       	brge	.+6      	; 0x26aa <servo_set_angle+0xa8>
		__ticks = 1;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	88 a7       	std	Y+40, r24	; 0x28
    26a8:	91 c0       	rjmp	.+290    	; 0x27cc <servo_set_angle+0x1ca>
	else if (__tmp > 255)
    26aa:	69 a5       	ldd	r22, Y+41	; 0x29
    26ac:	7a a5       	ldd	r23, Y+42	; 0x2a
    26ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    26b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	4f e7       	ldi	r20, 0x7F	; 127
    26b8:	53 e4       	ldi	r21, 0x43	; 67
    26ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26be:	18 16       	cp	r1, r24
    26c0:	0c f0       	brlt	.+2      	; 0x26c4 <servo_set_angle+0xc2>
    26c2:	7b c0       	rjmp	.+246    	; 0x27ba <servo_set_angle+0x1b8>
	{
		_delay_ms(__us / 1000.0);
    26c4:	6d a5       	ldd	r22, Y+45	; 0x2d
    26c6:	7e a5       	ldd	r23, Y+46	; 0x2e
    26c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ca:	98 a9       	ldd	r25, Y+48	; 0x30
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	4a e7       	ldi	r20, 0x7A	; 122
    26d2:	54 e4       	ldi	r21, 0x44	; 68
    26d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	8c a3       	std	Y+36, r24	; 0x24
    26de:	9d a3       	std	Y+37, r25	; 0x25
    26e0:	ae a3       	std	Y+38, r26	; 0x26
    26e2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e4:	6c a1       	ldd	r22, Y+36	; 0x24
    26e6:	7d a1       	ldd	r23, Y+37	; 0x25
    26e8:	8e a1       	ldd	r24, Y+38	; 0x26
    26ea:	9f a1       	ldd	r25, Y+39	; 0x27
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4a ef       	ldi	r20, 0xFA	; 250
    26f2:	54 e4       	ldi	r21, 0x44	; 68
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	88 a3       	std	Y+32, r24	; 0x20
    26fe:	99 a3       	std	Y+33, r25	; 0x21
    2700:	aa a3       	std	Y+34, r26	; 0x22
    2702:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2704:	68 a1       	ldd	r22, Y+32	; 0x20
    2706:	79 a1       	ldd	r23, Y+33	; 0x21
    2708:	8a a1       	ldd	r24, Y+34	; 0x22
    270a:	9b a1       	ldd	r25, Y+35	; 0x23
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e8       	ldi	r20, 0x80	; 128
    2712:	5f e3       	ldi	r21, 0x3F	; 63
    2714:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2718:	88 23       	and	r24, r24
    271a:	2c f4       	brge	.+10     	; 0x2726 <servo_set_angle+0x124>
		__ticks = 1;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	9f 8f       	std	Y+31, r25	; 0x1f
    2722:	8e 8f       	std	Y+30, r24	; 0x1e
    2724:	3f c0       	rjmp	.+126    	; 0x27a4 <servo_set_angle+0x1a2>
	else if (__tmp > 65535)
    2726:	68 a1       	ldd	r22, Y+32	; 0x20
    2728:	79 a1       	ldd	r23, Y+33	; 0x21
    272a:	8a a1       	ldd	r24, Y+34	; 0x22
    272c:	9b a1       	ldd	r25, Y+35	; 0x23
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	3f ef       	ldi	r19, 0xFF	; 255
    2732:	4f e7       	ldi	r20, 0x7F	; 127
    2734:	57 e4       	ldi	r21, 0x47	; 71
    2736:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    273a:	18 16       	cp	r1, r24
    273c:	4c f5       	brge	.+82     	; 0x2790 <servo_set_angle+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273e:	6c a1       	ldd	r22, Y+36	; 0x24
    2740:	7d a1       	ldd	r23, Y+37	; 0x25
    2742:	8e a1       	ldd	r24, Y+38	; 0x26
    2744:	9f a1       	ldd	r25, Y+39	; 0x27
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e2       	ldi	r20, 0x20	; 32
    274c:	51 e4       	ldi	r21, 0x41	; 65
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	9f 8f       	std	Y+31, r25	; 0x1f
    2764:	8e 8f       	std	Y+30, r24	; 0x1e
    2766:	0f c0       	rjmp	.+30     	; 0x2786 <servo_set_angle+0x184>
    2768:	88 ec       	ldi	r24, 0xC8	; 200
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	9d 8f       	std	Y+29, r25	; 0x1d
    276e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2770:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2772:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <servo_set_angle+0x172>
    2778:	9d 8f       	std	Y+29, r25	; 0x1d
    277a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    277e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	9f 8f       	std	Y+31, r25	; 0x1f
    2784:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2786:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2788:	9f 8d       	ldd	r25, Y+31	; 0x1f
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	69 f7       	brne	.-38     	; 0x2768 <servo_set_angle+0x166>
    278e:	24 c0       	rjmp	.+72     	; 0x27d8 <servo_set_angle+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2790:	68 a1       	ldd	r22, Y+32	; 0x20
    2792:	79 a1       	ldd	r23, Y+33	; 0x21
    2794:	8a a1       	ldd	r24, Y+34	; 0x22
    2796:	9b a1       	ldd	r25, Y+35	; 0x23
    2798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9f 8f       	std	Y+31, r25	; 0x1f
    27a2:	8e 8f       	std	Y+30, r24	; 0x1e
    27a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27a8:	9b 8f       	std	Y+27, r25	; 0x1b
    27aa:	8a 8f       	std	Y+26, r24	; 0x1a
    27ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <servo_set_angle+0x1ae>
    27b4:	9b 8f       	std	Y+27, r25	; 0x1b
    27b6:	8a 8f       	std	Y+26, r24	; 0x1a
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <servo_set_angle+0x1d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27ba:	69 a5       	ldd	r22, Y+41	; 0x29
    27bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    27be:	8b a5       	ldd	r24, Y+43	; 0x2b
    27c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    27c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	88 a7       	std	Y+40, r24	; 0x28
    27cc:	88 a5       	ldd	r24, Y+40	; 0x28
    27ce:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27d0:	89 8d       	ldd	r24, Y+25	; 0x19
    27d2:	8a 95       	dec	r24
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <servo_set_angle+0x1d0>
    27d6:	89 8f       	std	Y+25, r24	; 0x19
    SERVO_PORT &= ~(1 << SERVO_PIN);
    27d8:	a2 e3       	ldi	r26, 0x32	; 50
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	e2 e3       	ldi	r30, 0x32	; 50
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	8f 7d       	andi	r24, 0xDF	; 223
    27e4:	8c 93       	st	X, r24
    _delay_us(20000 - pulse_width);
    27e6:	20 e2       	ldi	r18, 0x20	; 32
    27e8:	3e e4       	ldi	r19, 0x4E	; 78
    27ea:	89 a9       	ldd	r24, Y+49	; 0x31
    27ec:	9a a9       	ldd	r25, Y+50	; 0x32
    27ee:	a9 01       	movw	r20, r18
    27f0:	48 1b       	sub	r20, r24
    27f2:	59 0b       	sbc	r21, r25
    27f4:	ca 01       	movw	r24, r20
    27f6:	aa 27       	eor	r26, r26
    27f8:	97 fd       	sbrc	r25, 7
    27fa:	a0 95       	com	r26
    27fc:	ba 2f       	mov	r27, r26
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	8d 8b       	std	Y+21, r24	; 0x15
    280c:	9e 8b       	std	Y+22, r25	; 0x16
    280e:	af 8b       	std	Y+23, r26	; 0x17
    2810:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2812:	6d 89       	ldd	r22, Y+21	; 0x15
    2814:	7e 89       	ldd	r23, Y+22	; 0x16
    2816:	8f 89       	ldd	r24, Y+23	; 0x17
    2818:	98 8d       	ldd	r25, Y+24	; 0x18
    281a:	2b ea       	ldi	r18, 0xAB	; 171
    281c:	3a ea       	ldi	r19, 0xAA	; 170
    281e:	4a e2       	ldi	r20, 0x2A	; 42
    2820:	50 e4       	ldi	r21, 0x40	; 64
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	89 8b       	std	Y+17, r24	; 0x11
    282c:	9a 8b       	std	Y+18, r25	; 0x12
    282e:	ab 8b       	std	Y+19, r26	; 0x13
    2830:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2832:	69 89       	ldd	r22, Y+17	; 0x11
    2834:	7a 89       	ldd	r23, Y+18	; 0x12
    2836:	8b 89       	ldd	r24, Y+19	; 0x13
    2838:	9c 89       	ldd	r25, Y+20	; 0x14
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e8       	ldi	r20, 0x80	; 128
    2840:	5f e3       	ldi	r21, 0x3F	; 63
    2842:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2846:	88 23       	and	r24, r24
    2848:	1c f4       	brge	.+6      	; 0x2850 <servo_set_angle+0x24e>
		__ticks = 1;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	88 8b       	std	Y+16, r24	; 0x10
    284e:	91 c0       	rjmp	.+290    	; 0x2972 <servo_set_angle+0x370>
	else if (__tmp > 255)
    2850:	69 89       	ldd	r22, Y+17	; 0x11
    2852:	7a 89       	ldd	r23, Y+18	; 0x12
    2854:	8b 89       	ldd	r24, Y+19	; 0x13
    2856:	9c 89       	ldd	r25, Y+20	; 0x14
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	4f e7       	ldi	r20, 0x7F	; 127
    285e:	53 e4       	ldi	r21, 0x43	; 67
    2860:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2864:	18 16       	cp	r1, r24
    2866:	0c f0       	brlt	.+2      	; 0x286a <servo_set_angle+0x268>
    2868:	7b c0       	rjmp	.+246    	; 0x2960 <servo_set_angle+0x35e>
	{
		_delay_ms(__us / 1000.0);
    286a:	6d 89       	ldd	r22, Y+21	; 0x15
    286c:	7e 89       	ldd	r23, Y+22	; 0x16
    286e:	8f 89       	ldd	r24, Y+23	; 0x17
    2870:	98 8d       	ldd	r25, Y+24	; 0x18
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	4a e7       	ldi	r20, 0x7A	; 122
    2878:	54 e4       	ldi	r21, 0x44	; 68
    287a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	8c 87       	std	Y+12, r24	; 0x0c
    2884:	9d 87       	std	Y+13, r25	; 0x0d
    2886:	ae 87       	std	Y+14, r26	; 0x0e
    2888:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288a:	6c 85       	ldd	r22, Y+12	; 0x0c
    288c:	7d 85       	ldd	r23, Y+13	; 0x0d
    288e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2890:	9f 85       	ldd	r25, Y+15	; 0x0f
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	4a ef       	ldi	r20, 0xFA	; 250
    2898:	54 e4       	ldi	r21, 0x44	; 68
    289a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	88 87       	std	Y+8, r24	; 0x08
    28a4:	99 87       	std	Y+9, r25	; 0x09
    28a6:	aa 87       	std	Y+10, r26	; 0x0a
    28a8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28aa:	68 85       	ldd	r22, Y+8	; 0x08
    28ac:	79 85       	ldd	r23, Y+9	; 0x09
    28ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    28b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e8       	ldi	r20, 0x80	; 128
    28b8:	5f e3       	ldi	r21, 0x3F	; 63
    28ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28be:	88 23       	and	r24, r24
    28c0:	2c f4       	brge	.+10     	; 0x28cc <servo_set_angle+0x2ca>
		__ticks = 1;
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	9f 83       	std	Y+7, r25	; 0x07
    28c8:	8e 83       	std	Y+6, r24	; 0x06
    28ca:	3f c0       	rjmp	.+126    	; 0x294a <servo_set_angle+0x348>
	else if (__tmp > 65535)
    28cc:	68 85       	ldd	r22, Y+8	; 0x08
    28ce:	79 85       	ldd	r23, Y+9	; 0x09
    28d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    28d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	3f ef       	ldi	r19, 0xFF	; 255
    28d8:	4f e7       	ldi	r20, 0x7F	; 127
    28da:	57 e4       	ldi	r21, 0x47	; 71
    28dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28e0:	18 16       	cp	r1, r24
    28e2:	4c f5       	brge	.+82     	; 0x2936 <servo_set_angle+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    28e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    28e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    28ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e2       	ldi	r20, 0x20	; 32
    28f2:	51 e4       	ldi	r21, 0x41	; 65
    28f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	bc 01       	movw	r22, r24
    28fe:	cd 01       	movw	r24, r26
    2900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	9f 83       	std	Y+7, r25	; 0x07
    290a:	8e 83       	std	Y+6, r24	; 0x06
    290c:	0f c0       	rjmp	.+30     	; 0x292c <servo_set_angle+0x32a>
    290e:	88 ec       	ldi	r24, 0xC8	; 200
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	9d 83       	std	Y+5, r25	; 0x05
    2914:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2916:	8c 81       	ldd	r24, Y+4	; 0x04
    2918:	9d 81       	ldd	r25, Y+5	; 0x05
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <servo_set_angle+0x318>
    291e:	9d 83       	std	Y+5, r25	; 0x05
    2920:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2922:	8e 81       	ldd	r24, Y+6	; 0x06
    2924:	9f 81       	ldd	r25, Y+7	; 0x07
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	9f 83       	std	Y+7, r25	; 0x07
    292a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292c:	8e 81       	ldd	r24, Y+6	; 0x06
    292e:	9f 81       	ldd	r25, Y+7	; 0x07
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	69 f7       	brne	.-38     	; 0x290e <servo_set_angle+0x30c>
    2934:	24 c0       	rjmp	.+72     	; 0x297e <servo_set_angle+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2936:	68 85       	ldd	r22, Y+8	; 0x08
    2938:	79 85       	ldd	r23, Y+9	; 0x09
    293a:	8a 85       	ldd	r24, Y+10	; 0x0a
    293c:	9b 85       	ldd	r25, Y+11	; 0x0b
    293e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	9f 83       	std	Y+7, r25	; 0x07
    2948:	8e 83       	std	Y+6, r24	; 0x06
    294a:	8e 81       	ldd	r24, Y+6	; 0x06
    294c:	9f 81       	ldd	r25, Y+7	; 0x07
    294e:	9b 83       	std	Y+3, r25	; 0x03
    2950:	8a 83       	std	Y+2, r24	; 0x02
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	9b 81       	ldd	r25, Y+3	; 0x03
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	f1 f7       	brne	.-4      	; 0x2956 <servo_set_angle+0x354>
    295a:	9b 83       	std	Y+3, r25	; 0x03
    295c:	8a 83       	std	Y+2, r24	; 0x02
    295e:	0f c0       	rjmp	.+30     	; 0x297e <servo_set_angle+0x37c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2960:	69 89       	ldd	r22, Y+17	; 0x11
    2962:	7a 89       	ldd	r23, Y+18	; 0x12
    2964:	8b 89       	ldd	r24, Y+19	; 0x13
    2966:	9c 89       	ldd	r25, Y+20	; 0x14
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	88 8b       	std	Y+16, r24	; 0x10
    2972:	88 89       	ldd	r24, Y+16	; 0x10
    2974:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2976:	89 81       	ldd	r24, Y+1	; 0x01
    2978:	8a 95       	dec	r24
    297a:	f1 f7       	brne	.-4      	; 0x2978 <servo_set_angle+0x376>
    297c:	89 83       	std	Y+1, r24	; 0x01
}
    297e:	e4 96       	adiw	r28, 0x34	; 52
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	cd bf       	out	0x3d, r28	; 61
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <LCD_VoidSendCommand>:
#include "../../../Common/Bit_Math.h"
#include "../../../Common/STD_Types.h"
#include "../../../Common/Macros.h"


void LCD_VoidSendCommand(u8 LCD_Command){
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	2f 97       	sbiw	r28, 0x0f	; 15
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_RsPin,Low_Pin);
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	65 e0       	ldi	r22, 0x05	; 5
    29aa:	40 e0       	ldi	r20, 0x00	; 0
    29ac:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_RwPin,Low_Pin);
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	66 e0       	ldi	r22, 0x06	; 6
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
	DIO_VoidSetPortValue(LCD_DataPort,LCD_Command);
    29ba:	83 e0       	ldi	r24, 0x03	; 3
    29bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    29be:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_VoidSetPortValue>
	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_EPin,High_Pin);
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	67 e0       	ldi	r22, 0x07	; 7
    29c6:	41 e0       	ldi	r20, 0x01	; 1
    29c8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	a0 e8       	ldi	r26, 0x80	; 128
    29d2:	bf e3       	ldi	r27, 0x3F	; 63
    29d4:	8b 87       	std	Y+11, r24	; 0x0b
    29d6:	9c 87       	std	Y+12, r25	; 0x0c
    29d8:	ad 87       	std	Y+13, r26	; 0x0d
    29da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29de:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	4a ef       	ldi	r20, 0xFA	; 250
    29ea:	54 e4       	ldi	r21, 0x44	; 68
    29ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	8f 83       	std	Y+7, r24	; 0x07
    29f6:	98 87       	std	Y+8, r25	; 0x08
    29f8:	a9 87       	std	Y+9, r26	; 0x09
    29fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29fc:	6f 81       	ldd	r22, Y+7	; 0x07
    29fe:	78 85       	ldd	r23, Y+8	; 0x08
    2a00:	89 85       	ldd	r24, Y+9	; 0x09
    2a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e8       	ldi	r20, 0x80	; 128
    2a0a:	5f e3       	ldi	r21, 0x3F	; 63
    2a0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a10:	88 23       	and	r24, r24
    2a12:	2c f4       	brge	.+10     	; 0x2a1e <LCD_VoidSendCommand+0x8e>
		__ticks = 1;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	9e 83       	std	Y+6, r25	; 0x06
    2a1a:	8d 83       	std	Y+5, r24	; 0x05
    2a1c:	3f c0       	rjmp	.+126    	; 0x2a9c <LCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    2a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a20:	78 85       	ldd	r23, Y+8	; 0x08
    2a22:	89 85       	ldd	r24, Y+9	; 0x09
    2a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	3f ef       	ldi	r19, 0xFF	; 255
    2a2a:	4f e7       	ldi	r20, 0x7F	; 127
    2a2c:	57 e4       	ldi	r21, 0x47	; 71
    2a2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a32:	18 16       	cp	r1, r24
    2a34:	4c f5       	brge	.+82     	; 0x2a88 <LCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e2       	ldi	r20, 0x20	; 32
    2a44:	51 e4       	ldi	r21, 0x41	; 65
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	9e 83       	std	Y+6, r25	; 0x06
    2a5c:	8d 83       	std	Y+5, r24	; 0x05
    2a5e:	0f c0       	rjmp	.+30     	; 0x2a7e <LCD_VoidSendCommand+0xee>
    2a60:	88 ec       	ldi	r24, 0xC8	; 200
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9c 83       	std	Y+4, r25	; 0x04
    2a66:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <LCD_VoidSendCommand+0xdc>
    2a70:	9c 83       	std	Y+4, r25	; 0x04
    2a72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	9e 83       	std	Y+6, r25	; 0x06
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a80:	9e 81       	ldd	r25, Y+6	; 0x06
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	69 f7       	brne	.-38     	; 0x2a60 <LCD_VoidSendCommand+0xd0>
    2a86:	14 c0       	rjmp	.+40     	; 0x2ab0 <LCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a88:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8a:	78 85       	ldd	r23, Y+8	; 0x08
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9e 83       	std	Y+6, r25	; 0x06
    2a9a:	8d 83       	std	Y+5, r24	; 0x05
    2a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	89 83       	std	Y+1, r24	; 0x01
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <LCD_VoidSendCommand+0x118>
    2aac:	9a 83       	std	Y+2, r25	; 0x02
    2aae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_EPin,Low_Pin);
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	67 e0       	ldi	r22, 0x07	; 7
    2ab4:	40 e0       	ldi	r20, 0x00	; 0
    2ab6:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
}
    2aba:	2f 96       	adiw	r28, 0x0f	; 15
    2abc:	0f b6       	in	r0, 0x3f	; 63
    2abe:	f8 94       	cli
    2ac0:	de bf       	out	0x3e, r29	; 62
    2ac2:	0f be       	out	0x3f, r0	; 63
    2ac4:	cd bf       	out	0x3d, r28	; 61
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	08 95       	ret

00002acc <LCD_VoidSendDataChar>:

void LCD_VoidSendDataChar(u8 LCD_DataChar){
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    2ad4:	2f 97       	sbiw	r28, 0x0f	; 15
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	de bf       	out	0x3e, r29	; 62
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	cd bf       	out	0x3d, r28	; 61
    2ae0:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_RsPin,High_Pin);
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	65 e0       	ldi	r22, 0x05	; 5
    2ae6:	41 e0       	ldi	r20, 0x01	; 1
    2ae8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_RwPin,Low_Pin);
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	66 e0       	ldi	r22, 0x06	; 6
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
	DIO_VoidSetPortValue(LCD_DataPort,LCD_DataChar);
    2af6:	83 e0       	ldi	r24, 0x03	; 3
    2af8:	6f 85       	ldd	r22, Y+15	; 0x0f
    2afa:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_VoidSetPortValue>
	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_EPin,High_Pin);
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	67 e0       	ldi	r22, 0x07	; 7
    2b02:	41 e0       	ldi	r20, 0x01	; 1
    2b04:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	a0 e8       	ldi	r26, 0x80	; 128
    2b0e:	bf e3       	ldi	r27, 0x3F	; 63
    2b10:	8b 87       	std	Y+11, r24	; 0x0b
    2b12:	9c 87       	std	Y+12, r25	; 0x0c
    2b14:	ad 87       	std	Y+13, r26	; 0x0d
    2b16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	4a ef       	ldi	r20, 0xFA	; 250
    2b26:	54 e4       	ldi	r21, 0x44	; 68
    2b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	8f 83       	std	Y+7, r24	; 0x07
    2b32:	98 87       	std	Y+8, r25	; 0x08
    2b34:	a9 87       	std	Y+9, r26	; 0x09
    2b36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b38:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3a:	78 85       	ldd	r23, Y+8	; 0x08
    2b3c:	89 85       	ldd	r24, Y+9	; 0x09
    2b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e8       	ldi	r20, 0x80	; 128
    2b46:	5f e3       	ldi	r21, 0x3F	; 63
    2b48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b4c:	88 23       	and	r24, r24
    2b4e:	2c f4       	brge	.+10     	; 0x2b5a <LCD_VoidSendDataChar+0x8e>
		__ticks = 1;
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	9e 83       	std	Y+6, r25	; 0x06
    2b56:	8d 83       	std	Y+5, r24	; 0x05
    2b58:	3f c0       	rjmp	.+126    	; 0x2bd8 <LCD_VoidSendDataChar+0x10c>
	else if (__tmp > 65535)
    2b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5c:	78 85       	ldd	r23, Y+8	; 0x08
    2b5e:	89 85       	ldd	r24, Y+9	; 0x09
    2b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	3f ef       	ldi	r19, 0xFF	; 255
    2b66:	4f e7       	ldi	r20, 0x7F	; 127
    2b68:	57 e4       	ldi	r21, 0x47	; 71
    2b6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b6e:	18 16       	cp	r1, r24
    2b70:	4c f5       	brge	.+82     	; 0x2bc4 <LCD_VoidSendDataChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e2       	ldi	r20, 0x20	; 32
    2b80:	51 e4       	ldi	r21, 0x41	; 65
    2b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	bc 01       	movw	r22, r24
    2b8c:	cd 01       	movw	r24, r26
    2b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	9e 83       	std	Y+6, r25	; 0x06
    2b98:	8d 83       	std	Y+5, r24	; 0x05
    2b9a:	0f c0       	rjmp	.+30     	; 0x2bba <LCD_VoidSendDataChar+0xee>
    2b9c:	88 ec       	ldi	r24, 0xC8	; 200
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	9c 83       	std	Y+4, r25	; 0x04
    2ba2:	8b 83       	std	Y+3, r24	; 0x03
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	f1 f7       	brne	.-4      	; 0x2ba8 <LCD_VoidSendDataChar+0xdc>
    2bac:	9c 83       	std	Y+4, r25	; 0x04
    2bae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	9e 83       	std	Y+6, r25	; 0x06
    2bb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bba:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	69 f7       	brne	.-38     	; 0x2b9c <LCD_VoidSendDataChar+0xd0>
    2bc2:	14 c0       	rjmp	.+40     	; 0x2bec <LCD_VoidSendDataChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc6:	78 85       	ldd	r23, Y+8	; 0x08
    2bc8:	89 85       	ldd	r24, Y+9	; 0x09
    2bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9e 83       	std	Y+6, r25	; 0x06
    2bd6:	8d 83       	std	Y+5, r24	; 0x05
    2bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bda:	9e 81       	ldd	r25, Y+6	; 0x06
    2bdc:	9a 83       	std	Y+2, r25	; 0x02
    2bde:	89 83       	std	Y+1, r24	; 0x01
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	9a 81       	ldd	r25, Y+2	; 0x02
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <LCD_VoidSendDataChar+0x118>
    2be8:	9a 83       	std	Y+2, r25	; 0x02
    2bea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_EPin,Low_Pin);
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	67 e0       	ldi	r22, 0x07	; 7
    2bf0:	40 e0       	ldi	r20, 0x00	; 0
    2bf2:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
}
    2bf6:	2f 96       	adiw	r28, 0x0f	; 15
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	de bf       	out	0x3e, r29	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	08 95       	ret

00002c08 <LCD_VoidInit>:
void LCD_VoidInit(void){
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	e8 97       	sbiw	r28, 0x38	; 56
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	cd bf       	out	0x3d, r28	; 61
	/* set direction for LCD*/
	DIO_VoidSetPortDir(LCD_DataPort,Output_Port);
    2c1c:	83 e0       	ldi	r24, 0x03	; 3
    2c1e:	6f ef       	ldi	r22, 0xFF	; 255
    2c20:	0e 94 14 11 	call	0x2228	; 0x2228 <DIO_VoidSetPortDir>
	DIO_VoidSetPinNumDir(LCD_CtrlPort,LCD_RsPin,Output_Pin);
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	65 e0       	ldi	r22, 0x05	; 5
    2c28:	41 e0       	ldi	r20, 0x01	; 1
    2c2a:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <DIO_VoidSetPinNumDir>
	DIO_VoidSetPinNumDir(LCD_CtrlPort,LCD_RwPin,Output_Pin);
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	66 e0       	ldi	r22, 0x06	; 6
    2c32:	41 e0       	ldi	r20, 0x01	; 1
    2c34:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <DIO_VoidSetPinNumDir>
	DIO_VoidSetPinNumDir(LCD_CtrlPort,LCD_EPin,Output_Pin);
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	67 e0       	ldi	r22, 0x07	; 7
    2c3c:	41 e0       	ldi	r20, 0x01	; 1
    2c3e:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <DIO_VoidSetPinNumDir>
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	ac e0       	ldi	r26, 0x0C	; 12
    2c48:	b2 e4       	ldi	r27, 0x42	; 66
    2c4a:	8d ab       	std	Y+53, r24	; 0x35
    2c4c:	9e ab       	std	Y+54, r25	; 0x36
    2c4e:	af ab       	std	Y+55, r26	; 0x37
    2c50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c52:	6d a9       	ldd	r22, Y+53	; 0x35
    2c54:	7e a9       	ldd	r23, Y+54	; 0x36
    2c56:	8f a9       	ldd	r24, Y+55	; 0x37
    2c58:	98 ad       	ldd	r25, Y+56	; 0x38
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	4a ef       	ldi	r20, 0xFA	; 250
    2c60:	54 e4       	ldi	r21, 0x44	; 68
    2c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	89 ab       	std	Y+49, r24	; 0x31
    2c6c:	9a ab       	std	Y+50, r25	; 0x32
    2c6e:	ab ab       	std	Y+51, r26	; 0x33
    2c70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c72:	69 a9       	ldd	r22, Y+49	; 0x31
    2c74:	7a a9       	ldd	r23, Y+50	; 0x32
    2c76:	8b a9       	ldd	r24, Y+51	; 0x33
    2c78:	9c a9       	ldd	r25, Y+52	; 0x34
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e8       	ldi	r20, 0x80	; 128
    2c80:	5f e3       	ldi	r21, 0x3F	; 63
    2c82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c86:	88 23       	and	r24, r24
    2c88:	2c f4       	brge	.+10     	; 0x2c94 <LCD_VoidInit+0x8c>
		__ticks = 1;
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	98 ab       	std	Y+48, r25	; 0x30
    2c90:	8f a7       	std	Y+47, r24	; 0x2f
    2c92:	3f c0       	rjmp	.+126    	; 0x2d12 <LCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    2c94:	69 a9       	ldd	r22, Y+49	; 0x31
    2c96:	7a a9       	ldd	r23, Y+50	; 0x32
    2c98:	8b a9       	ldd	r24, Y+51	; 0x33
    2c9a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ca0:	4f e7       	ldi	r20, 0x7F	; 127
    2ca2:	57 e4       	ldi	r21, 0x47	; 71
    2ca4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca8:	18 16       	cp	r1, r24
    2caa:	4c f5       	brge	.+82     	; 0x2cfe <LCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cac:	6d a9       	ldd	r22, Y+53	; 0x35
    2cae:	7e a9       	ldd	r23, Y+54	; 0x36
    2cb0:	8f a9       	ldd	r24, Y+55	; 0x37
    2cb2:	98 ad       	ldd	r25, Y+56	; 0x38
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e2       	ldi	r20, 0x20	; 32
    2cba:	51 e4       	ldi	r21, 0x41	; 65
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	98 ab       	std	Y+48, r25	; 0x30
    2cd2:	8f a7       	std	Y+47, r24	; 0x2f
    2cd4:	0f c0       	rjmp	.+30     	; 0x2cf4 <LCD_VoidInit+0xec>
    2cd6:	88 ec       	ldi	r24, 0xC8	; 200
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	9e a7       	std	Y+46, r25	; 0x2e
    2cdc:	8d a7       	std	Y+45, r24	; 0x2d
    2cde:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ce0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <LCD_VoidInit+0xda>
    2ce6:	9e a7       	std	Y+46, r25	; 0x2e
    2ce8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cec:	98 a9       	ldd	r25, Y+48	; 0x30
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	98 ab       	std	Y+48, r25	; 0x30
    2cf2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cf6:	98 a9       	ldd	r25, Y+48	; 0x30
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	69 f7       	brne	.-38     	; 0x2cd6 <LCD_VoidInit+0xce>
    2cfc:	14 c0       	rjmp	.+40     	; 0x2d26 <LCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfe:	69 a9       	ldd	r22, Y+49	; 0x31
    2d00:	7a a9       	ldd	r23, Y+50	; 0x32
    2d02:	8b a9       	ldd	r24, Y+51	; 0x33
    2d04:	9c a9       	ldd	r25, Y+52	; 0x34
    2d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	98 ab       	std	Y+48, r25	; 0x30
    2d10:	8f a7       	std	Y+47, r24	; 0x2f
    2d12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d14:	98 a9       	ldd	r25, Y+48	; 0x30
    2d16:	9c a7       	std	Y+44, r25	; 0x2c
    2d18:	8b a7       	std	Y+43, r24	; 0x2b
    2d1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	f1 f7       	brne	.-4      	; 0x2d1e <LCD_VoidInit+0x116>
    2d22:	9c a7       	std	Y+44, r25	; 0x2c
    2d24:	8b a7       	std	Y+43, r24	; 0x2b
	/* set Initialize for LCD*/
	_delay_ms(35);
	LCD_VoidSendCommand(0x38);
    2d26:	88 e3       	ldi	r24, 0x38	; 56
    2d28:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_VoidSendCommand>
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	a0 e8       	ldi	r26, 0x80	; 128
    2d32:	bf e3       	ldi	r27, 0x3F	; 63
    2d34:	8f a3       	std	Y+39, r24	; 0x27
    2d36:	98 a7       	std	Y+40, r25	; 0x28
    2d38:	a9 a7       	std	Y+41, r26	; 0x29
    2d3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d3e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d40:	89 a5       	ldd	r24, Y+41	; 0x29
    2d42:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	4a ef       	ldi	r20, 0xFA	; 250
    2d4a:	54 e4       	ldi	r21, 0x44	; 68
    2d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	8b a3       	std	Y+35, r24	; 0x23
    2d56:	9c a3       	std	Y+36, r25	; 0x24
    2d58:	ad a3       	std	Y+37, r26	; 0x25
    2d5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d5c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d5e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d60:	8d a1       	ldd	r24, Y+37	; 0x25
    2d62:	9e a1       	ldd	r25, Y+38	; 0x26
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	40 e8       	ldi	r20, 0x80	; 128
    2d6a:	5f e3       	ldi	r21, 0x3F	; 63
    2d6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d70:	88 23       	and	r24, r24
    2d72:	2c f4       	brge	.+10     	; 0x2d7e <LCD_VoidInit+0x176>
		__ticks = 1;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	9a a3       	std	Y+34, r25	; 0x22
    2d7a:	89 a3       	std	Y+33, r24	; 0x21
    2d7c:	3f c0       	rjmp	.+126    	; 0x2dfc <LCD_VoidInit+0x1f4>
	else if (__tmp > 65535)
    2d7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d80:	7c a1       	ldd	r23, Y+36	; 0x24
    2d82:	8d a1       	ldd	r24, Y+37	; 0x25
    2d84:	9e a1       	ldd	r25, Y+38	; 0x26
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	3f ef       	ldi	r19, 0xFF	; 255
    2d8a:	4f e7       	ldi	r20, 0x7F	; 127
    2d8c:	57 e4       	ldi	r21, 0x47	; 71
    2d8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d92:	18 16       	cp	r1, r24
    2d94:	4c f5       	brge	.+82     	; 0x2de8 <LCD_VoidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d96:	6f a1       	ldd	r22, Y+39	; 0x27
    2d98:	78 a5       	ldd	r23, Y+40	; 0x28
    2d9a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e2       	ldi	r20, 0x20	; 32
    2da4:	51 e4       	ldi	r21, 0x41	; 65
    2da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	bc 01       	movw	r22, r24
    2db0:	cd 01       	movw	r24, r26
    2db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	9a a3       	std	Y+34, r25	; 0x22
    2dbc:	89 a3       	std	Y+33, r24	; 0x21
    2dbe:	0f c0       	rjmp	.+30     	; 0x2dde <LCD_VoidInit+0x1d6>
    2dc0:	88 ec       	ldi	r24, 0xC8	; 200
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	98 a3       	std	Y+32, r25	; 0x20
    2dc6:	8f 8f       	std	Y+31, r24	; 0x1f
    2dc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dca:	98 a1       	ldd	r25, Y+32	; 0x20
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <LCD_VoidInit+0x1c4>
    2dd0:	98 a3       	std	Y+32, r25	; 0x20
    2dd2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd4:	89 a1       	ldd	r24, Y+33	; 0x21
    2dd6:	9a a1       	ldd	r25, Y+34	; 0x22
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	9a a3       	std	Y+34, r25	; 0x22
    2ddc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dde:	89 a1       	ldd	r24, Y+33	; 0x21
    2de0:	9a a1       	ldd	r25, Y+34	; 0x22
    2de2:	00 97       	sbiw	r24, 0x00	; 0
    2de4:	69 f7       	brne	.-38     	; 0x2dc0 <LCD_VoidInit+0x1b8>
    2de6:	14 c0       	rjmp	.+40     	; 0x2e10 <LCD_VoidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de8:	6b a1       	ldd	r22, Y+35	; 0x23
    2dea:	7c a1       	ldd	r23, Y+36	; 0x24
    2dec:	8d a1       	ldd	r24, Y+37	; 0x25
    2dee:	9e a1       	ldd	r25, Y+38	; 0x26
    2df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	9a a3       	std	Y+34, r25	; 0x22
    2dfa:	89 a3       	std	Y+33, r24	; 0x21
    2dfc:	89 a1       	ldd	r24, Y+33	; 0x21
    2dfe:	9a a1       	ldd	r25, Y+34	; 0x22
    2e00:	9e 8f       	std	Y+30, r25	; 0x1e
    2e02:	8d 8f       	std	Y+29, r24	; 0x1d
    2e04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <LCD_VoidInit+0x200>
    2e0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2e0e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VoidSendCommand(0x0C);
    2e10:	8c e0       	ldi	r24, 0x0C	; 12
    2e12:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_VoidSendCommand>
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	a0 e8       	ldi	r26, 0x80	; 128
    2e1c:	bf e3       	ldi	r27, 0x3F	; 63
    2e1e:	89 8f       	std	Y+25, r24	; 0x19
    2e20:	9a 8f       	std	Y+26, r25	; 0x1a
    2e22:	ab 8f       	std	Y+27, r26	; 0x1b
    2e24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e26:	69 8d       	ldd	r22, Y+25	; 0x19
    2e28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	4a ef       	ldi	r20, 0xFA	; 250
    2e34:	54 e4       	ldi	r21, 0x44	; 68
    2e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	8d 8b       	std	Y+21, r24	; 0x15
    2e40:	9e 8b       	std	Y+22, r25	; 0x16
    2e42:	af 8b       	std	Y+23, r26	; 0x17
    2e44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e46:	6d 89       	ldd	r22, Y+21	; 0x15
    2e48:	7e 89       	ldd	r23, Y+22	; 0x16
    2e4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	40 e8       	ldi	r20, 0x80	; 128
    2e54:	5f e3       	ldi	r21, 0x3F	; 63
    2e56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e5a:	88 23       	and	r24, r24
    2e5c:	2c f4       	brge	.+10     	; 0x2e68 <LCD_VoidInit+0x260>
		__ticks = 1;
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	9c 8b       	std	Y+20, r25	; 0x14
    2e64:	8b 8b       	std	Y+19, r24	; 0x13
    2e66:	3f c0       	rjmp	.+126    	; 0x2ee6 <LCD_VoidInit+0x2de>
	else if (__tmp > 65535)
    2e68:	6d 89       	ldd	r22, Y+21	; 0x15
    2e6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	3f ef       	ldi	r19, 0xFF	; 255
    2e74:	4f e7       	ldi	r20, 0x7F	; 127
    2e76:	57 e4       	ldi	r21, 0x47	; 71
    2e78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e7c:	18 16       	cp	r1, r24
    2e7e:	4c f5       	brge	.+82     	; 0x2ed2 <LCD_VoidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e80:	69 8d       	ldd	r22, Y+25	; 0x19
    2e82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e2       	ldi	r20, 0x20	; 32
    2e8e:	51 e4       	ldi	r21, 0x41	; 65
    2e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e94:	dc 01       	movw	r26, r24
    2e96:	cb 01       	movw	r24, r22
    2e98:	bc 01       	movw	r22, r24
    2e9a:	cd 01       	movw	r24, r26
    2e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	9c 8b       	std	Y+20, r25	; 0x14
    2ea6:	8b 8b       	std	Y+19, r24	; 0x13
    2ea8:	0f c0       	rjmp	.+30     	; 0x2ec8 <LCD_VoidInit+0x2c0>
    2eaa:	88 ec       	ldi	r24, 0xC8	; 200
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	9a 8b       	std	Y+18, r25	; 0x12
    2eb0:	89 8b       	std	Y+17, r24	; 0x11
    2eb2:	89 89       	ldd	r24, Y+17	; 0x11
    2eb4:	9a 89       	ldd	r25, Y+18	; 0x12
    2eb6:	01 97       	sbiw	r24, 0x01	; 1
    2eb8:	f1 f7       	brne	.-4      	; 0x2eb6 <LCD_VoidInit+0x2ae>
    2eba:	9a 8b       	std	Y+18, r25	; 0x12
    2ebc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec2:	01 97       	sbiw	r24, 0x01	; 1
    2ec4:	9c 8b       	std	Y+20, r25	; 0x14
    2ec6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec8:	8b 89       	ldd	r24, Y+19	; 0x13
    2eca:	9c 89       	ldd	r25, Y+20	; 0x14
    2ecc:	00 97       	sbiw	r24, 0x00	; 0
    2ece:	69 f7       	brne	.-38     	; 0x2eaa <LCD_VoidInit+0x2a2>
    2ed0:	14 c0       	rjmp	.+40     	; 0x2efa <LCD_VoidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ed4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ed6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	9c 8b       	std	Y+20, r25	; 0x14
    2ee4:	8b 8b       	std	Y+19, r24	; 0x13
    2ee6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eea:	98 8b       	std	Y+16, r25	; 0x10
    2eec:	8f 87       	std	Y+15, r24	; 0x0f
    2eee:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef0:	98 89       	ldd	r25, Y+16	; 0x10
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	f1 f7       	brne	.-4      	; 0x2ef2 <LCD_VoidInit+0x2ea>
    2ef6:	98 8b       	std	Y+16, r25	; 0x10
    2ef8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VoidSendCommand(0x01);
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_VoidSendCommand>
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	a0 e0       	ldi	r26, 0x00	; 0
    2f06:	b0 e4       	ldi	r27, 0x40	; 64
    2f08:	8b 87       	std	Y+11, r24	; 0x0b
    2f0a:	9c 87       	std	Y+12, r25	; 0x0c
    2f0c:	ad 87       	std	Y+13, r26	; 0x0d
    2f0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	4a ef       	ldi	r20, 0xFA	; 250
    2f1e:	54 e4       	ldi	r21, 0x44	; 68
    2f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	8f 83       	std	Y+7, r24	; 0x07
    2f2a:	98 87       	std	Y+8, r25	; 0x08
    2f2c:	a9 87       	std	Y+9, r26	; 0x09
    2f2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f30:	6f 81       	ldd	r22, Y+7	; 0x07
    2f32:	78 85       	ldd	r23, Y+8	; 0x08
    2f34:	89 85       	ldd	r24, Y+9	; 0x09
    2f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	40 e8       	ldi	r20, 0x80	; 128
    2f3e:	5f e3       	ldi	r21, 0x3F	; 63
    2f40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f44:	88 23       	and	r24, r24
    2f46:	2c f4       	brge	.+10     	; 0x2f52 <LCD_VoidInit+0x34a>
		__ticks = 1;
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	9e 83       	std	Y+6, r25	; 0x06
    2f4e:	8d 83       	std	Y+5, r24	; 0x05
    2f50:	3f c0       	rjmp	.+126    	; 0x2fd0 <LCD_VoidInit+0x3c8>
	else if (__tmp > 65535)
    2f52:	6f 81       	ldd	r22, Y+7	; 0x07
    2f54:	78 85       	ldd	r23, Y+8	; 0x08
    2f56:	89 85       	ldd	r24, Y+9	; 0x09
    2f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	3f ef       	ldi	r19, 0xFF	; 255
    2f5e:	4f e7       	ldi	r20, 0x7F	; 127
    2f60:	57 e4       	ldi	r21, 0x47	; 71
    2f62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f66:	18 16       	cp	r1, r24
    2f68:	4c f5       	brge	.+82     	; 0x2fbc <LCD_VoidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e2       	ldi	r20, 0x20	; 32
    2f78:	51 e4       	ldi	r21, 0x41	; 65
    2f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	bc 01       	movw	r22, r24
    2f84:	cd 01       	movw	r24, r26
    2f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	9e 83       	std	Y+6, r25	; 0x06
    2f90:	8d 83       	std	Y+5, r24	; 0x05
    2f92:	0f c0       	rjmp	.+30     	; 0x2fb2 <LCD_VoidInit+0x3aa>
    2f94:	88 ec       	ldi	r24, 0xC8	; 200
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	9c 83       	std	Y+4, r25	; 0x04
    2f9a:	8b 83       	std	Y+3, r24	; 0x03
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <LCD_VoidInit+0x398>
    2fa4:	9c 83       	std	Y+4, r25	; 0x04
    2fa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2faa:	9e 81       	ldd	r25, Y+6	; 0x06
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	9e 83       	std	Y+6, r25	; 0x06
    2fb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	00 97       	sbiw	r24, 0x00	; 0
    2fb8:	69 f7       	brne	.-38     	; 0x2f94 <LCD_VoidInit+0x38c>
    2fba:	14 c0       	rjmp	.+40     	; 0x2fe4 <LCD_VoidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fbe:	78 85       	ldd	r23, Y+8	; 0x08
    2fc0:	89 85       	ldd	r24, Y+9	; 0x09
    2fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	9e 83       	std	Y+6, r25	; 0x06
    2fce:	8d 83       	std	Y+5, r24	; 0x05
    2fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd4:	9a 83       	std	Y+2, r25	; 0x02
    2fd6:	89 83       	std	Y+1, r24	; 0x01
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	9a 81       	ldd	r25, Y+2	; 0x02
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	f1 f7       	brne	.-4      	; 0x2fdc <LCD_VoidInit+0x3d4>
    2fe0:	9a 83       	std	Y+2, r25	; 0x02
    2fe2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2fe4:	e8 96       	adiw	r28, 0x38	; 56
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	de bf       	out	0x3e, r29	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	cd bf       	out	0x3d, r28	; 61
    2ff0:	cf 91       	pop	r28
    2ff2:	df 91       	pop	r29
    2ff4:	08 95       	ret

00002ff6 <LCD_VoidSendDataString>:
void LCD_VoidSendDataString(const u8* LCD_DataString)
{
    2ff6:	df 93       	push	r29
    2ff8:	cf 93       	push	r28
    2ffa:	00 d0       	rcall	.+0      	; 0x2ffc <LCD_VoidSendDataString+0x6>
    2ffc:	0f 92       	push	r0
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
    3002:	9b 83       	std	Y+3, r25	; 0x03
    3004:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8Counter = 0;
    3006:	19 82       	std	Y+1, r1	; 0x01
    3008:	0e c0       	rjmp	.+28     	; 0x3026 <LCD_VoidSendDataString+0x30>
	while (LCD_DataString[Local_U8Counter] != '\0')
	{
		LCD_VoidSendDataChar(LCD_DataString[Local_U8Counter]);
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	28 2f       	mov	r18, r24
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	9b 81       	ldd	r25, Y+3	; 0x03
    3014:	fc 01       	movw	r30, r24
    3016:	e2 0f       	add	r30, r18
    3018:	f3 1f       	adc	r31, r19
    301a:	80 81       	ld	r24, Z
    301c:	0e 94 66 15 	call	0x2acc	; 0x2acc <LCD_VoidSendDataChar>
		Local_U8Counter++ ;
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	8f 5f       	subi	r24, 0xFF	; 255
    3024:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
void LCD_VoidSendDataString(const u8* LCD_DataString)
{
	u8 Local_U8Counter = 0;
	while (LCD_DataString[Local_U8Counter] != '\0')
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	28 2f       	mov	r18, r24
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	8a 81       	ldd	r24, Y+2	; 0x02
    302e:	9b 81       	ldd	r25, Y+3	; 0x03
    3030:	fc 01       	movw	r30, r24
    3032:	e2 0f       	add	r30, r18
    3034:	f3 1f       	adc	r31, r19
    3036:	80 81       	ld	r24, Z
    3038:	88 23       	and	r24, r24
    303a:	39 f7       	brne	.-50     	; 0x300a <LCD_VoidSendDataString+0x14>
	{
		LCD_VoidSendDataChar(LCD_DataString[Local_U8Counter]);
		Local_U8Counter++ ;
}
}
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	cf 91       	pop	r28
    3044:	df 91       	pop	r29
    3046:	08 95       	ret

00003048 <LCD_VoidGoToXY>:
void LCD_VoidGoToXY(u8 X_Position,u8 Y_Position)
{
    3048:	df 93       	push	r29
    304a:	cf 93       	push	r28
    304c:	00 d0       	rcall	.+0      	; 0x304e <LCD_VoidGoToXY+0x6>
    304e:	0f 92       	push	r0
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	8a 83       	std	Y+2, r24	; 0x02
    3056:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOCAL_Positon = 0 ;
    3058:	19 82       	std	Y+1, r1	; 0x01
	if(X_Position == 0){
    305a:	8a 81       	ldd	r24, Y+2	; 0x02
    305c:	88 23       	and	r24, r24
    305e:	19 f4       	brne	.+6      	; 0x3066 <LCD_VoidGoToXY+0x1e>
		LOCAL_Positon = Y_Position ;
    3060:	8b 81       	ldd	r24, Y+3	; 0x03
    3062:	89 83       	std	Y+1, r24	; 0x01
    3064:	06 c0       	rjmp	.+12     	; 0x3072 <LCD_VoidGoToXY+0x2a>
	}
	else if (X_Position == 1){
    3066:	8a 81       	ldd	r24, Y+2	; 0x02
    3068:	81 30       	cpi	r24, 0x01	; 1
    306a:	19 f4       	brne	.+6      	; 0x3072 <LCD_VoidGoToXY+0x2a>
		LOCAL_Positon = Y_Position + 0x40 ;
    306c:	8b 81       	ldd	r24, Y+3	; 0x03
    306e:	80 5c       	subi	r24, 0xC0	; 192
    3070:	89 83       	std	Y+1, r24	; 0x01
	}
	Set_Bit(LOCAL_Positon,DIO_Pin7);
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	80 68       	ori	r24, 0x80	; 128
    3076:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(LOCAL_Positon);
    3078:	89 81       	ldd	r24, Y+1	; 0x01
    307a:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_VoidSendCommand>
}
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	cf 91       	pop	r28
    3086:	df 91       	pop	r29
    3088:	08 95       	ret

0000308a <LCD_VoidWriteSpecialChar>:
void LCD_VoidWriteSpecialChar(u8 *Pattern , u8 Patern_Number ,u8 X_Position,u8 Y_Position)
{
    308a:	df 93       	push	r29
    308c:	cf 93       	push	r28
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
    3092:	27 97       	sbiw	r28, 0x07	; 7
    3094:	0f b6       	in	r0, 0x3f	; 63
    3096:	f8 94       	cli
    3098:	de bf       	out	0x3e, r29	; 62
    309a:	0f be       	out	0x3f, r0	; 63
    309c:	cd bf       	out	0x3d, r28	; 61
    309e:	9c 83       	std	Y+4, r25	; 0x04
    30a0:	8b 83       	std	Y+3, r24	; 0x03
    30a2:	6d 83       	std	Y+5, r22	; 0x05
    30a4:	4e 83       	std	Y+6, r20	; 0x06
    30a6:	2f 83       	std	Y+7, r18	; 0x07
	u8 Counter = 0 ;
    30a8:	1a 82       	std	Y+2, r1	; 0x02
	u8 LCD_CGRamAdress = 0 ;
    30aa:	19 82       	std	Y+1, r1	; 0x01
	/*Calculate the CGRAM Address whose each block is 8 bytes */
	LCD_CGRamAdress = Patern_Number*8 ;
    30ac:	8d 81       	ldd	r24, Y+5	; 0x05
    30ae:	88 2f       	mov	r24, r24
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	88 0f       	add	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	88 0f       	add	r24, r24
    30bc:	99 1f       	adc	r25, r25
    30be:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(LCD_CGRamAdress + 64);
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	80 5c       	subi	r24, 0xC0	; 192
    30c4:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_VoidSendCommand>
for (Counter = 0; Counter < 8 ; Counter ++ ){
    30c8:	1a 82       	std	Y+2, r1	; 0x02
    30ca:	0e c0       	rjmp	.+28     	; 0x30e8 <LCD_VoidWriteSpecialChar+0x5e>
	LCD_VoidSendDataChar(Pattern[Counter]);
    30cc:	8a 81       	ldd	r24, Y+2	; 0x02
    30ce:	28 2f       	mov	r18, r24
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	8b 81       	ldd	r24, Y+3	; 0x03
    30d4:	9c 81       	ldd	r25, Y+4	; 0x04
    30d6:	fc 01       	movw	r30, r24
    30d8:	e2 0f       	add	r30, r18
    30da:	f3 1f       	adc	r31, r19
    30dc:	80 81       	ld	r24, Z
    30de:	0e 94 66 15 	call	0x2acc	; 0x2acc <LCD_VoidSendDataChar>
	u8 Counter = 0 ;
	u8 LCD_CGRamAdress = 0 ;
	/*Calculate the CGRAM Address whose each block is 8 bytes */
	LCD_CGRamAdress = Patern_Number*8 ;
	LCD_VoidSendCommand(LCD_CGRamAdress + 64);
for (Counter = 0; Counter < 8 ; Counter ++ ){
    30e2:	8a 81       	ldd	r24, Y+2	; 0x02
    30e4:	8f 5f       	subi	r24, 0xFF	; 255
    30e6:	8a 83       	std	Y+2, r24	; 0x02
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	88 30       	cpi	r24, 0x08	; 8
    30ec:	78 f3       	brcs	.-34     	; 0x30cc <LCD_VoidWriteSpecialChar+0x42>
	LCD_VoidSendDataChar(Pattern[Counter]);
}
LCD_VoidGoToXY(X_Position,Y_Position);
    30ee:	8e 81       	ldd	r24, Y+6	; 0x06
    30f0:	6f 81       	ldd	r22, Y+7	; 0x07
    30f2:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_VoidGoToXY>
LCD_VoidSendDataChar(Patern_Number);
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	0e 94 66 15 	call	0x2acc	; 0x2acc <LCD_VoidSendDataChar>
}
    30fc:	27 96       	adiw	r28, 0x07	; 7
    30fe:	0f b6       	in	r0, 0x3f	; 63
    3100:	f8 94       	cli
    3102:	de bf       	out	0x3e, r29	; 62
    3104:	0f be       	out	0x3f, r0	; 63
    3106:	cd bf       	out	0x3d, r28	; 61
    3108:	cf 91       	pop	r28
    310a:	df 91       	pop	r29
    310c:	08 95       	ret

0000310e <LCD_VoidSendNumber>:
void LCD_VoidSendNumber(u32 Number)
{
    310e:	df 93       	push	r29
    3110:	cf 93       	push	r28
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	61 97       	sbiw	r28, 0x11	; 17
    3118:	0f b6       	in	r0, 0x3f	; 63
    311a:	f8 94       	cli
    311c:	de bf       	out	0x3e, r29	; 62
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	cd bf       	out	0x3d, r28	; 61
    3122:	6e 87       	std	Y+14, r22	; 0x0e
    3124:	7f 87       	std	Y+15, r23	; 0x0f
    3126:	88 8b       	std	Y+16, r24	; 0x10
    3128:	99 8b       	std	Y+17, r25	; 0x11
	u8 DigitNumber;
	s8 Counter = -1 , Display;
    312a:	8f ef       	ldi	r24, 0xFF	; 255
    312c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Array_Number[10];
	do
	{
		Counter++;
    312e:	8a 81       	ldd	r24, Y+2	; 0x02
    3130:	8f 5f       	subi	r24, 0xFF	; 255
    3132:	8a 83       	std	Y+2, r24	; 0x02
		DigitNumber = Number % 10;
    3134:	8e 85       	ldd	r24, Y+14	; 0x0e
    3136:	9f 85       	ldd	r25, Y+15	; 0x0f
    3138:	a8 89       	ldd	r26, Y+16	; 0x10
    313a:	b9 89       	ldd	r27, Y+17	; 0x11
    313c:	2a e0       	ldi	r18, 0x0A	; 10
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	40 e0       	ldi	r20, 0x00	; 0
    3142:	50 e0       	ldi	r21, 0x00	; 0
    3144:	bc 01       	movw	r22, r24
    3146:	cd 01       	movw	r24, r26
    3148:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <__udivmodsi4>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	8b 83       	std	Y+3, r24	; 0x03
		Array_Number[Counter] = DigitNumber + '0';
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	28 2f       	mov	r18, r24
    3156:	33 27       	eor	r19, r19
    3158:	27 fd       	sbrc	r18, 7
    315a:	30 95       	com	r19
    315c:	8b 81       	ldd	r24, Y+3	; 0x03
    315e:	48 2f       	mov	r20, r24
    3160:	40 5d       	subi	r20, 0xD0	; 208
    3162:	ce 01       	movw	r24, r28
    3164:	04 96       	adiw	r24, 0x04	; 4
    3166:	fc 01       	movw	r30, r24
    3168:	e2 0f       	add	r30, r18
    316a:	f3 1f       	adc	r31, r19
    316c:	40 83       	st	Z, r20
		Number /= 10;
    316e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3170:	9f 85       	ldd	r25, Y+15	; 0x0f
    3172:	a8 89       	ldd	r26, Y+16	; 0x10
    3174:	b9 89       	ldd	r27, Y+17	; 0x11
    3176:	2a e0       	ldi	r18, 0x0A	; 10
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	40 e0       	ldi	r20, 0x00	; 0
    317c:	50 e0       	ldi	r21, 0x00	; 0
    317e:	bc 01       	movw	r22, r24
    3180:	cd 01       	movw	r24, r26
    3182:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <__udivmodsi4>
    3186:	da 01       	movw	r26, r20
    3188:	c9 01       	movw	r24, r18
    318a:	8e 87       	std	Y+14, r24	; 0x0e
    318c:	9f 87       	std	Y+15, r25	; 0x0f
    318e:	a8 8b       	std	Y+16, r26	; 0x10
    3190:	b9 8b       	std	Y+17, r27	; 0x11
	}while(Number != 0);
    3192:	8e 85       	ldd	r24, Y+14	; 0x0e
    3194:	9f 85       	ldd	r25, Y+15	; 0x0f
    3196:	a8 89       	ldd	r26, Y+16	; 0x10
    3198:	b9 89       	ldd	r27, Y+17	; 0x11
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	a1 05       	cpc	r26, r1
    319e:	b1 05       	cpc	r27, r1
    31a0:	31 f6       	brne	.-116    	; 0x312e <LCD_VoidSendNumber+0x20>
	for(Display = Counter; Display >= 0; Display--)
    31a2:	8a 81       	ldd	r24, Y+2	; 0x02
    31a4:	89 83       	std	Y+1, r24	; 0x01
    31a6:	10 c0       	rjmp	.+32     	; 0x31c8 <LCD_VoidSendNumber+0xba>
	{
		LCD_VoidSendDataChar(Array_Number[Display]);
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	28 2f       	mov	r18, r24
    31ac:	33 27       	eor	r19, r19
    31ae:	27 fd       	sbrc	r18, 7
    31b0:	30 95       	com	r19
    31b2:	ce 01       	movw	r24, r28
    31b4:	04 96       	adiw	r24, 0x04	; 4
    31b6:	fc 01       	movw	r30, r24
    31b8:	e2 0f       	add	r30, r18
    31ba:	f3 1f       	adc	r31, r19
    31bc:	80 81       	ld	r24, Z
    31be:	0e 94 66 15 	call	0x2acc	; 0x2acc <LCD_VoidSendDataChar>
		Counter++;
		DigitNumber = Number % 10;
		Array_Number[Counter] = DigitNumber + '0';
		Number /= 10;
	}while(Number != 0);
	for(Display = Counter; Display >= 0; Display--)
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	81 50       	subi	r24, 0x01	; 1
    31c6:	89 83       	std	Y+1, r24	; 0x01
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	88 23       	and	r24, r24
    31cc:	6c f7       	brge	.-38     	; 0x31a8 <LCD_VoidSendNumber+0x9a>
	{
		LCD_VoidSendDataChar(Array_Number[Display]);
	}
}
    31ce:	61 96       	adiw	r28, 0x11	; 17
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	f8 94       	cli
    31d4:	de bf       	out	0x3e, r29	; 62
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	cd bf       	out	0x3d, r28	; 61
    31da:	cf 91       	pop	r28
    31dc:	df 91       	pop	r29
    31de:	08 95       	ret

000031e0 <LCD_VoidClear>:

void LCD_VoidClear(void)
{
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(0b0001);
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_VoidSendCommand>
}
    31ee:	cf 91       	pop	r28
    31f0:	df 91       	pop	r29
    31f2:	08 95       	ret

000031f4 <DC_VoidSetDir>:
#include "../Header/DC_Config.h"
#include "../Header/DC_Interface.h"
#include "../Header/DC_Private.h"

void DC_VoidSetDir(void)
{
    31f4:	df 93       	push	r29
    31f6:	cf 93       	push	r28
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinNumDir(DC_DDR,DC_LeftPin,Output_Pin);
    31fc:	83 e0       	ldi	r24, 0x03	; 3
    31fe:	60 e0       	ldi	r22, 0x00	; 0
    3200:	41 e0       	ldi	r20, 0x01	; 1
    3202:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <DIO_VoidSetPinNumDir>
	DIO_VoidSetPinNumDir(DC_DDR,DC_RightPin,Output_Pin);
    3206:	83 e0       	ldi	r24, 0x03	; 3
    3208:	61 e0       	ldi	r22, 0x01	; 1
    320a:	41 e0       	ldi	r20, 0x01	; 1
    320c:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <DIO_VoidSetPinNumDir>
}
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	08 95       	ret

00003216 <DC_VoidRouterRight>:
void DC_VoidRouterRight()
{
    3216:	df 93       	push	r29
    3218:	cf 93       	push	r28
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinNumValue(DC_Port,DC_LeftPin,Low_Pin);
    321e:	83 e0       	ldi	r24, 0x03	; 3
    3220:	60 e0       	ldi	r22, 0x00	; 0
    3222:	40 e0       	ldi	r20, 0x00	; 0
    3224:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
	DIO_VoidSetPinNumValue(DC_Port,DC_RightPin,High_Pin);
    3228:	83 e0       	ldi	r24, 0x03	; 3
    322a:	61 e0       	ldi	r22, 0x01	; 1
    322c:	41 e0       	ldi	r20, 0x01	; 1
    322e:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
}
    3232:	cf 91       	pop	r28
    3234:	df 91       	pop	r29
    3236:	08 95       	ret

00003238 <DC_VoidRouterLeft>:
void DC_VoidRouterLeft(void)
{
    3238:	df 93       	push	r29
    323a:	cf 93       	push	r28
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinNumValue(DC_Port,DC_RightPin,Low_Pin);
    3240:	83 e0       	ldi	r24, 0x03	; 3
    3242:	61 e0       	ldi	r22, 0x01	; 1
    3244:	40 e0       	ldi	r20, 0x00	; 0
    3246:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
	DIO_VoidSetPinNumValue(DC_Port,DC_LeftPin,High_Pin);
    324a:	83 e0       	ldi	r24, 0x03	; 3
    324c:	60 e0       	ldi	r22, 0x00	; 0
    324e:	41 e0       	ldi	r20, 0x01	; 1
    3250:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
}
    3254:	cf 91       	pop	r28
    3256:	df 91       	pop	r29
    3258:	08 95       	ret

0000325a <DC_VoidRouterStop>:
void DC_VoidRouterStop(void)
{
    325a:	df 93       	push	r29
    325c:	cf 93       	push	r28
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinNumValue(DC_Port,DC_RightPin,Low_Pin);
    3262:	83 e0       	ldi	r24, 0x03	; 3
    3264:	61 e0       	ldi	r22, 0x01	; 1
    3266:	40 e0       	ldi	r20, 0x00	; 0
    3268:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
	DIO_VoidSetPinNumValue(DC_Port,DC_LeftPin,Low_Pin);
    326c:	83 e0       	ldi	r24, 0x03	; 3
    326e:	60 e0       	ldi	r22, 0x00	; 0
    3270:	40 e0       	ldi	r20, 0x00	; 0
    3272:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
}
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <main>:

#include "Confige.h"


void main()
{
    327c:	0f 93       	push	r16
    327e:	1f 93       	push	r17
    3280:	df 93       	push	r29
    3282:	cf 93       	push	r28
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	c4 57       	subi	r28, 0x74	; 116
    328a:	d0 40       	sbci	r29, 0x00	; 0
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	cd bf       	out	0x3d, r28	; 61

	DIO_VoidSetPortDir(DIO_GroupB,Output_Pin);
    3296:	82 e0       	ldi	r24, 0x02	; 2
    3298:	61 e0       	ldi	r22, 0x01	; 1
    329a:	0e 94 14 11 	call	0x2228	; 0x2228 <DIO_VoidSetPortDir>
	DIO_VoidSetPinNumDir(LDR_Port,LDR_Pin,Input_Pin);//LDR
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	60 e0       	ldi	r22, 0x00	; 0
    32a2:	40 e0       	ldi	r20, 0x00	; 0
    32a4:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <DIO_VoidSetPinNumDir>
	DIO_VoidSetPinNumDir(DHT22_Port,DHT22_Pin,Input_Pin);//DHT22
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	61 e0       	ldi	r22, 0x01	; 1
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <DIO_VoidSetPinNumDir>
	DIO_VoidSetPinNumDir(Buzzer_Port,Buzzer_Pin,Output_Pin);//Buzzer
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	62 e0       	ldi	r22, 0x02	; 2
    32b6:	41 e0       	ldi	r20, 0x01	; 1
    32b8:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <DIO_VoidSetPinNumDir>
	DIO_VoidSetPinNumDir(LEDS_Port,LEDS_Pin,Output_Pin);//LEDS
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	63 e0       	ldi	r22, 0x03	; 3
    32c0:	41 e0       	ldi	r20, 0x01	; 1
    32c2:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <DIO_VoidSetPinNumDir>
	ADC_VoidInit();
    32c6:	0e 94 ef 11 	call	0x23de	; 0x23de <ADC_VoidInit>
	LCD_VoidInit();
    32ca:	0e 94 04 16 	call	0x2c08	; 0x2c08 <LCD_VoidInit>
	Servo_VoidInitD4();
    32ce:	0e 94 a2 12 	call	0x2544	; 0x2544 <Servo_VoidInitD4>
	servo_init();
    32d2:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <servo_init>
		static  u8  Used_Places = 0 ;
		static 	u16 Get_Light   = 0 ;
		static 	u16 Get_Temp    = 0 ;
		static  u8  New_Car     = 1 ;
		static  u8  Departing_Car = 1;
		u8 Get_IR1 = DIO_U8GetPinNumValue(IR_Port,IR1_Pin);
    32d6:	82 e0       	ldi	r24, 0x02	; 2
    32d8:	67 e0       	ldi	r22, 0x07	; 7
    32da:	0e 94 88 10 	call	0x2110	; 0x2110 <DIO_U8GetPinNumValue>
    32de:	fe 01       	movw	r30, r28
    32e0:	ec 58       	subi	r30, 0x8C	; 140
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	80 83       	st	Z, r24
		u8 Get_IR2 = DIO_U8GetPinNumValue(IR_Port,IR2_Pin);
    32e6:	82 e0       	ldi	r24, 0x02	; 2
    32e8:	66 e0       	ldi	r22, 0x06	; 6
    32ea:	0e 94 88 10 	call	0x2110	; 0x2110 <DIO_U8GetPinNumValue>
    32ee:	fe 01       	movw	r30, r28
    32f0:	ed 58       	subi	r30, 0x8D	; 141
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	80 83       	st	Z, r24
		u8 Get_IR3 = DIO_U8GetPinNumValue(IR_Port,IR3_Pin);
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	65 e0       	ldi	r22, 0x05	; 5
    32fa:	0e 94 88 10 	call	0x2110	; 0x2110 <DIO_U8GetPinNumValue>
    32fe:	fe 01       	movw	r30, r28
    3300:	ee 58       	subi	r30, 0x8E	; 142
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	80 83       	st	Z, r24
		u8 Get_IR4 = DIO_U8GetPinNumValue(IR_Port,IR4_Pin);
    3306:	82 e0       	ldi	r24, 0x02	; 2
    3308:	64 e0       	ldi	r22, 0x04	; 4
    330a:	0e 94 88 10 	call	0x2110	; 0x2110 <DIO_U8GetPinNumValue>
    330e:	fe 01       	movw	r30, r28
    3310:	ef 58       	subi	r30, 0x8F	; 143
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	80 83       	st	Z, r24
		//LCD display Available barking
		LCD_VoidSendDataString(" Available ");
    3316:	80 e6       	ldi	r24, 0x60	; 96
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <LCD_VoidSendDataString>
		LCD_VoidSendNumber(All_Places - Used_Places);
    331e:	80 91 83 01 	lds	r24, 0x0183
    3322:	28 2f       	mov	r18, r24
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	80 91 9e 01 	lds	r24, 0x019E
    332a:	88 2f       	mov	r24, r24
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	a9 01       	movw	r20, r18
    3330:	48 1b       	sub	r20, r24
    3332:	59 0b       	sbc	r21, r25
    3334:	ca 01       	movw	r24, r20
    3336:	aa 27       	eor	r26, r26
    3338:	97 fd       	sbrc	r25, 7
    333a:	a0 95       	com	r26
    333c:	ba 2f       	mov	r27, r26
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_VoidSendNumber>
		//LCD display degree of temprature
		LCD_VoidGoToXY(1,0);
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	60 e0       	ldi	r22, 0x00	; 0
    334a:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_VoidGoToXY>
		LCD_VoidSendDataString("Temperature ");
    334e:	8c e6       	ldi	r24, 0x6C	; 108
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <LCD_VoidSendDataString>
		LCD_VoidSendNumber(Get_Temp);
    3356:	80 91 9a 01 	lds	r24, 0x019A
    335a:	90 91 9b 01 	lds	r25, 0x019B
    335e:	cc 01       	movw	r24, r24
    3360:	a0 e0       	ldi	r26, 0x00	; 0
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	bc 01       	movw	r22, r24
    3366:	cd 01       	movw	r24, r26
    3368:	0e 94 87 18 	call	0x310e	; 0x310e <LCD_VoidSendNumber>

		Get_Light = ADC_U8GetChannelReading(ADC0);
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	0e 94 20 12 	call	0x2440	; 0x2440 <ADC_U8GetChannelReading>
    3372:	88 2f       	mov	r24, r24
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	90 93 9d 01 	sts	0x019D, r25
    337a:	80 93 9c 01 	sts	0x019C, r24
		Get_Temp  = LM35_U8GetChannelReading(ADC1)/3;
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	0e 94 55 12 	call	0x24aa	; 0x24aa <LM35_U8GetChannelReading>
    3384:	93 e0       	ldi	r25, 0x03	; 3
    3386:	69 2f       	mov	r22, r25
    3388:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__udivmodqi4>
    338c:	88 2f       	mov	r24, r24
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	90 93 9b 01 	sts	0x019B, r25
    3394:	80 93 9a 01 	sts	0x019A, r24
		//if IR Sensor 1 read movement And there are available places , the Servo 1 will open the door
		if(Get_IR1 == 0 &&  Used_Places < All_Places)
    3398:	fe 01       	movw	r30, r28
    339a:	ec 58       	subi	r30, 0x8C	; 140
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	80 81       	ld	r24, Z
    33a0:	88 23       	and	r24, r24
    33a2:	09 f0       	breq	.+2      	; 0x33a6 <main+0x12a>
    33a4:	be c0       	rjmp	.+380    	; 0x3522 <main+0x2a6>
    33a6:	90 91 9e 01 	lds	r25, 0x019E
    33aa:	80 91 83 01 	lds	r24, 0x0183
    33ae:	98 17       	cp	r25, r24
    33b0:	08 f0       	brcs	.+2      	; 0x33b4 <main+0x138>
    33b2:	b7 c0       	rjmp	.+366    	; 0x3522 <main+0x2a6>
		{
			Servo_VoidRotateAngleD4(90);
    33b4:	8a e5       	ldi	r24, 0x5A	; 90
    33b6:	0e 94 b5 12 	call	0x256a	; 0x256a <Servo_VoidRotateAngleD4>
    33ba:	fe 01       	movw	r30, r28
    33bc:	e3 59       	subi	r30, 0x93	; 147
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	a8 e4       	ldi	r26, 0x48	; 72
    33c6:	b3 e4       	ldi	r27, 0x43	; 67
    33c8:	80 83       	st	Z, r24
    33ca:	91 83       	std	Z+1, r25	; 0x01
    33cc:	a2 83       	std	Z+2, r26	; 0x02
    33ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d0:	8e 01       	movw	r16, r28
    33d2:	07 59       	subi	r16, 0x97	; 151
    33d4:	1f 4f       	sbci	r17, 0xFF	; 255
    33d6:	fe 01       	movw	r30, r28
    33d8:	e3 59       	subi	r30, 0x93	; 147
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	60 81       	ld	r22, Z
    33de:	71 81       	ldd	r23, Z+1	; 0x01
    33e0:	82 81       	ldd	r24, Z+2	; 0x02
    33e2:	93 81       	ldd	r25, Z+3	; 0x03
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	4a ef       	ldi	r20, 0xFA	; 250
    33ea:	54 e4       	ldi	r21, 0x44	; 68
    33ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	f8 01       	movw	r30, r16
    33f6:	80 83       	st	Z, r24
    33f8:	91 83       	std	Z+1, r25	; 0x01
    33fa:	a2 83       	std	Z+2, r26	; 0x02
    33fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33fe:	fe 01       	movw	r30, r28
    3400:	e7 59       	subi	r30, 0x97	; 151
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	60 81       	ld	r22, Z
    3406:	71 81       	ldd	r23, Z+1	; 0x01
    3408:	82 81       	ldd	r24, Z+2	; 0x02
    340a:	93 81       	ldd	r25, Z+3	; 0x03
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	40 e8       	ldi	r20, 0x80	; 128
    3412:	5f e3       	ldi	r21, 0x3F	; 63
    3414:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3418:	88 23       	and	r24, r24
    341a:	44 f4       	brge	.+16     	; 0x342c <main+0x1b0>
		__ticks = 1;
    341c:	fe 01       	movw	r30, r28
    341e:	e9 59       	subi	r30, 0x99	; 153
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	91 83       	std	Z+1, r25	; 0x01
    3428:	80 83       	st	Z, r24
    342a:	64 c0       	rjmp	.+200    	; 0x34f4 <main+0x278>
	else if (__tmp > 65535)
    342c:	fe 01       	movw	r30, r28
    342e:	e7 59       	subi	r30, 0x97	; 151
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	60 81       	ld	r22, Z
    3434:	71 81       	ldd	r23, Z+1	; 0x01
    3436:	82 81       	ldd	r24, Z+2	; 0x02
    3438:	93 81       	ldd	r25, Z+3	; 0x03
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	3f ef       	ldi	r19, 0xFF	; 255
    343e:	4f e7       	ldi	r20, 0x7F	; 127
    3440:	57 e4       	ldi	r21, 0x47	; 71
    3442:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3446:	18 16       	cp	r1, r24
    3448:	0c f0       	brlt	.+2      	; 0x344c <main+0x1d0>
    344a:	43 c0       	rjmp	.+134    	; 0x34d2 <main+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    344c:	fe 01       	movw	r30, r28
    344e:	e3 59       	subi	r30, 0x93	; 147
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	60 81       	ld	r22, Z
    3454:	71 81       	ldd	r23, Z+1	; 0x01
    3456:	82 81       	ldd	r24, Z+2	; 0x02
    3458:	93 81       	ldd	r25, Z+3	; 0x03
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	40 e2       	ldi	r20, 0x20	; 32
    3460:	51 e4       	ldi	r21, 0x41	; 65
    3462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	8e 01       	movw	r16, r28
    346c:	09 59       	subi	r16, 0x99	; 153
    346e:	1f 4f       	sbci	r17, 0xFF	; 255
    3470:	bc 01       	movw	r22, r24
    3472:	cd 01       	movw	r24, r26
    3474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	f8 01       	movw	r30, r16
    347e:	91 83       	std	Z+1, r25	; 0x01
    3480:	80 83       	st	Z, r24
    3482:	1f c0       	rjmp	.+62     	; 0x34c2 <main+0x246>
    3484:	fe 01       	movw	r30, r28
    3486:	eb 59       	subi	r30, 0x9B	; 155
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	88 ec       	ldi	r24, 0xC8	; 200
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	91 83       	std	Z+1, r25	; 0x01
    3490:	80 83       	st	Z, r24
    3492:	fe 01       	movw	r30, r28
    3494:	eb 59       	subi	r30, 0x9B	; 155
    3496:	ff 4f       	sbci	r31, 0xFF	; 255
    3498:	80 81       	ld	r24, Z
    349a:	91 81       	ldd	r25, Z+1	; 0x01
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <main+0x220>
    34a0:	fe 01       	movw	r30, r28
    34a2:	eb 59       	subi	r30, 0x9B	; 155
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	91 83       	std	Z+1, r25	; 0x01
    34a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34aa:	de 01       	movw	r26, r28
    34ac:	a9 59       	subi	r26, 0x99	; 153
    34ae:	bf 4f       	sbci	r27, 0xFF	; 255
    34b0:	fe 01       	movw	r30, r28
    34b2:	e9 59       	subi	r30, 0x99	; 153
    34b4:	ff 4f       	sbci	r31, 0xFF	; 255
    34b6:	80 81       	ld	r24, Z
    34b8:	91 81       	ldd	r25, Z+1	; 0x01
    34ba:	01 97       	sbiw	r24, 0x01	; 1
    34bc:	11 96       	adiw	r26, 0x01	; 1
    34be:	9c 93       	st	X, r25
    34c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c2:	fe 01       	movw	r30, r28
    34c4:	e9 59       	subi	r30, 0x99	; 153
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	80 81       	ld	r24, Z
    34ca:	91 81       	ldd	r25, Z+1	; 0x01
    34cc:	00 97       	sbiw	r24, 0x00	; 0
    34ce:	d1 f6       	brne	.-76     	; 0x3484 <main+0x208>
    34d0:	28 c0       	rjmp	.+80     	; 0x3522 <main+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d2:	8e 01       	movw	r16, r28
    34d4:	09 59       	subi	r16, 0x99	; 153
    34d6:	1f 4f       	sbci	r17, 0xFF	; 255
    34d8:	fe 01       	movw	r30, r28
    34da:	e7 59       	subi	r30, 0x97	; 151
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	60 81       	ld	r22, Z
    34e0:	71 81       	ldd	r23, Z+1	; 0x01
    34e2:	82 81       	ldd	r24, Z+2	; 0x02
    34e4:	93 81       	ldd	r25, Z+3	; 0x03
    34e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	f8 01       	movw	r30, r16
    34f0:	91 83       	std	Z+1, r25	; 0x01
    34f2:	80 83       	st	Z, r24
    34f4:	de 01       	movw	r26, r28
    34f6:	ad 59       	subi	r26, 0x9D	; 157
    34f8:	bf 4f       	sbci	r27, 0xFF	; 255
    34fa:	fe 01       	movw	r30, r28
    34fc:	e9 59       	subi	r30, 0x99	; 153
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	80 81       	ld	r24, Z
    3502:	91 81       	ldd	r25, Z+1	; 0x01
    3504:	11 96       	adiw	r26, 0x01	; 1
    3506:	9c 93       	st	X, r25
    3508:	8e 93       	st	-X, r24
    350a:	fe 01       	movw	r30, r28
    350c:	ed 59       	subi	r30, 0x9D	; 157
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	80 81       	ld	r24, Z
    3512:	91 81       	ldd	r25, Z+1	; 0x01
    3514:	01 97       	sbiw	r24, 0x01	; 1
    3516:	f1 f7       	brne	.-4      	; 0x3514 <main+0x298>
    3518:	fe 01       	movw	r30, r28
    351a:	ed 59       	subi	r30, 0x9D	; 157
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	91 83       	std	Z+1, r25	; 0x01
    3520:	80 83       	st	Z, r24
			_delay_ms(200);
		}
		//If IR sensor 2 read movement The Servo 1 will close the door & LCD count available less 1
		if(Get_IR2 == 0) {
    3522:	fe 01       	movw	r30, r28
    3524:	ed 58       	subi	r30, 0x8D	; 141
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 81       	ld	r24, Z
    352a:	88 23       	and	r24, r24
    352c:	09 f0       	breq	.+2      	; 0x3530 <main+0x2b4>
    352e:	c8 c0       	rjmp	.+400    	; 0x36c0 <main+0x444>
    3530:	fe 01       	movw	r30, r28
    3532:	e1 5a       	subi	r30, 0xA1	; 161
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	a8 e4       	ldi	r26, 0x48	; 72
    353c:	b3 e4       	ldi	r27, 0x43	; 67
    353e:	80 83       	st	Z, r24
    3540:	91 83       	std	Z+1, r25	; 0x01
    3542:	a2 83       	std	Z+2, r26	; 0x02
    3544:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3546:	8e 01       	movw	r16, r28
    3548:	05 5a       	subi	r16, 0xA5	; 165
    354a:	1f 4f       	sbci	r17, 0xFF	; 255
    354c:	fe 01       	movw	r30, r28
    354e:	e1 5a       	subi	r30, 0xA1	; 161
    3550:	ff 4f       	sbci	r31, 0xFF	; 255
    3552:	60 81       	ld	r22, Z
    3554:	71 81       	ldd	r23, Z+1	; 0x01
    3556:	82 81       	ldd	r24, Z+2	; 0x02
    3558:	93 81       	ldd	r25, Z+3	; 0x03
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	4a ef       	ldi	r20, 0xFA	; 250
    3560:	54 e4       	ldi	r21, 0x44	; 68
    3562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	f8 01       	movw	r30, r16
    356c:	80 83       	st	Z, r24
    356e:	91 83       	std	Z+1, r25	; 0x01
    3570:	a2 83       	std	Z+2, r26	; 0x02
    3572:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3574:	fe 01       	movw	r30, r28
    3576:	e5 5a       	subi	r30, 0xA5	; 165
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	60 81       	ld	r22, Z
    357c:	71 81       	ldd	r23, Z+1	; 0x01
    357e:	82 81       	ldd	r24, Z+2	; 0x02
    3580:	93 81       	ldd	r25, Z+3	; 0x03
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e8       	ldi	r20, 0x80	; 128
    3588:	5f e3       	ldi	r21, 0x3F	; 63
    358a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    358e:	88 23       	and	r24, r24
    3590:	44 f4       	brge	.+16     	; 0x35a2 <main+0x326>
		__ticks = 1;
    3592:	fe 01       	movw	r30, r28
    3594:	e7 5a       	subi	r30, 0xA7	; 167
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	91 83       	std	Z+1, r25	; 0x01
    359e:	80 83       	st	Z, r24
    35a0:	64 c0       	rjmp	.+200    	; 0x366a <main+0x3ee>
	else if (__tmp > 65535)
    35a2:	fe 01       	movw	r30, r28
    35a4:	e5 5a       	subi	r30, 0xA5	; 165
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	60 81       	ld	r22, Z
    35aa:	71 81       	ldd	r23, Z+1	; 0x01
    35ac:	82 81       	ldd	r24, Z+2	; 0x02
    35ae:	93 81       	ldd	r25, Z+3	; 0x03
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	3f ef       	ldi	r19, 0xFF	; 255
    35b4:	4f e7       	ldi	r20, 0x7F	; 127
    35b6:	57 e4       	ldi	r21, 0x47	; 71
    35b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35bc:	18 16       	cp	r1, r24
    35be:	0c f0       	brlt	.+2      	; 0x35c2 <main+0x346>
    35c0:	43 c0       	rjmp	.+134    	; 0x3648 <main+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c2:	fe 01       	movw	r30, r28
    35c4:	e1 5a       	subi	r30, 0xA1	; 161
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	60 81       	ld	r22, Z
    35ca:	71 81       	ldd	r23, Z+1	; 0x01
    35cc:	82 81       	ldd	r24, Z+2	; 0x02
    35ce:	93 81       	ldd	r25, Z+3	; 0x03
    35d0:	20 e0       	ldi	r18, 0x00	; 0
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	40 e2       	ldi	r20, 0x20	; 32
    35d6:	51 e4       	ldi	r21, 0x41	; 65
    35d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	8e 01       	movw	r16, r28
    35e2:	07 5a       	subi	r16, 0xA7	; 167
    35e4:	1f 4f       	sbci	r17, 0xFF	; 255
    35e6:	bc 01       	movw	r22, r24
    35e8:	cd 01       	movw	r24, r26
    35ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	f8 01       	movw	r30, r16
    35f4:	91 83       	std	Z+1, r25	; 0x01
    35f6:	80 83       	st	Z, r24
    35f8:	1f c0       	rjmp	.+62     	; 0x3638 <main+0x3bc>
    35fa:	fe 01       	movw	r30, r28
    35fc:	e9 5a       	subi	r30, 0xA9	; 169
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	88 ec       	ldi	r24, 0xC8	; 200
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	91 83       	std	Z+1, r25	; 0x01
    3606:	80 83       	st	Z, r24
    3608:	fe 01       	movw	r30, r28
    360a:	e9 5a       	subi	r30, 0xA9	; 169
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	80 81       	ld	r24, Z
    3610:	91 81       	ldd	r25, Z+1	; 0x01
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	f1 f7       	brne	.-4      	; 0x3612 <main+0x396>
    3616:	fe 01       	movw	r30, r28
    3618:	e9 5a       	subi	r30, 0xA9	; 169
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	91 83       	std	Z+1, r25	; 0x01
    361e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3620:	de 01       	movw	r26, r28
    3622:	a7 5a       	subi	r26, 0xA7	; 167
    3624:	bf 4f       	sbci	r27, 0xFF	; 255
    3626:	fe 01       	movw	r30, r28
    3628:	e7 5a       	subi	r30, 0xA7	; 167
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	80 81       	ld	r24, Z
    362e:	91 81       	ldd	r25, Z+1	; 0x01
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	11 96       	adiw	r26, 0x01	; 1
    3634:	9c 93       	st	X, r25
    3636:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3638:	fe 01       	movw	r30, r28
    363a:	e7 5a       	subi	r30, 0xA7	; 167
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	80 81       	ld	r24, Z
    3640:	91 81       	ldd	r25, Z+1	; 0x01
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	d1 f6       	brne	.-76     	; 0x35fa <main+0x37e>
    3646:	27 c0       	rjmp	.+78     	; 0x3696 <main+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3648:	8e 01       	movw	r16, r28
    364a:	07 5a       	subi	r16, 0xA7	; 167
    364c:	1f 4f       	sbci	r17, 0xFF	; 255
    364e:	fe 01       	movw	r30, r28
    3650:	e5 5a       	subi	r30, 0xA5	; 165
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	60 81       	ld	r22, Z
    3656:	71 81       	ldd	r23, Z+1	; 0x01
    3658:	82 81       	ldd	r24, Z+2	; 0x02
    365a:	93 81       	ldd	r25, Z+3	; 0x03
    365c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3660:	dc 01       	movw	r26, r24
    3662:	cb 01       	movw	r24, r22
    3664:	f8 01       	movw	r30, r16
    3666:	91 83       	std	Z+1, r25	; 0x01
    3668:	80 83       	st	Z, r24
    366a:	de 01       	movw	r26, r28
    366c:	ab 5a       	subi	r26, 0xAB	; 171
    366e:	bf 4f       	sbci	r27, 0xFF	; 255
    3670:	fe 01       	movw	r30, r28
    3672:	e7 5a       	subi	r30, 0xA7	; 167
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	80 81       	ld	r24, Z
    3678:	91 81       	ldd	r25, Z+1	; 0x01
    367a:	8d 93       	st	X+, r24
    367c:	9c 93       	st	X, r25
    367e:	fe 01       	movw	r30, r28
    3680:	eb 5a       	subi	r30, 0xAB	; 171
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	80 81       	ld	r24, Z
    3686:	91 81       	ldd	r25, Z+1	; 0x01
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	f1 f7       	brne	.-4      	; 0x3688 <main+0x40c>
    368c:	fe 01       	movw	r30, r28
    368e:	eb 5a       	subi	r30, 0xAB	; 171
    3690:	ff 4f       	sbci	r31, 0xFF	; 255
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	80 83       	st	Z, r24
			_delay_ms(200);
			Servo_VoidRotateAngleD4(0);
    3696:	80 e0       	ldi	r24, 0x00	; 0
    3698:	0e 94 b5 12 	call	0x256a	; 0x256a <Servo_VoidRotateAngleD4>
			if(New_Car == 1 && Used_Places < All_Places) {
    369c:	80 91 82 01 	lds	r24, 0x0182
    36a0:	81 30       	cpi	r24, 0x01	; 1
    36a2:	89 f4       	brne	.+34     	; 0x36c6 <main+0x44a>
    36a4:	90 91 9e 01 	lds	r25, 0x019E
    36a8:	80 91 83 01 	lds	r24, 0x0183
    36ac:	98 17       	cp	r25, r24
    36ae:	58 f4       	brcc	.+22     	; 0x36c6 <main+0x44a>
				Used_Places++;
    36b0:	80 91 9e 01 	lds	r24, 0x019E
    36b4:	8f 5f       	subi	r24, 0xFF	; 255
    36b6:	80 93 9e 01 	sts	0x019E, r24
				New_Car = 0 ;
    36ba:	10 92 82 01 	sts	0x0182, r1
    36be:	03 c0       	rjmp	.+6      	; 0x36c6 <main+0x44a>
			}


		} else {
			New_Car = 1 ;
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	80 93 82 01 	sts	0x0182, r24
		}
		//if IR Sensor 3 read movement , the Servo 2 will open the door
		if(Get_IR3 == 0 && Used_Places > 0)
    36c6:	fe 01       	movw	r30, r28
    36c8:	ee 58       	subi	r30, 0x8E	; 142
    36ca:	ff 4f       	sbci	r31, 0xFF	; 255
    36cc:	80 81       	ld	r24, Z
    36ce:	88 23       	and	r24, r24
    36d0:	09 f0       	breq	.+2      	; 0x36d4 <main+0x458>
    36d2:	bd c0       	rjmp	.+378    	; 0x384e <main+0x5d2>
    36d4:	80 91 9e 01 	lds	r24, 0x019E
    36d8:	88 23       	and	r24, r24
    36da:	09 f4       	brne	.+2      	; 0x36de <main+0x462>
    36dc:	b8 c0       	rjmp	.+368    	; 0x384e <main+0x5d2>
		{
			servo_set_angle(0);
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	0e 94 01 13 	call	0x2602	; 0x2602 <servo_set_angle>
    36e6:	fe 01       	movw	r30, r28
    36e8:	ef 5a       	subi	r30, 0xAF	; 175
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	a8 e4       	ldi	r26, 0x48	; 72
    36f2:	b3 e4       	ldi	r27, 0x43	; 67
    36f4:	80 83       	st	Z, r24
    36f6:	91 83       	std	Z+1, r25	; 0x01
    36f8:	a2 83       	std	Z+2, r26	; 0x02
    36fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fc:	8e 01       	movw	r16, r28
    36fe:	03 5b       	subi	r16, 0xB3	; 179
    3700:	1f 4f       	sbci	r17, 0xFF	; 255
    3702:	fe 01       	movw	r30, r28
    3704:	ef 5a       	subi	r30, 0xAF	; 175
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	60 81       	ld	r22, Z
    370a:	71 81       	ldd	r23, Z+1	; 0x01
    370c:	82 81       	ldd	r24, Z+2	; 0x02
    370e:	93 81       	ldd	r25, Z+3	; 0x03
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	4a ef       	ldi	r20, 0xFA	; 250
    3716:	54 e4       	ldi	r21, 0x44	; 68
    3718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	f8 01       	movw	r30, r16
    3722:	80 83       	st	Z, r24
    3724:	91 83       	std	Z+1, r25	; 0x01
    3726:	a2 83       	std	Z+2, r26	; 0x02
    3728:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    372a:	fe 01       	movw	r30, r28
    372c:	e3 5b       	subi	r30, 0xB3	; 179
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	60 81       	ld	r22, Z
    3732:	71 81       	ldd	r23, Z+1	; 0x01
    3734:	82 81       	ldd	r24, Z+2	; 0x02
    3736:	93 81       	ldd	r25, Z+3	; 0x03
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	40 e8       	ldi	r20, 0x80	; 128
    373e:	5f e3       	ldi	r21, 0x3F	; 63
    3740:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3744:	88 23       	and	r24, r24
    3746:	44 f4       	brge	.+16     	; 0x3758 <main+0x4dc>
		__ticks = 1;
    3748:	fe 01       	movw	r30, r28
    374a:	e5 5b       	subi	r30, 0xB5	; 181
    374c:	ff 4f       	sbci	r31, 0xFF	; 255
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	91 83       	std	Z+1, r25	; 0x01
    3754:	80 83       	st	Z, r24
    3756:	64 c0       	rjmp	.+200    	; 0x3820 <main+0x5a4>
	else if (__tmp > 65535)
    3758:	fe 01       	movw	r30, r28
    375a:	e3 5b       	subi	r30, 0xB3	; 179
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	60 81       	ld	r22, Z
    3760:	71 81       	ldd	r23, Z+1	; 0x01
    3762:	82 81       	ldd	r24, Z+2	; 0x02
    3764:	93 81       	ldd	r25, Z+3	; 0x03
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	3f ef       	ldi	r19, 0xFF	; 255
    376a:	4f e7       	ldi	r20, 0x7F	; 127
    376c:	57 e4       	ldi	r21, 0x47	; 71
    376e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3772:	18 16       	cp	r1, r24
    3774:	0c f0       	brlt	.+2      	; 0x3778 <main+0x4fc>
    3776:	43 c0       	rjmp	.+134    	; 0x37fe <main+0x582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3778:	fe 01       	movw	r30, r28
    377a:	ef 5a       	subi	r30, 0xAF	; 175
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	60 81       	ld	r22, Z
    3780:	71 81       	ldd	r23, Z+1	; 0x01
    3782:	82 81       	ldd	r24, Z+2	; 0x02
    3784:	93 81       	ldd	r25, Z+3	; 0x03
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	40 e2       	ldi	r20, 0x20	; 32
    378c:	51 e4       	ldi	r21, 0x41	; 65
    378e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	8e 01       	movw	r16, r28
    3798:	05 5b       	subi	r16, 0xB5	; 181
    379a:	1f 4f       	sbci	r17, 0xFF	; 255
    379c:	bc 01       	movw	r22, r24
    379e:	cd 01       	movw	r24, r26
    37a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	f8 01       	movw	r30, r16
    37aa:	91 83       	std	Z+1, r25	; 0x01
    37ac:	80 83       	st	Z, r24
    37ae:	1f c0       	rjmp	.+62     	; 0x37ee <main+0x572>
    37b0:	fe 01       	movw	r30, r28
    37b2:	e7 5b       	subi	r30, 0xB7	; 183
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	88 ec       	ldi	r24, 0xC8	; 200
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	91 83       	std	Z+1, r25	; 0x01
    37bc:	80 83       	st	Z, r24
    37be:	fe 01       	movw	r30, r28
    37c0:	e7 5b       	subi	r30, 0xB7	; 183
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	80 81       	ld	r24, Z
    37c6:	91 81       	ldd	r25, Z+1	; 0x01
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	f1 f7       	brne	.-4      	; 0x37c8 <main+0x54c>
    37cc:	fe 01       	movw	r30, r28
    37ce:	e7 5b       	subi	r30, 0xB7	; 183
    37d0:	ff 4f       	sbci	r31, 0xFF	; 255
    37d2:	91 83       	std	Z+1, r25	; 0x01
    37d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d6:	de 01       	movw	r26, r28
    37d8:	a5 5b       	subi	r26, 0xB5	; 181
    37da:	bf 4f       	sbci	r27, 0xFF	; 255
    37dc:	fe 01       	movw	r30, r28
    37de:	e5 5b       	subi	r30, 0xB5	; 181
    37e0:	ff 4f       	sbci	r31, 0xFF	; 255
    37e2:	80 81       	ld	r24, Z
    37e4:	91 81       	ldd	r25, Z+1	; 0x01
    37e6:	01 97       	sbiw	r24, 0x01	; 1
    37e8:	11 96       	adiw	r26, 0x01	; 1
    37ea:	9c 93       	st	X, r25
    37ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ee:	fe 01       	movw	r30, r28
    37f0:	e5 5b       	subi	r30, 0xB5	; 181
    37f2:	ff 4f       	sbci	r31, 0xFF	; 255
    37f4:	80 81       	ld	r24, Z
    37f6:	91 81       	ldd	r25, Z+1	; 0x01
    37f8:	00 97       	sbiw	r24, 0x00	; 0
    37fa:	d1 f6       	brne	.-76     	; 0x37b0 <main+0x534>
    37fc:	28 c0       	rjmp	.+80     	; 0x384e <main+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37fe:	8e 01       	movw	r16, r28
    3800:	05 5b       	subi	r16, 0xB5	; 181
    3802:	1f 4f       	sbci	r17, 0xFF	; 255
    3804:	fe 01       	movw	r30, r28
    3806:	e3 5b       	subi	r30, 0xB3	; 179
    3808:	ff 4f       	sbci	r31, 0xFF	; 255
    380a:	60 81       	ld	r22, Z
    380c:	71 81       	ldd	r23, Z+1	; 0x01
    380e:	82 81       	ldd	r24, Z+2	; 0x02
    3810:	93 81       	ldd	r25, Z+3	; 0x03
    3812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	f8 01       	movw	r30, r16
    381c:	91 83       	std	Z+1, r25	; 0x01
    381e:	80 83       	st	Z, r24
    3820:	de 01       	movw	r26, r28
    3822:	a9 5b       	subi	r26, 0xB9	; 185
    3824:	bf 4f       	sbci	r27, 0xFF	; 255
    3826:	fe 01       	movw	r30, r28
    3828:	e5 5b       	subi	r30, 0xB5	; 181
    382a:	ff 4f       	sbci	r31, 0xFF	; 255
    382c:	80 81       	ld	r24, Z
    382e:	91 81       	ldd	r25, Z+1	; 0x01
    3830:	11 96       	adiw	r26, 0x01	; 1
    3832:	9c 93       	st	X, r25
    3834:	8e 93       	st	-X, r24
    3836:	fe 01       	movw	r30, r28
    3838:	e9 5b       	subi	r30, 0xB9	; 185
    383a:	ff 4f       	sbci	r31, 0xFF	; 255
    383c:	80 81       	ld	r24, Z
    383e:	91 81       	ldd	r25, Z+1	; 0x01
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	f1 f7       	brne	.-4      	; 0x3840 <main+0x5c4>
    3844:	fe 01       	movw	r30, r28
    3846:	e9 5b       	subi	r30, 0xB9	; 185
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	91 83       	std	Z+1, r25	; 0x01
    384c:	80 83       	st	Z, r24
			_delay_ms(200);
		}
		//If IR sensor 4 read movement The Servo 2 will close the door & LCD count available more 1
		if(Get_IR4 == 0) {
    384e:	fe 01       	movw	r30, r28
    3850:	ef 58       	subi	r30, 0x8F	; 143
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	80 81       	ld	r24, Z
    3856:	88 23       	and	r24, r24
    3858:	09 f0       	breq	.+2      	; 0x385c <main+0x5e0>
    385a:	99 c0       	rjmp	.+306    	; 0x398e <main+0x712>
    385c:	fe 01       	movw	r30, r28
    385e:	ed 5b       	subi	r30, 0xBD	; 189
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	a8 e4       	ldi	r26, 0x48	; 72
    3868:	b3 e4       	ldi	r27, 0x43	; 67
    386a:	80 83       	st	Z, r24
    386c:	91 83       	std	Z+1, r25	; 0x01
    386e:	a2 83       	std	Z+2, r26	; 0x02
    3870:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3872:	8e 01       	movw	r16, r28
    3874:	01 5c       	subi	r16, 0xC1	; 193
    3876:	1f 4f       	sbci	r17, 0xFF	; 255
    3878:	fe 01       	movw	r30, r28
    387a:	ed 5b       	subi	r30, 0xBD	; 189
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	60 81       	ld	r22, Z
    3880:	71 81       	ldd	r23, Z+1	; 0x01
    3882:	82 81       	ldd	r24, Z+2	; 0x02
    3884:	93 81       	ldd	r25, Z+3	; 0x03
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	4a ef       	ldi	r20, 0xFA	; 250
    388c:	54 e4       	ldi	r21, 0x44	; 68
    388e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3892:	dc 01       	movw	r26, r24
    3894:	cb 01       	movw	r24, r22
    3896:	f8 01       	movw	r30, r16
    3898:	80 83       	st	Z, r24
    389a:	91 83       	std	Z+1, r25	; 0x01
    389c:	a2 83       	std	Z+2, r26	; 0x02
    389e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38a0:	fe 01       	movw	r30, r28
    38a2:	ff 96       	adiw	r30, 0x3f	; 63
    38a4:	60 81       	ld	r22, Z
    38a6:	71 81       	ldd	r23, Z+1	; 0x01
    38a8:	82 81       	ldd	r24, Z+2	; 0x02
    38aa:	93 81       	ldd	r25, Z+3	; 0x03
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	40 e8       	ldi	r20, 0x80	; 128
    38b2:	5f e3       	ldi	r21, 0x3F	; 63
    38b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38b8:	88 23       	and	r24, r24
    38ba:	2c f4       	brge	.+10     	; 0x38c6 <main+0x64a>
		__ticks = 1;
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	9e af       	std	Y+62, r25	; 0x3e
    38c2:	8d af       	std	Y+61, r24	; 0x3d
    38c4:	46 c0       	rjmp	.+140    	; 0x3952 <main+0x6d6>
	else if (__tmp > 65535)
    38c6:	fe 01       	movw	r30, r28
    38c8:	ff 96       	adiw	r30, 0x3f	; 63
    38ca:	60 81       	ld	r22, Z
    38cc:	71 81       	ldd	r23, Z+1	; 0x01
    38ce:	82 81       	ldd	r24, Z+2	; 0x02
    38d0:	93 81       	ldd	r25, Z+3	; 0x03
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	3f ef       	ldi	r19, 0xFF	; 255
    38d6:	4f e7       	ldi	r20, 0x7F	; 127
    38d8:	57 e4       	ldi	r21, 0x47	; 71
    38da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38de:	18 16       	cp	r1, r24
    38e0:	64 f5       	brge	.+88     	; 0x393a <main+0x6be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38e2:	fe 01       	movw	r30, r28
    38e4:	ed 5b       	subi	r30, 0xBD	; 189
    38e6:	ff 4f       	sbci	r31, 0xFF	; 255
    38e8:	60 81       	ld	r22, Z
    38ea:	71 81       	ldd	r23, Z+1	; 0x01
    38ec:	82 81       	ldd	r24, Z+2	; 0x02
    38ee:	93 81       	ldd	r25, Z+3	; 0x03
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	40 e2       	ldi	r20, 0x20	; 32
    38f6:	51 e4       	ldi	r21, 0x41	; 65
    38f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fc:	dc 01       	movw	r26, r24
    38fe:	cb 01       	movw	r24, r22
    3900:	bc 01       	movw	r22, r24
    3902:	cd 01       	movw	r24, r26
    3904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	9e af       	std	Y+62, r25	; 0x3e
    390e:	8d af       	std	Y+61, r24	; 0x3d
    3910:	0f c0       	rjmp	.+30     	; 0x3930 <main+0x6b4>
    3912:	88 ec       	ldi	r24, 0xC8	; 200
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	9c af       	std	Y+60, r25	; 0x3c
    3918:	8b af       	std	Y+59, r24	; 0x3b
    391a:	8b ad       	ldd	r24, Y+59	; 0x3b
    391c:	9c ad       	ldd	r25, Y+60	; 0x3c
    391e:	01 97       	sbiw	r24, 0x01	; 1
    3920:	f1 f7       	brne	.-4      	; 0x391e <main+0x6a2>
    3922:	9c af       	std	Y+60, r25	; 0x3c
    3924:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3926:	8d ad       	ldd	r24, Y+61	; 0x3d
    3928:	9e ad       	ldd	r25, Y+62	; 0x3e
    392a:	01 97       	sbiw	r24, 0x01	; 1
    392c:	9e af       	std	Y+62, r25	; 0x3e
    392e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3930:	8d ad       	ldd	r24, Y+61	; 0x3d
    3932:	9e ad       	ldd	r25, Y+62	; 0x3e
    3934:	00 97       	sbiw	r24, 0x00	; 0
    3936:	69 f7       	brne	.-38     	; 0x3912 <main+0x696>
    3938:	16 c0       	rjmp	.+44     	; 0x3966 <main+0x6ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    393a:	fe 01       	movw	r30, r28
    393c:	ff 96       	adiw	r30, 0x3f	; 63
    393e:	60 81       	ld	r22, Z
    3940:	71 81       	ldd	r23, Z+1	; 0x01
    3942:	82 81       	ldd	r24, Z+2	; 0x02
    3944:	93 81       	ldd	r25, Z+3	; 0x03
    3946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	9e af       	std	Y+62, r25	; 0x3e
    3950:	8d af       	std	Y+61, r24	; 0x3d
    3952:	8d ad       	ldd	r24, Y+61	; 0x3d
    3954:	9e ad       	ldd	r25, Y+62	; 0x3e
    3956:	9a af       	std	Y+58, r25	; 0x3a
    3958:	89 af       	std	Y+57, r24	; 0x39
    395a:	89 ad       	ldd	r24, Y+57	; 0x39
    395c:	9a ad       	ldd	r25, Y+58	; 0x3a
    395e:	01 97       	sbiw	r24, 0x01	; 1
    3960:	f1 f7       	brne	.-4      	; 0x395e <main+0x6e2>
    3962:	9a af       	std	Y+58, r25	; 0x3a
    3964:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(200);
			servo_set_angle(90);
    3966:	8a e5       	ldi	r24, 0x5A	; 90
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	0e 94 01 13 	call	0x2602	; 0x2602 <servo_set_angle>
			if(Departing_Car == 1 && Used_Places > 0) {
    396e:	80 91 81 01 	lds	r24, 0x0181
    3972:	81 30       	cpi	r24, 0x01	; 1
    3974:	79 f4       	brne	.+30     	; 0x3994 <main+0x718>
    3976:	80 91 9e 01 	lds	r24, 0x019E
    397a:	88 23       	and	r24, r24
    397c:	59 f0       	breq	.+22     	; 0x3994 <main+0x718>
				Used_Places--;
    397e:	80 91 9e 01 	lds	r24, 0x019E
    3982:	81 50       	subi	r24, 0x01	; 1
    3984:	80 93 9e 01 	sts	0x019E, r24
				Departing_Car = 0 ;
    3988:	10 92 81 01 	sts	0x0181, r1
    398c:	03 c0       	rjmp	.+6      	; 0x3994 <main+0x718>
			}

		} else {
			Departing_Car = 1;
    398e:	81 e0       	ldi	r24, 0x01	; 1
    3990:	80 93 81 01 	sts	0x0181, r24
		}
		//If Light bigger than 150 Deg , LEDS will work
		if (Get_Light <150)
    3994:	80 91 9c 01 	lds	r24, 0x019C
    3998:	90 91 9d 01 	lds	r25, 0x019D
    399c:	86 39       	cpi	r24, 0x96	; 150
    399e:	91 05       	cpc	r25, r1
    39a0:	08 f0       	brcs	.+2      	; 0x39a4 <main+0x728>
    39a2:	78 c0       	rjmp	.+240    	; 0x3a94 <main+0x818>
		{
			DIO_VoidSetPinNumValue(LEDS_Port,LEDS_Pin,High_Pin);
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	63 e0       	ldi	r22, 0x03	; 3
    39a8:	41 e0       	ldi	r20, 0x01	; 1
    39aa:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
    39ae:	80 e0       	ldi	r24, 0x00	; 0
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	a8 e4       	ldi	r26, 0x48	; 72
    39b4:	b2 e4       	ldi	r27, 0x42	; 66
    39b6:	8d ab       	std	Y+53, r24	; 0x35
    39b8:	9e ab       	std	Y+54, r25	; 0x36
    39ba:	af ab       	std	Y+55, r26	; 0x37
    39bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39be:	6d a9       	ldd	r22, Y+53	; 0x35
    39c0:	7e a9       	ldd	r23, Y+54	; 0x36
    39c2:	8f a9       	ldd	r24, Y+55	; 0x37
    39c4:	98 ad       	ldd	r25, Y+56	; 0x38
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	4a ef       	ldi	r20, 0xFA	; 250
    39cc:	54 e4       	ldi	r21, 0x44	; 68
    39ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	89 ab       	std	Y+49, r24	; 0x31
    39d8:	9a ab       	std	Y+50, r25	; 0x32
    39da:	ab ab       	std	Y+51, r26	; 0x33
    39dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39de:	69 a9       	ldd	r22, Y+49	; 0x31
    39e0:	7a a9       	ldd	r23, Y+50	; 0x32
    39e2:	8b a9       	ldd	r24, Y+51	; 0x33
    39e4:	9c a9       	ldd	r25, Y+52	; 0x34
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	40 e8       	ldi	r20, 0x80	; 128
    39ec:	5f e3       	ldi	r21, 0x3F	; 63
    39ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39f2:	88 23       	and	r24, r24
    39f4:	2c f4       	brge	.+10     	; 0x3a00 <main+0x784>
		__ticks = 1;
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	98 ab       	std	Y+48, r25	; 0x30
    39fc:	8f a7       	std	Y+47, r24	; 0x2f
    39fe:	3f c0       	rjmp	.+126    	; 0x3a7e <main+0x802>
	else if (__tmp > 65535)
    3a00:	69 a9       	ldd	r22, Y+49	; 0x31
    3a02:	7a a9       	ldd	r23, Y+50	; 0x32
    3a04:	8b a9       	ldd	r24, Y+51	; 0x33
    3a06:	9c a9       	ldd	r25, Y+52	; 0x34
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	3f ef       	ldi	r19, 0xFF	; 255
    3a0c:	4f e7       	ldi	r20, 0x7F	; 127
    3a0e:	57 e4       	ldi	r21, 0x47	; 71
    3a10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a14:	18 16       	cp	r1, r24
    3a16:	4c f5       	brge	.+82     	; 0x3a6a <main+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a18:	6d a9       	ldd	r22, Y+53	; 0x35
    3a1a:	7e a9       	ldd	r23, Y+54	; 0x36
    3a1c:	8f a9       	ldd	r24, Y+55	; 0x37
    3a1e:	98 ad       	ldd	r25, Y+56	; 0x38
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	40 e2       	ldi	r20, 0x20	; 32
    3a26:	51 e4       	ldi	r21, 0x41	; 65
    3a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	bc 01       	movw	r22, r24
    3a32:	cd 01       	movw	r24, r26
    3a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	98 ab       	std	Y+48, r25	; 0x30
    3a3e:	8f a7       	std	Y+47, r24	; 0x2f
    3a40:	0f c0       	rjmp	.+30     	; 0x3a60 <main+0x7e4>
    3a42:	88 ec       	ldi	r24, 0xC8	; 200
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	9e a7       	std	Y+46, r25	; 0x2e
    3a48:	8d a7       	std	Y+45, r24	; 0x2d
    3a4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a4e:	01 97       	sbiw	r24, 0x01	; 1
    3a50:	f1 f7       	brne	.-4      	; 0x3a4e <main+0x7d2>
    3a52:	9e a7       	std	Y+46, r25	; 0x2e
    3a54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a56:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a58:	98 a9       	ldd	r25, Y+48	; 0x30
    3a5a:	01 97       	sbiw	r24, 0x01	; 1
    3a5c:	98 ab       	std	Y+48, r25	; 0x30
    3a5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a60:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a62:	98 a9       	ldd	r25, Y+48	; 0x30
    3a64:	00 97       	sbiw	r24, 0x00	; 0
    3a66:	69 f7       	brne	.-38     	; 0x3a42 <main+0x7c6>
    3a68:	94 c0       	rjmp	.+296    	; 0x3b92 <main+0x916>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a6a:	69 a9       	ldd	r22, Y+49	; 0x31
    3a6c:	7a a9       	ldd	r23, Y+50	; 0x32
    3a6e:	8b a9       	ldd	r24, Y+51	; 0x33
    3a70:	9c a9       	ldd	r25, Y+52	; 0x34
    3a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a76:	dc 01       	movw	r26, r24
    3a78:	cb 01       	movw	r24, r22
    3a7a:	98 ab       	std	Y+48, r25	; 0x30
    3a7c:	8f a7       	std	Y+47, r24	; 0x2f
    3a7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a80:	98 a9       	ldd	r25, Y+48	; 0x30
    3a82:	9c a7       	std	Y+44, r25	; 0x2c
    3a84:	8b a7       	std	Y+43, r24	; 0x2b
    3a86:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a88:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	f1 f7       	brne	.-4      	; 0x3a8a <main+0x80e>
    3a8e:	9c a7       	std	Y+44, r25	; 0x2c
    3a90:	8b a7       	std	Y+43, r24	; 0x2b
    3a92:	7f c0       	rjmp	.+254    	; 0x3b92 <main+0x916>
			_delay_ms(50);
		}
		else if (Get_Light >=150)
    3a94:	80 91 9c 01 	lds	r24, 0x019C
    3a98:	90 91 9d 01 	lds	r25, 0x019D
    3a9c:	86 39       	cpi	r24, 0x96	; 150
    3a9e:	91 05       	cpc	r25, r1
    3aa0:	08 f4       	brcc	.+2      	; 0x3aa4 <main+0x828>
    3aa2:	77 c0       	rjmp	.+238    	; 0x3b92 <main+0x916>
		{
			DIO_VoidSetPinNumValue(LEDS_Port,LEDS_Pin,Low_Pin);
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	63 e0       	ldi	r22, 0x03	; 3
    3aa8:	40 e0       	ldi	r20, 0x00	; 0
    3aaa:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	a8 e4       	ldi	r26, 0x48	; 72
    3ab4:	b2 e4       	ldi	r27, 0x42	; 66
    3ab6:	8f a3       	std	Y+39, r24	; 0x27
    3ab8:	98 a7       	std	Y+40, r25	; 0x28
    3aba:	a9 a7       	std	Y+41, r26	; 0x29
    3abc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3abe:	6f a1       	ldd	r22, Y+39	; 0x27
    3ac0:	78 a5       	ldd	r23, Y+40	; 0x28
    3ac2:	89 a5       	ldd	r24, Y+41	; 0x29
    3ac4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	4a ef       	ldi	r20, 0xFA	; 250
    3acc:	54 e4       	ldi	r21, 0x44	; 68
    3ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	8b a3       	std	Y+35, r24	; 0x23
    3ad8:	9c a3       	std	Y+36, r25	; 0x24
    3ada:	ad a3       	std	Y+37, r26	; 0x25
    3adc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ade:	6b a1       	ldd	r22, Y+35	; 0x23
    3ae0:	7c a1       	ldd	r23, Y+36	; 0x24
    3ae2:	8d a1       	ldd	r24, Y+37	; 0x25
    3ae4:	9e a1       	ldd	r25, Y+38	; 0x26
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	40 e8       	ldi	r20, 0x80	; 128
    3aec:	5f e3       	ldi	r21, 0x3F	; 63
    3aee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3af2:	88 23       	and	r24, r24
    3af4:	2c f4       	brge	.+10     	; 0x3b00 <main+0x884>
		__ticks = 1;
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	9a a3       	std	Y+34, r25	; 0x22
    3afc:	89 a3       	std	Y+33, r24	; 0x21
    3afe:	3f c0       	rjmp	.+126    	; 0x3b7e <main+0x902>
	else if (__tmp > 65535)
    3b00:	6b a1       	ldd	r22, Y+35	; 0x23
    3b02:	7c a1       	ldd	r23, Y+36	; 0x24
    3b04:	8d a1       	ldd	r24, Y+37	; 0x25
    3b06:	9e a1       	ldd	r25, Y+38	; 0x26
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	3f ef       	ldi	r19, 0xFF	; 255
    3b0c:	4f e7       	ldi	r20, 0x7F	; 127
    3b0e:	57 e4       	ldi	r21, 0x47	; 71
    3b10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b14:	18 16       	cp	r1, r24
    3b16:	4c f5       	brge	.+82     	; 0x3b6a <main+0x8ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b18:	6f a1       	ldd	r22, Y+39	; 0x27
    3b1a:	78 a5       	ldd	r23, Y+40	; 0x28
    3b1c:	89 a5       	ldd	r24, Y+41	; 0x29
    3b1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	40 e2       	ldi	r20, 0x20	; 32
    3b26:	51 e4       	ldi	r21, 0x41	; 65
    3b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	bc 01       	movw	r22, r24
    3b32:	cd 01       	movw	r24, r26
    3b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	9a a3       	std	Y+34, r25	; 0x22
    3b3e:	89 a3       	std	Y+33, r24	; 0x21
    3b40:	0f c0       	rjmp	.+30     	; 0x3b60 <main+0x8e4>
    3b42:	88 ec       	ldi	r24, 0xC8	; 200
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	98 a3       	std	Y+32, r25	; 0x20
    3b48:	8f 8f       	std	Y+31, r24	; 0x1f
    3b4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b4c:	98 a1       	ldd	r25, Y+32	; 0x20
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	f1 f7       	brne	.-4      	; 0x3b4e <main+0x8d2>
    3b52:	98 a3       	std	Y+32, r25	; 0x20
    3b54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b56:	89 a1       	ldd	r24, Y+33	; 0x21
    3b58:	9a a1       	ldd	r25, Y+34	; 0x22
    3b5a:	01 97       	sbiw	r24, 0x01	; 1
    3b5c:	9a a3       	std	Y+34, r25	; 0x22
    3b5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b60:	89 a1       	ldd	r24, Y+33	; 0x21
    3b62:	9a a1       	ldd	r25, Y+34	; 0x22
    3b64:	00 97       	sbiw	r24, 0x00	; 0
    3b66:	69 f7       	brne	.-38     	; 0x3b42 <main+0x8c6>
    3b68:	14 c0       	rjmp	.+40     	; 0x3b92 <main+0x916>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b6a:	6b a1       	ldd	r22, Y+35	; 0x23
    3b6c:	7c a1       	ldd	r23, Y+36	; 0x24
    3b6e:	8d a1       	ldd	r24, Y+37	; 0x25
    3b70:	9e a1       	ldd	r25, Y+38	; 0x26
    3b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	9a a3       	std	Y+34, r25	; 0x22
    3b7c:	89 a3       	std	Y+33, r24	; 0x21
    3b7e:	89 a1       	ldd	r24, Y+33	; 0x21
    3b80:	9a a1       	ldd	r25, Y+34	; 0x22
    3b82:	9e 8f       	std	Y+30, r25	; 0x1e
    3b84:	8d 8f       	std	Y+29, r24	; 0x1d
    3b86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b8a:	01 97       	sbiw	r24, 0x01	; 1
    3b8c:	f1 f7       	brne	.-4      	; 0x3b8a <main+0x90e>
    3b8e:	9e 8f       	std	Y+30, r25	; 0x1e
    3b90:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(50);
		}

		//If Temp bigger than 50 Deg , Buzzer will work
		if (Get_Temp >=50)
    3b92:	80 91 9a 01 	lds	r24, 0x019A
    3b96:	90 91 9b 01 	lds	r25, 0x019B
    3b9a:	82 33       	cpi	r24, 0x32	; 50
    3b9c:	91 05       	cpc	r25, r1
    3b9e:	08 f4       	brcc	.+2      	; 0x3ba2 <main+0x926>
    3ba0:	78 c0       	rjmp	.+240    	; 0x3c92 <main+0xa16>
		{
			DIO_VoidSetPinNumValue(Buzzer_Port,Buzzer_Pin,High_Pin);
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	62 e0       	ldi	r22, 0x02	; 2
    3ba6:	41 e0       	ldi	r20, 0x01	; 1
    3ba8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	a8 e4       	ldi	r26, 0x48	; 72
    3bb2:	b2 e4       	ldi	r27, 0x42	; 66
    3bb4:	89 8f       	std	Y+25, r24	; 0x19
    3bb6:	9a 8f       	std	Y+26, r25	; 0x1a
    3bb8:	ab 8f       	std	Y+27, r26	; 0x1b
    3bba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bbc:	69 8d       	ldd	r22, Y+25	; 0x19
    3bbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	4a ef       	ldi	r20, 0xFA	; 250
    3bca:	54 e4       	ldi	r21, 0x44	; 68
    3bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	8d 8b       	std	Y+21, r24	; 0x15
    3bd6:	9e 8b       	std	Y+22, r25	; 0x16
    3bd8:	af 8b       	std	Y+23, r26	; 0x17
    3bda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    3bde:	7e 89       	ldd	r23, Y+22	; 0x16
    3be0:	8f 89       	ldd	r24, Y+23	; 0x17
    3be2:	98 8d       	ldd	r25, Y+24	; 0x18
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	40 e8       	ldi	r20, 0x80	; 128
    3bea:	5f e3       	ldi	r21, 0x3F	; 63
    3bec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bf0:	88 23       	and	r24, r24
    3bf2:	2c f4       	brge	.+10     	; 0x3bfe <main+0x982>
		__ticks = 1;
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	9c 8b       	std	Y+20, r25	; 0x14
    3bfa:	8b 8b       	std	Y+19, r24	; 0x13
    3bfc:	3f c0       	rjmp	.+126    	; 0x3c7c <main+0xa00>
	else if (__tmp > 65535)
    3bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    3c00:	7e 89       	ldd	r23, Y+22	; 0x16
    3c02:	8f 89       	ldd	r24, Y+23	; 0x17
    3c04:	98 8d       	ldd	r25, Y+24	; 0x18
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	3f ef       	ldi	r19, 0xFF	; 255
    3c0a:	4f e7       	ldi	r20, 0x7F	; 127
    3c0c:	57 e4       	ldi	r21, 0x47	; 71
    3c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c12:	18 16       	cp	r1, r24
    3c14:	4c f5       	brge	.+82     	; 0x3c68 <main+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c16:	69 8d       	ldd	r22, Y+25	; 0x19
    3c18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	40 e2       	ldi	r20, 0x20	; 32
    3c24:	51 e4       	ldi	r21, 0x41	; 65
    3c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	bc 01       	movw	r22, r24
    3c30:	cd 01       	movw	r24, r26
    3c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c36:	dc 01       	movw	r26, r24
    3c38:	cb 01       	movw	r24, r22
    3c3a:	9c 8b       	std	Y+20, r25	; 0x14
    3c3c:	8b 8b       	std	Y+19, r24	; 0x13
    3c3e:	0f c0       	rjmp	.+30     	; 0x3c5e <main+0x9e2>
    3c40:	88 ec       	ldi	r24, 0xC8	; 200
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	9a 8b       	std	Y+18, r25	; 0x12
    3c46:	89 8b       	std	Y+17, r24	; 0x11
    3c48:	89 89       	ldd	r24, Y+17	; 0x11
    3c4a:	9a 89       	ldd	r25, Y+18	; 0x12
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	f1 f7       	brne	.-4      	; 0x3c4c <main+0x9d0>
    3c50:	9a 8b       	std	Y+18, r25	; 0x12
    3c52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c54:	8b 89       	ldd	r24, Y+19	; 0x13
    3c56:	9c 89       	ldd	r25, Y+20	; 0x14
    3c58:	01 97       	sbiw	r24, 0x01	; 1
    3c5a:	9c 8b       	std	Y+20, r25	; 0x14
    3c5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c60:	9c 89       	ldd	r25, Y+20	; 0x14
    3c62:	00 97       	sbiw	r24, 0x00	; 0
    3c64:	69 f7       	brne	.-38     	; 0x3c40 <main+0x9c4>
    3c66:	94 c0       	rjmp	.+296    	; 0x3d90 <main+0xb14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c68:	6d 89       	ldd	r22, Y+21	; 0x15
    3c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	9c 8b       	std	Y+20, r25	; 0x14
    3c7a:	8b 8b       	std	Y+19, r24	; 0x13
    3c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c80:	98 8b       	std	Y+16, r25	; 0x10
    3c82:	8f 87       	std	Y+15, r24	; 0x0f
    3c84:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c86:	98 89       	ldd	r25, Y+16	; 0x10
    3c88:	01 97       	sbiw	r24, 0x01	; 1
    3c8a:	f1 f7       	brne	.-4      	; 0x3c88 <main+0xa0c>
    3c8c:	98 8b       	std	Y+16, r25	; 0x10
    3c8e:	8f 87       	std	Y+15, r24	; 0x0f
    3c90:	7f c0       	rjmp	.+254    	; 0x3d90 <main+0xb14>
			_delay_ms(50);
		}
		else if (Get_Temp <50)
    3c92:	80 91 9a 01 	lds	r24, 0x019A
    3c96:	90 91 9b 01 	lds	r25, 0x019B
    3c9a:	82 33       	cpi	r24, 0x32	; 50
    3c9c:	91 05       	cpc	r25, r1
    3c9e:	08 f0       	brcs	.+2      	; 0x3ca2 <main+0xa26>
    3ca0:	77 c0       	rjmp	.+238    	; 0x3d90 <main+0xb14>
		{
			DIO_VoidSetPinNumValue(Buzzer_Port,Buzzer_Pin,Low_Pin);
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	62 e0       	ldi	r22, 0x02	; 2
    3ca6:	40 e0       	ldi	r20, 0x00	; 0
    3ca8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <DIO_VoidSetPinNumValue>
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	a8 e4       	ldi	r26, 0x48	; 72
    3cb2:	b2 e4       	ldi	r27, 0x42	; 66
    3cb4:	8b 87       	std	Y+11, r24	; 0x0b
    3cb6:	9c 87       	std	Y+12, r25	; 0x0c
    3cb8:	ad 87       	std	Y+13, r26	; 0x0d
    3cba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	4a ef       	ldi	r20, 0xFA	; 250
    3cca:	54 e4       	ldi	r21, 0x44	; 68
    3ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	8f 83       	std	Y+7, r24	; 0x07
    3cd6:	98 87       	std	Y+8, r25	; 0x08
    3cd8:	a9 87       	std	Y+9, r26	; 0x09
    3cda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    3cde:	78 85       	ldd	r23, Y+8	; 0x08
    3ce0:	89 85       	ldd	r24, Y+9	; 0x09
    3ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce4:	20 e0       	ldi	r18, 0x00	; 0
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	40 e8       	ldi	r20, 0x80	; 128
    3cea:	5f e3       	ldi	r21, 0x3F	; 63
    3cec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cf0:	88 23       	and	r24, r24
    3cf2:	2c f4       	brge	.+10     	; 0x3cfe <main+0xa82>
		__ticks = 1;
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	9e 83       	std	Y+6, r25	; 0x06
    3cfa:	8d 83       	std	Y+5, r24	; 0x05
    3cfc:	3f c0       	rjmp	.+126    	; 0x3d7c <main+0xb00>
	else if (__tmp > 65535)
    3cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    3d00:	78 85       	ldd	r23, Y+8	; 0x08
    3d02:	89 85       	ldd	r24, Y+9	; 0x09
    3d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	3f ef       	ldi	r19, 0xFF	; 255
    3d0a:	4f e7       	ldi	r20, 0x7F	; 127
    3d0c:	57 e4       	ldi	r21, 0x47	; 71
    3d0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d12:	18 16       	cp	r1, r24
    3d14:	4c f5       	brge	.+82     	; 0x3d68 <main+0xaec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	40 e2       	ldi	r20, 0x20	; 32
    3d24:	51 e4       	ldi	r21, 0x41	; 65
    3d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2a:	dc 01       	movw	r26, r24
    3d2c:	cb 01       	movw	r24, r22
    3d2e:	bc 01       	movw	r22, r24
    3d30:	cd 01       	movw	r24, r26
    3d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d36:	dc 01       	movw	r26, r24
    3d38:	cb 01       	movw	r24, r22
    3d3a:	9e 83       	std	Y+6, r25	; 0x06
    3d3c:	8d 83       	std	Y+5, r24	; 0x05
    3d3e:	0f c0       	rjmp	.+30     	; 0x3d5e <main+0xae2>
    3d40:	88 ec       	ldi	r24, 0xC8	; 200
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	9c 83       	std	Y+4, r25	; 0x04
    3d46:	8b 83       	std	Y+3, r24	; 0x03
    3d48:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	f1 f7       	brne	.-4      	; 0x3d4c <main+0xad0>
    3d50:	9c 83       	std	Y+4, r25	; 0x04
    3d52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d54:	8d 81       	ldd	r24, Y+5	; 0x05
    3d56:	9e 81       	ldd	r25, Y+6	; 0x06
    3d58:	01 97       	sbiw	r24, 0x01	; 1
    3d5a:	9e 83       	std	Y+6, r25	; 0x06
    3d5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d60:	9e 81       	ldd	r25, Y+6	; 0x06
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	69 f7       	brne	.-38     	; 0x3d40 <main+0xac4>
    3d66:	14 c0       	rjmp	.+40     	; 0x3d90 <main+0xb14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d68:	6f 81       	ldd	r22, Y+7	; 0x07
    3d6a:	78 85       	ldd	r23, Y+8	; 0x08
    3d6c:	89 85       	ldd	r24, Y+9	; 0x09
    3d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d74:	dc 01       	movw	r26, r24
    3d76:	cb 01       	movw	r24, r22
    3d78:	9e 83       	std	Y+6, r25	; 0x06
    3d7a:	8d 83       	std	Y+5, r24	; 0x05
    3d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d80:	9a 83       	std	Y+2, r25	; 0x02
    3d82:	89 83       	std	Y+1, r24	; 0x01
    3d84:	89 81       	ldd	r24, Y+1	; 0x01
    3d86:	9a 81       	ldd	r25, Y+2	; 0x02
    3d88:	01 97       	sbiw	r24, 0x01	; 1
    3d8a:	f1 f7       	brne	.-4      	; 0x3d88 <main+0xb0c>
    3d8c:	9a 83       	std	Y+2, r25	; 0x02
    3d8e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
		}


		LCD_VoidClear();
    3d90:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <LCD_VoidClear>
    3d94:	a0 ca       	rjmp	.-2752   	; 0x32d6 <main+0x5a>

00003d96 <__mulsi3>:
    3d96:	62 9f       	mul	r22, r18
    3d98:	d0 01       	movw	r26, r0
    3d9a:	73 9f       	mul	r23, r19
    3d9c:	f0 01       	movw	r30, r0
    3d9e:	82 9f       	mul	r24, r18
    3da0:	e0 0d       	add	r30, r0
    3da2:	f1 1d       	adc	r31, r1
    3da4:	64 9f       	mul	r22, r20
    3da6:	e0 0d       	add	r30, r0
    3da8:	f1 1d       	adc	r31, r1
    3daa:	92 9f       	mul	r25, r18
    3dac:	f0 0d       	add	r31, r0
    3dae:	83 9f       	mul	r24, r19
    3db0:	f0 0d       	add	r31, r0
    3db2:	74 9f       	mul	r23, r20
    3db4:	f0 0d       	add	r31, r0
    3db6:	65 9f       	mul	r22, r21
    3db8:	f0 0d       	add	r31, r0
    3dba:	99 27       	eor	r25, r25
    3dbc:	72 9f       	mul	r23, r18
    3dbe:	b0 0d       	add	r27, r0
    3dc0:	e1 1d       	adc	r30, r1
    3dc2:	f9 1f       	adc	r31, r25
    3dc4:	63 9f       	mul	r22, r19
    3dc6:	b0 0d       	add	r27, r0
    3dc8:	e1 1d       	adc	r30, r1
    3dca:	f9 1f       	adc	r31, r25
    3dcc:	bd 01       	movw	r22, r26
    3dce:	cf 01       	movw	r24, r30
    3dd0:	11 24       	eor	r1, r1
    3dd2:	08 95       	ret

00003dd4 <__udivmodqi4>:
    3dd4:	99 1b       	sub	r25, r25
    3dd6:	79 e0       	ldi	r23, 0x09	; 9
    3dd8:	04 c0       	rjmp	.+8      	; 0x3de2 <__udivmodqi4_ep>

00003dda <__udivmodqi4_loop>:
    3dda:	99 1f       	adc	r25, r25
    3ddc:	96 17       	cp	r25, r22
    3dde:	08 f0       	brcs	.+2      	; 0x3de2 <__udivmodqi4_ep>
    3de0:	96 1b       	sub	r25, r22

00003de2 <__udivmodqi4_ep>:
    3de2:	88 1f       	adc	r24, r24
    3de4:	7a 95       	dec	r23
    3de6:	c9 f7       	brne	.-14     	; 0x3dda <__udivmodqi4_loop>
    3de8:	80 95       	com	r24
    3dea:	08 95       	ret

00003dec <__udivmodsi4>:
    3dec:	a1 e2       	ldi	r26, 0x21	; 33
    3dee:	1a 2e       	mov	r1, r26
    3df0:	aa 1b       	sub	r26, r26
    3df2:	bb 1b       	sub	r27, r27
    3df4:	fd 01       	movw	r30, r26
    3df6:	0d c0       	rjmp	.+26     	; 0x3e12 <__udivmodsi4_ep>

00003df8 <__udivmodsi4_loop>:
    3df8:	aa 1f       	adc	r26, r26
    3dfa:	bb 1f       	adc	r27, r27
    3dfc:	ee 1f       	adc	r30, r30
    3dfe:	ff 1f       	adc	r31, r31
    3e00:	a2 17       	cp	r26, r18
    3e02:	b3 07       	cpc	r27, r19
    3e04:	e4 07       	cpc	r30, r20
    3e06:	f5 07       	cpc	r31, r21
    3e08:	20 f0       	brcs	.+8      	; 0x3e12 <__udivmodsi4_ep>
    3e0a:	a2 1b       	sub	r26, r18
    3e0c:	b3 0b       	sbc	r27, r19
    3e0e:	e4 0b       	sbc	r30, r20
    3e10:	f5 0b       	sbc	r31, r21

00003e12 <__udivmodsi4_ep>:
    3e12:	66 1f       	adc	r22, r22
    3e14:	77 1f       	adc	r23, r23
    3e16:	88 1f       	adc	r24, r24
    3e18:	99 1f       	adc	r25, r25
    3e1a:	1a 94       	dec	r1
    3e1c:	69 f7       	brne	.-38     	; 0x3df8 <__udivmodsi4_loop>
    3e1e:	60 95       	com	r22
    3e20:	70 95       	com	r23
    3e22:	80 95       	com	r24
    3e24:	90 95       	com	r25
    3e26:	9b 01       	movw	r18, r22
    3e28:	ac 01       	movw	r20, r24
    3e2a:	bd 01       	movw	r22, r26
    3e2c:	cf 01       	movw	r24, r30
    3e2e:	08 95       	ret

00003e30 <__prologue_saves__>:
    3e30:	2f 92       	push	r2
    3e32:	3f 92       	push	r3
    3e34:	4f 92       	push	r4
    3e36:	5f 92       	push	r5
    3e38:	6f 92       	push	r6
    3e3a:	7f 92       	push	r7
    3e3c:	8f 92       	push	r8
    3e3e:	9f 92       	push	r9
    3e40:	af 92       	push	r10
    3e42:	bf 92       	push	r11
    3e44:	cf 92       	push	r12
    3e46:	df 92       	push	r13
    3e48:	ef 92       	push	r14
    3e4a:	ff 92       	push	r15
    3e4c:	0f 93       	push	r16
    3e4e:	1f 93       	push	r17
    3e50:	cf 93       	push	r28
    3e52:	df 93       	push	r29
    3e54:	cd b7       	in	r28, 0x3d	; 61
    3e56:	de b7       	in	r29, 0x3e	; 62
    3e58:	ca 1b       	sub	r28, r26
    3e5a:	db 0b       	sbc	r29, r27
    3e5c:	0f b6       	in	r0, 0x3f	; 63
    3e5e:	f8 94       	cli
    3e60:	de bf       	out	0x3e, r29	; 62
    3e62:	0f be       	out	0x3f, r0	; 63
    3e64:	cd bf       	out	0x3d, r28	; 61
    3e66:	09 94       	ijmp

00003e68 <__epilogue_restores__>:
    3e68:	2a 88       	ldd	r2, Y+18	; 0x12
    3e6a:	39 88       	ldd	r3, Y+17	; 0x11
    3e6c:	48 88       	ldd	r4, Y+16	; 0x10
    3e6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e70:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e72:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e74:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e76:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e78:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e7a:	b9 84       	ldd	r11, Y+9	; 0x09
    3e7c:	c8 84       	ldd	r12, Y+8	; 0x08
    3e7e:	df 80       	ldd	r13, Y+7	; 0x07
    3e80:	ee 80       	ldd	r14, Y+6	; 0x06
    3e82:	fd 80       	ldd	r15, Y+5	; 0x05
    3e84:	0c 81       	ldd	r16, Y+4	; 0x04
    3e86:	1b 81       	ldd	r17, Y+3	; 0x03
    3e88:	aa 81       	ldd	r26, Y+2	; 0x02
    3e8a:	b9 81       	ldd	r27, Y+1	; 0x01
    3e8c:	ce 0f       	add	r28, r30
    3e8e:	d1 1d       	adc	r29, r1
    3e90:	0f b6       	in	r0, 0x3f	; 63
    3e92:	f8 94       	cli
    3e94:	de bf       	out	0x3e, r29	; 62
    3e96:	0f be       	out	0x3f, r0	; 63
    3e98:	cd bf       	out	0x3d, r28	; 61
    3e9a:	ed 01       	movw	r28, r26
    3e9c:	08 95       	ret

00003e9e <_exit>:
    3e9e:	f8 94       	cli

00003ea0 <__stop_program>:
    3ea0:	ff cf       	rjmp	.-2      	; 0x3ea0 <__stop_program>
